Search.setIndex({"alltitles": {"ABS": [[1364, "abs"]], "ACOS": [[1367, "acos"]], "ACOSD": [[1367, "acosd"]], "ARRAY_AGG": [[1360, "array-agg"]], "ARRAY_CONTAINS": [[1360, "array-contains"]], "ARRAY_GET": [[1360, "array-get"]], "ARRAY_LENGTH": [[1360, "array-length"]], "ARRAY_LOWER": [[1360, "array-lower"]], "ARRAY_MEAN": [[1360, "array-mean"]], "ARRAY_REVERSE": [[1360, "array-reverse"]], "ARRAY_SUM": [[1360, "array-sum"]], "ARRAY_TO_STRING": [[1360, "array-to-string"]], "ARRAY_UNIQUE": [[1360, "array-unique"]], "ARRAY_UPPER": [[1360, "array-upper"]], "ASIN": [[1367, "asin"]], "ASIND": [[1367, "asind"]], "ATAN": [[1367, "atan"]], "ATAN2": [[1367, "atan2"]], "ATAN2D": [[1367, "atan2d"]], "ATAND": [[1367, "atand"]], "AVG": [[1359, "avg"]], "Aggregate": [[1359, null]], "Aggregation": [[194, null], [347, null], [845, null], [954, null]], "Aliases": [[1359, null], [1359, null], [1364, null], [1364, null], [1365, null], [1365, null]], "Array": [[823, null], [1334, null], [1360, null]], "Asserts": [[1373, "asserts"]], "Attributes": [[335, null], [942, null], [1335, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[844, "avro"]], "BIT_AND": [[1361, "bit-and"]], "BIT_COUNT": [[1361, "bit-count"]], "BIT_LENGTH": [[1365, "bit-length"]], "BIT_OR": [[1361, "bit-or"]], "BIT_XOR": [[1361, "bit-xor"]], "Binary": [[824, null], [837, "binary"], [1336, null]], "Bitwise": [[1361, null]], "Boolean": [[825, null], [1337, null]], "CAST": [[1368, "cast"]], "CBRT": [[1364, "cbrt"]], "CEIL": [[1364, "ceil"]], "COALESCE": [[1362, "coalesce"]], "CONCAT": [[1365, "concat"]], "CONCAT_WS": [[1365, "concat-ws"]], "COS": [[1367, "cos"]], "COSD": [[1367, "cosd"]], "COT": [[1367, "cot"]], "COTD": [[1367, "cotd"]], "COUNT": [[1359, "count"]], "CREATE TABLE": [[1372, "create-table"]], "CSV": [[844, "csv"]], "Catalog": [[191, null]], "Categories": [[826, null], [1338, null]], "Clipboard": [[844, "clipboard"]], "Cloud Credentials": [[844, "cloud-credentials"]], "Columns / names": [[828, null]], "Comparison": [[837, "comparison"], [1346, "comparison"]], "Computation": [[336, null], [829, null], [1339, null]], "Conditional": [[1362, null]], "Config": [[193, null]], "Config load, save, state": [[193, "config-load-save-state"]], "Config options": [[193, "config-options"]], "Conjunction": [[837, "conjunction"]], "Conversion": [[842, "conversion"]], "DATE": [[1365, "date"]], "DATE_PART": [[1366, "date-part"]], "DEGREES": [[1367, "degrees"]], "DELETE": [[1372, "delete"]], "DISTINCT": [[1358, "distinct"]], "DIV": [[1364, "div"]], "DROP TABLES": [[1372, "drop-tables"]], "Data types": [[345, null]], "DataFrame": [[340, null]], "DataType": [[345, "datatype"]], "Database": [[844, "database"]], "Delta Lake": [[844, "delta-lake"]], "Descriptive": [[337, null], [943, null], [1340, null]], "Documentation": [[1370, null], [1370, null], [1370, null]], "ENDS_WITH": [[1365, "ends-with"]], "EXCEPT": [[1371, "except"]], "EXP": [[1364, "exp"]], "EXPLAIN": [[1372, "explain"]], "EXTRACT": [[1366, "extract"]], "Errors": [[346, "errors"]], "Examples": [[1, "examples"], [953, "examples"], [1373, "examples"]], "Excel / ODS": [[844, "excel-ods"]], "Exceptions": [[346, null]], "Export": [[338, null], [1341, null]], "Expression SQL": [[1370, "expression-sql"]], "Expression plugins": [[951, "expression-plugins"]], "Expressions": [[831, null]], "Extending the API": [[1, null]], "FIRST": [[1359, "first"]], "FLOOR": [[1364, "floor"]], "FROM": [[1358, "from"]], "Feather / IPC": [[844, "feather-ipc"]], "Frame SQL": [[1370, "frame-sql"]], "Functions": [[830, null], [842, null], [953, "functions"]], "GPUEngine": [[944, null]], "GREATEST": [[1362, "greatest"]], "GROUP BY": [[1358, "group-by"]], "Global SQL": [[1370, "global-sql"]], "GroupBy": [[339, null], [945, null]], "HAVING": [[1358, "having"]], "IF": [[1362, "if"]], "IFNULL": [[1362, "ifnull"]], "INITCAP": [[1365, "initcap"]], "INTERSECT": [[1371, "intersect"]], "IO plugins": [[951, "io-plugins"]], "Iceberg": [[844, "iceberg"]], "Importing": [[953, "importing"]], "InProcessQuery": [[946, null]], "Index": [[0, null]], "Input/output": [[844, null]], "Introduction": [[1370, "introduction"]], "JOIN": [[1358, "join"]], "JSON": [[844, "json"]], "LAST": [[1359, "last"]], "LEAST": [[1362, "least"]], "LEFT": [[1365, "left"]], "LENGTH": [[1365, "length"]], "LIMIT": [[1358, "limit"]], "LN": [[1364, "ln"]], "LOG": [[1364, "log"]], "LOG10": [[1364, "log10"]], "LOG1P": [[1364, "log1p"]], "LOG2": [[1364, "log2"]], "LOWER": [[1365, "lower"]], "LTRIM": [[1365, "ltrim"]], "LazyFrame": [[947, null]], "List": [[832, null], [1343, null]], "MAX": [[1359, "max"]], "MEDIAN": [[1359, "median"]], "MIN": [[1359, "min"]], "MOD": [[1364, "mod"]], "Manipulation/selection": [[342, null], [835, null], [949, null], [1345, null]], "Math": [[1364, null]], "Meta": [[833, null]], "Metadata": [[950, null]], "Methods": [[1370, "methods"]], "Miscellaneous": [[341, null], [834, null], [842, "miscellaneous"], [948, null], [1344, null]], "Multiple Config instances": [[193, "multiple-config-instances"]], "NORMALIZE": [[1365, "normalize"]], "NULLIF": [[1362, "nullif"]], "Name": [[836, null]], "Nested": [[345, "nested"]], "Numeric": [[345, "numeric"], [837, "numeric"], [1346, "numeric"]], "OCTET_LENGTH": [[1365, "octet-length"]], "OFFSET": [[1358, "offset"]], "ORDER BY": [[1358, "order-by"]], "Operators": [[837, null], [1346, null]], "Other": [[345, "other"]], "PI": [[1364, "pi"]], "POW": [[1364, "pow"]], "Panic": [[346, "panic"]], "Parallelization": [[842, "parallelization"]], "Parametric testing": [[1373, "parametric-testing"]], "Parquet": [[844, "parquet"]], "Plot": [[343, null], [1347, null]], "Plugins": [[951, null]], "Polars strategies": [[1373, "polars-strategies"]], "Profiles": [[1373, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[844, "pyarrow-datasets"]], "Python API": [[1370, null]], "Python API reference": [[843, null]], "QUANTILE_CONT": [[1359, "quantile-cont"]], "QUANTILE_DISC": [[1359, "quantile-disc"]], "Querying": [[1370, "querying"]], "RADIANS": [[1367, "radians"]], "REGEXP_LIKE": [[1365, "regexp-like"]], "REPLACE": [[1365, "replace"]], "REVERSE": [[1365, "reverse"]], "RIGHT": [[1365, "right"]], "ROUND": [[1364, "round"]], "RTRIM": [[1365, "rtrim"]], "Random": [[842, "random"]], "SELECT": [[1358, "select"]], "SHOW TABLES": [[1372, "show-tables"]], "SIGN": [[1364, "sign"]], "SIN": [[1367, "sin"]], "SIND": [[1367, "sind"]], "SQL Clauses": [[1358, null]], "SQL Functions": [[1363, null]], "SQL Interface": [[1369, null]], "SQLContext": [[1370, "sqlcontext"]], "SQRT": [[1364, "sqrt"]], "STARTS_WITH": [[1365, "starts-with"]], "STDDEV": [[1359, "stddev"]], "STRFTIME": [[1366, "strftime"]], "STRPOS": [[1365, "strpos"]], "STRPTIME": [[1365, "strptime"]], "SUBSTR": [[1365, "substr"]], "SUM": [[1359, "sum"]], "Schema": [[952, null]], "Selectors": [[953, null]], "Serialization": [[341, "serialization"], [948, "serialization"]], "Series": [[1342, null]], "Set Operations": [[1371, null]], "Set operations": [[953, "set-operations"]], "Strategy helpers": [[1373, "strategy-helpers"]], "String": [[345, "string"], [838, null], [1348, null], [1365, null]], "StringCache": [[842, "stringcache"]], "Struct": [[839, null], [1349, null]], "Style": [[344, null]], "TAN": [[1367, "tan"]], "TAND": [[1367, "tand"]], "TIMESTAMP": [[1365, "timestamp"]], "TRUNCATE": [[1372, "truncate"]], "TRY_CAST": [[1368, "try-cast"]], "Table Operations": [[1372, null]], "Temporal": [[345, "temporal"], [840, null], [1350, null], [1366, null]], "Testing": [[1373, null]], "Trigonometry": [[1367, null]], "Types": [[1368, null]], "UNION": [[1371, "union"]], "UNION ALL": [[1371, "union-all"]], "UNION BY NAME": [[1371, "union-by-name"]], "UNNEST": [[1360, "unnest"], [1372, "unnest"]], "UPPER": [[1365, "upper"]], "Unity Catalog": [[192, null]], "Use as a context manager": [[193, "use-as-a-context-manager"]], "Use as a decorator": [[193, "use-as-a-decorator"]], "VARIANCE": [[1359, "variance"]], "WHERE": [[1358, "where"]], "Warnings": [[346, "warnings"]], "Window": [[841, null]], "polars.Catalog": [[178, null]], "polars.Catalog.get_table_info": [[179, null]], "polars.Catalog.list_catalogs": [[180, null]], "polars.Catalog.list_namespaces": [[181, null]], "polars.Catalog.list_tables": [[182, null]], "polars.Catalog.scan_table": [[183, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderAzure": [[33, null]], "polars.CredentialProviderGCP": [[34, null]], "polars.DataFrame.__array__": [[195, null]], "polars.DataFrame.__arrow_c_stream__": [[196, null]], "polars.DataFrame.__dataframe__": [[197, null]], "polars.DataFrame.__getitem__": [[198, null]], "polars.DataFrame.approx_n_unique": [[199, null]], "polars.DataFrame.bottom_k": [[200, null]], "polars.DataFrame.cast": [[201, null]], "polars.DataFrame.clear": [[202, null]], "polars.DataFrame.clone": [[203, null]], "polars.DataFrame.collect_schema": [[204, null]], "polars.DataFrame.columns": [[205, null]], "polars.DataFrame.corr": [[206, null]], "polars.DataFrame.count": [[207, null]], "polars.DataFrame.describe": [[208, null]], "polars.DataFrame.deserialize": [[209, null]], "polars.DataFrame.drop": [[210, null]], "polars.DataFrame.drop_in_place": [[211, null]], "polars.DataFrame.drop_nans": [[212, null]], "polars.DataFrame.drop_nulls": [[213, null]], "polars.DataFrame.dtypes": [[214, null]], "polars.DataFrame.equals": [[215, null]], "polars.DataFrame.estimated_size": [[216, null]], "polars.DataFrame.explode": [[217, null]], "polars.DataFrame.extend": [[218, null]], "polars.DataFrame.fill_nan": [[219, null]], "polars.DataFrame.fill_null": [[220, null]], "polars.DataFrame.filter": [[221, null]], "polars.DataFrame.flags": [[222, null]], "polars.DataFrame.fold": [[223, null]], "polars.DataFrame.gather_every": [[224, null]], "polars.DataFrame.get_column": [[225, null]], "polars.DataFrame.get_column_index": [[226, null]], "polars.DataFrame.get_columns": [[227, null]], "polars.DataFrame.glimpse": [[228, null]], "polars.DataFrame.group_by": [[229, null]], "polars.DataFrame.group_by_dynamic": [[230, null]], "polars.DataFrame.hash_rows": [[231, null]], "polars.DataFrame.head": [[232, null]], "polars.DataFrame.height": [[233, null]], "polars.DataFrame.hstack": [[234, null]], "polars.DataFrame.insert_column": [[235, null]], "polars.DataFrame.interpolate": [[236, null]], "polars.DataFrame.is_duplicated": [[237, null]], "polars.DataFrame.is_empty": [[238, null]], "polars.DataFrame.is_unique": [[239, null]], "polars.DataFrame.item": [[240, null]], "polars.DataFrame.iter_columns": [[241, null]], "polars.DataFrame.iter_rows": [[242, null]], "polars.DataFrame.iter_slices": [[243, null]], "polars.DataFrame.join": [[244, null]], "polars.DataFrame.join_asof": [[245, null]], "polars.DataFrame.join_where": [[246, null]], "polars.DataFrame.lazy": [[247, null]], "polars.DataFrame.limit": [[248, null]], "polars.DataFrame.map_rows": [[249, null]], "polars.DataFrame.max": [[250, null]], "polars.DataFrame.max_horizontal": [[251, null]], "polars.DataFrame.mean": [[252, null]], "polars.DataFrame.mean_horizontal": [[253, null]], "polars.DataFrame.median": [[254, null]], "polars.DataFrame.melt": [[255, null]], "polars.DataFrame.merge_sorted": [[256, null]], "polars.DataFrame.min": [[257, null]], "polars.DataFrame.min_horizontal": [[258, null]], "polars.DataFrame.n_chunks": [[259, null]], "polars.DataFrame.n_unique": [[260, null]], "polars.DataFrame.null_count": [[261, null]], "polars.DataFrame.partition_by": [[262, null]], "polars.DataFrame.pipe": [[263, null]], "polars.DataFrame.pivot": [[264, null]], "polars.DataFrame.product": [[265, null]], "polars.DataFrame.quantile": [[266, null]], "polars.DataFrame.rechunk": [[267, null]], "polars.DataFrame.remove": [[268, null]], "polars.DataFrame.rename": [[269, null]], "polars.DataFrame.replace_column": [[270, null]], "polars.DataFrame.reverse": [[271, null]], "polars.DataFrame.rolling": [[272, null]], "polars.DataFrame.row": [[273, null]], "polars.DataFrame.rows": [[274, null]], "polars.DataFrame.rows_by_key": [[275, null]], "polars.DataFrame.sample": [[276, null]], "polars.DataFrame.schema": [[277, null]], "polars.DataFrame.select": [[278, null]], "polars.DataFrame.select_seq": [[279, null]], "polars.DataFrame.serialize": [[280, null]], "polars.DataFrame.set_sorted": [[281, null]], "polars.DataFrame.shape": [[282, null]], "polars.DataFrame.shift": [[283, null]], "polars.DataFrame.shrink_to_fit": [[284, null]], "polars.DataFrame.slice": [[285, null]], "polars.DataFrame.sort": [[286, null]], "polars.DataFrame.sql": [[287, null]], "polars.DataFrame.std": [[288, null]], "polars.DataFrame.sum": [[289, null]], "polars.DataFrame.sum_horizontal": [[290, null]], "polars.DataFrame.tail": [[291, null]], "polars.DataFrame.to_arrow": [[292, null]], "polars.DataFrame.to_dict": [[293, null]], "polars.DataFrame.to_dicts": [[294, null]], "polars.DataFrame.to_dummies": [[295, null]], "polars.DataFrame.to_init_repr": [[296, null]], "polars.DataFrame.to_jax": [[297, null]], "polars.DataFrame.to_numpy": [[298, null]], "polars.DataFrame.to_pandas": [[299, null]], "polars.DataFrame.to_series": [[300, null]], "polars.DataFrame.to_struct": [[301, null]], "polars.DataFrame.to_torch": [[302, null]], "polars.DataFrame.top_k": [[303, null]], "polars.DataFrame.transpose": [[304, null]], "polars.DataFrame.unique": [[305, null]], "polars.DataFrame.unnest": [[306, null]], "polars.DataFrame.unpivot": [[307, null]], "polars.DataFrame.unstack": [[308, null]], "polars.DataFrame.update": [[309, null]], "polars.DataFrame.upsample": [[310, null]], "polars.DataFrame.var": [[311, null]], "polars.DataFrame.vstack": [[312, null]], "polars.DataFrame.width": [[313, null]], "polars.DataFrame.with_columns": [[314, null]], "polars.DataFrame.with_columns_seq": [[315, null]], "polars.DataFrame.with_row_count": [[316, null]], "polars.DataFrame.with_row_index": [[317, null]], "polars.DataFrame.write_avro": [[35, null]], "polars.DataFrame.write_clipboard": [[36, null]], "polars.DataFrame.write_csv": [[37, null]], "polars.DataFrame.write_database": [[38, null]], "polars.DataFrame.write_delta": [[39, null]], "polars.DataFrame.write_excel": [[40, null]], "polars.DataFrame.write_iceberg": [[41, null]], "polars.DataFrame.write_ipc": [[42, null]], "polars.DataFrame.write_ipc_stream": [[43, null]], "polars.DataFrame.write_json": [[44, null]], "polars.DataFrame.write_ndjson": [[45, null]], "polars.DataFrame.write_parquet": [[46, null]], "polars.Expr.abs": [[348, null]], "polars.Expr.add": [[349, null]], "polars.Expr.agg_groups": [[350, null]], "polars.Expr.alias": [[351, null]], "polars.Expr.all": [[352, null]], "polars.Expr.and_": [[353, null]], "polars.Expr.any": [[354, null]], "polars.Expr.append": [[355, null]], "polars.Expr.approx_n_unique": [[356, null]], "polars.Expr.arccos": [[357, null]], "polars.Expr.arccosh": [[358, null]], "polars.Expr.arcsin": [[359, null]], "polars.Expr.arcsinh": [[360, null]], "polars.Expr.arctan": [[361, null]], "polars.Expr.arctanh": [[362, null]], "polars.Expr.arg_max": [[363, null]], "polars.Expr.arg_min": [[364, null]], "polars.Expr.arg_sort": [[365, null]], "polars.Expr.arg_true": [[366, null]], "polars.Expr.arg_unique": [[367, null]], "polars.Expr.arr.all": [[368, null]], "polars.Expr.arr.any": [[369, null]], "polars.Expr.arr.arg_max": [[370, null]], "polars.Expr.arr.arg_min": [[371, null]], "polars.Expr.arr.contains": [[372, null]], "polars.Expr.arr.count_matches": [[373, null]], "polars.Expr.arr.explode": [[374, null]], "polars.Expr.arr.first": [[375, null]], "polars.Expr.arr.get": [[376, null]], "polars.Expr.arr.join": [[377, null]], "polars.Expr.arr.last": [[378, null]], "polars.Expr.arr.max": [[379, null]], "polars.Expr.arr.median": [[380, null]], "polars.Expr.arr.min": [[381, null]], "polars.Expr.arr.n_unique": [[382, null]], "polars.Expr.arr.reverse": [[383, null]], "polars.Expr.arr.shift": [[384, null]], "polars.Expr.arr.sort": [[385, null]], "polars.Expr.arr.std": [[386, null]], "polars.Expr.arr.sum": [[387, null]], "polars.Expr.arr.to_list": [[388, null]], "polars.Expr.arr.to_struct": [[389, null]], "polars.Expr.arr.unique": [[390, null]], "polars.Expr.arr.var": [[391, null]], "polars.Expr.backward_fill": [[392, null]], "polars.Expr.bin.contains": [[393, null]], "polars.Expr.bin.decode": [[394, null]], "polars.Expr.bin.encode": [[395, null]], "polars.Expr.bin.ends_with": [[396, null]], "polars.Expr.bin.reinterpret": [[397, null]], "polars.Expr.bin.size": [[398, null]], "polars.Expr.bin.starts_with": [[399, null]], "polars.Expr.bitwise_and": [[400, null]], "polars.Expr.bitwise_count_ones": [[401, null]], "polars.Expr.bitwise_count_zeros": [[402, null]], "polars.Expr.bitwise_leading_ones": [[403, null]], "polars.Expr.bitwise_leading_zeros": [[404, null]], "polars.Expr.bitwise_or": [[405, null]], "polars.Expr.bitwise_trailing_ones": [[406, null]], "polars.Expr.bitwise_trailing_zeros": [[407, null]], "polars.Expr.bitwise_xor": [[408, null]], "polars.Expr.bottom_k": [[409, null]], "polars.Expr.bottom_k_by": [[410, null]], "polars.Expr.cast": [[411, null]], "polars.Expr.cat.ends_with": [[412, null]], "polars.Expr.cat.get_categories": [[413, null]], "polars.Expr.cat.len_bytes": [[414, null]], "polars.Expr.cat.len_chars": [[415, null]], "polars.Expr.cat.starts_with": [[416, null]], "polars.Expr.cbrt": [[417, null]], "polars.Expr.ceil": [[418, null]], "polars.Expr.clip": [[419, null]], "polars.Expr.cos": [[420, null]], "polars.Expr.cosh": [[421, null]], "polars.Expr.cot": [[422, null]], "polars.Expr.count": [[423, null]], "polars.Expr.cum_count": [[424, null]], "polars.Expr.cum_max": [[425, null]], "polars.Expr.cum_min": [[426, null]], "polars.Expr.cum_prod": [[427, null]], "polars.Expr.cum_sum": [[428, null]], "polars.Expr.cumulative_eval": [[429, null]], "polars.Expr.cut": [[430, null]], "polars.Expr.degrees": [[431, null]], "polars.Expr.deserialize": [[432, null]], "polars.Expr.diff": [[433, null]], "polars.Expr.dot": [[434, null]], "polars.Expr.drop_nans": [[435, null]], "polars.Expr.drop_nulls": [[436, null]], "polars.Expr.dt.add_business_days": [[437, null]], "polars.Expr.dt.base_utc_offset": [[438, null]], "polars.Expr.dt.cast_time_unit": [[439, null]], "polars.Expr.dt.century": [[440, null]], "polars.Expr.dt.combine": [[441, null]], "polars.Expr.dt.convert_time_zone": [[442, null]], "polars.Expr.dt.date": [[443, null]], "polars.Expr.dt.datetime": [[444, null]], "polars.Expr.dt.day": [[445, null]], "polars.Expr.dt.dst_offset": [[446, null]], "polars.Expr.dt.epoch": [[447, null]], "polars.Expr.dt.hour": [[448, null]], "polars.Expr.dt.is_leap_year": [[449, null]], "polars.Expr.dt.iso_year": [[450, null]], "polars.Expr.dt.microsecond": [[451, null]], "polars.Expr.dt.millennium": [[452, null]], "polars.Expr.dt.millisecond": [[453, null]], "polars.Expr.dt.minute": [[454, null]], "polars.Expr.dt.month": [[455, null]], "polars.Expr.dt.month_end": [[456, null]], "polars.Expr.dt.month_start": [[457, null]], "polars.Expr.dt.nanosecond": [[458, null]], "polars.Expr.dt.offset_by": [[459, null]], "polars.Expr.dt.ordinal_day": [[460, null]], "polars.Expr.dt.quarter": [[461, null]], "polars.Expr.dt.replace": [[462, null]], "polars.Expr.dt.replace_time_zone": [[463, null]], "polars.Expr.dt.round": [[464, null]], "polars.Expr.dt.second": [[465, null]], "polars.Expr.dt.strftime": [[466, null]], "polars.Expr.dt.time": [[467, null]], "polars.Expr.dt.timestamp": [[468, null]], "polars.Expr.dt.to_string": [[469, null]], "polars.Expr.dt.total_days": [[470, null]], "polars.Expr.dt.total_hours": [[471, null]], "polars.Expr.dt.total_microseconds": [[472, null]], "polars.Expr.dt.total_milliseconds": [[473, null]], "polars.Expr.dt.total_minutes": [[474, null]], "polars.Expr.dt.total_nanoseconds": [[475, null]], "polars.Expr.dt.total_seconds": [[476, null]], "polars.Expr.dt.truncate": [[477, null]], "polars.Expr.dt.week": [[478, null]], "polars.Expr.dt.weekday": [[479, null]], "polars.Expr.dt.with_time_unit": [[480, null]], "polars.Expr.dt.year": [[481, null]], "polars.Expr.entropy": [[482, null]], "polars.Expr.eq": [[483, null]], "polars.Expr.eq_missing": [[484, null]], "polars.Expr.ewm_mean": [[485, null]], "polars.Expr.ewm_mean_by": [[486, null]], "polars.Expr.ewm_std": [[487, null]], "polars.Expr.ewm_var": [[488, null]], "polars.Expr.exclude": [[489, null]], "polars.Expr.exp": [[490, null]], "polars.Expr.explode": [[491, null]], "polars.Expr.extend_constant": [[492, null]], "polars.Expr.fill_nan": [[493, null]], "polars.Expr.fill_null": [[494, null]], "polars.Expr.filter": [[495, null]], "polars.Expr.first": [[496, null]], "polars.Expr.flatten": [[497, null]], "polars.Expr.floor": [[498, null]], "polars.Expr.floordiv": [[499, null]], "polars.Expr.forward_fill": [[500, null]], "polars.Expr.from_json": [[501, null]], "polars.Expr.gather": [[502, null]], "polars.Expr.gather_every": [[503, null]], "polars.Expr.ge": [[504, null]], "polars.Expr.get": [[505, null]], "polars.Expr.gt": [[506, null]], "polars.Expr.has_nulls": [[507, null]], "polars.Expr.hash": [[508, null]], "polars.Expr.head": [[509, null]], "polars.Expr.hist": [[510, null]], "polars.Expr.implode": [[511, null]], "polars.Expr.index_of": [[512, null]], "polars.Expr.inspect": [[513, null]], "polars.Expr.interpolate": [[514, null]], "polars.Expr.interpolate_by": [[515, null]], "polars.Expr.is_between": [[516, null]], "polars.Expr.is_duplicated": [[517, null]], "polars.Expr.is_finite": [[518, null]], "polars.Expr.is_first_distinct": [[519, null]], "polars.Expr.is_in": [[520, null]], "polars.Expr.is_infinite": [[521, null]], "polars.Expr.is_last_distinct": [[522, null]], "polars.Expr.is_nan": [[523, null]], "polars.Expr.is_not_nan": [[524, null]], "polars.Expr.is_not_null": [[525, null]], "polars.Expr.is_null": [[526, null]], "polars.Expr.is_unique": [[527, null]], "polars.Expr.kurtosis": [[528, null]], "polars.Expr.last": [[529, null]], "polars.Expr.le": [[530, null]], "polars.Expr.len": [[531, null]], "polars.Expr.limit": [[532, null]], "polars.Expr.list.all": [[533, null]], "polars.Expr.list.any": [[534, null]], "polars.Expr.list.arg_max": [[535, null]], "polars.Expr.list.arg_min": [[536, null]], "polars.Expr.list.concat": [[537, null]], "polars.Expr.list.contains": [[538, null]], "polars.Expr.list.count_matches": [[539, null]], "polars.Expr.list.diff": [[540, null]], "polars.Expr.list.drop_nulls": [[541, null]], "polars.Expr.list.eval": [[542, null]], "polars.Expr.list.explode": [[543, null]], "polars.Expr.list.first": [[544, null]], "polars.Expr.list.gather": [[545, null]], "polars.Expr.list.gather_every": [[546, null]], "polars.Expr.list.get": [[547, null]], "polars.Expr.list.head": [[548, null]], "polars.Expr.list.join": [[549, null]], "polars.Expr.list.last": [[550, null]], "polars.Expr.list.len": [[551, null]], "polars.Expr.list.max": [[552, null]], "polars.Expr.list.mean": [[553, null]], "polars.Expr.list.median": [[554, null]], "polars.Expr.list.min": [[555, null]], "polars.Expr.list.n_unique": [[556, null]], "polars.Expr.list.reverse": [[557, null]], "polars.Expr.list.sample": [[558, null]], "polars.Expr.list.set_difference": [[559, null]], "polars.Expr.list.set_intersection": [[560, null]], "polars.Expr.list.set_symmetric_difference": [[561, null]], "polars.Expr.list.set_union": [[562, null]], "polars.Expr.list.shift": [[563, null]], "polars.Expr.list.slice": [[564, null]], "polars.Expr.list.sort": [[565, null]], "polars.Expr.list.std": [[566, null]], "polars.Expr.list.sum": [[567, null]], "polars.Expr.list.tail": [[568, null]], "polars.Expr.list.to_array": [[569, null]], "polars.Expr.list.to_struct": [[570, null]], "polars.Expr.list.unique": [[571, null]], "polars.Expr.list.var": [[572, null]], "polars.Expr.log": [[573, null]], "polars.Expr.log10": [[574, null]], "polars.Expr.log1p": [[575, null]], "polars.Expr.lower_bound": [[576, null]], "polars.Expr.lt": [[577, null]], "polars.Expr.map_batches": [[578, null]], "polars.Expr.map_elements": [[579, null]], "polars.Expr.max": [[580, null]], "polars.Expr.mean": [[581, null]], "polars.Expr.median": [[582, null]], "polars.Expr.meta.eq": [[583, null]], "polars.Expr.meta.has_multiple_outputs": [[584, null]], "polars.Expr.meta.is_column": [[585, null]], "polars.Expr.meta.is_column_selection": [[586, null]], "polars.Expr.meta.is_literal": [[587, null]], "polars.Expr.meta.is_regex_projection": [[588, null]], "polars.Expr.meta.ne": [[589, null]], "polars.Expr.meta.output_name": [[590, null]], "polars.Expr.meta.pop": [[591, null]], "polars.Expr.meta.root_names": [[592, null]], "polars.Expr.meta.serialize": [[593, null]], "polars.Expr.meta.show_graph": [[594, null]], "polars.Expr.meta.tree_format": [[595, null]], "polars.Expr.meta.undo_aliases": [[596, null]], "polars.Expr.meta.write_json": [[597, null]], "polars.Expr.min": [[598, null]], "polars.Expr.mod": [[599, null]], "polars.Expr.mode": [[600, null]], "polars.Expr.mul": [[601, null]], "polars.Expr.n_unique": [[602, null]], "polars.Expr.name.keep": [[603, null]], "polars.Expr.name.map": [[604, null]], "polars.Expr.name.map_fields": [[605, null]], "polars.Expr.name.prefix": [[606, null]], "polars.Expr.name.prefix_fields": [[607, null]], "polars.Expr.name.suffix": [[608, null]], "polars.Expr.name.suffix_fields": [[609, null]], "polars.Expr.name.to_lowercase": [[610, null]], "polars.Expr.name.to_uppercase": [[611, null]], "polars.Expr.nan_max": [[612, null]], "polars.Expr.nan_min": [[613, null]], "polars.Expr.ne": [[614, null]], "polars.Expr.ne_missing": [[615, null]], "polars.Expr.neg": [[616, null]], "polars.Expr.not_": [[617, null]], "polars.Expr.null_count": [[618, null]], "polars.Expr.or_": [[619, null]], "polars.Expr.over": [[620, null]], "polars.Expr.pct_change": [[621, null]], "polars.Expr.peak_max": [[622, null]], "polars.Expr.peak_min": [[623, null]], "polars.Expr.pipe": [[624, null]], "polars.Expr.pow": [[625, null]], "polars.Expr.product": [[626, null]], "polars.Expr.qcut": [[627, null]], "polars.Expr.quantile": [[628, null]], "polars.Expr.radians": [[629, null]], "polars.Expr.rank": [[630, null]], "polars.Expr.rechunk": [[631, null]], "polars.Expr.reinterpret": [[632, null]], "polars.Expr.repeat_by": [[633, null]], "polars.Expr.replace": [[634, null]], "polars.Expr.replace_strict": [[635, null]], "polars.Expr.reshape": [[636, null]], "polars.Expr.reverse": [[637, null]], "polars.Expr.rle": [[638, null]], "polars.Expr.rle_id": [[639, null]], "polars.Expr.rolling": [[640, null]], "polars.Expr.rolling_map": [[641, null]], "polars.Expr.rolling_max": [[642, null]], "polars.Expr.rolling_max_by": [[643, null]], "polars.Expr.rolling_mean": [[644, null]], "polars.Expr.rolling_mean_by": [[645, null]], "polars.Expr.rolling_median": [[646, null]], "polars.Expr.rolling_median_by": [[647, null]], "polars.Expr.rolling_min": [[648, null]], "polars.Expr.rolling_min_by": [[649, null]], "polars.Expr.rolling_quantile": [[650, null]], "polars.Expr.rolling_quantile_by": [[651, null]], "polars.Expr.rolling_skew": [[652, null]], "polars.Expr.rolling_std": [[653, null]], "polars.Expr.rolling_std_by": [[654, null]], "polars.Expr.rolling_sum": [[655, null]], "polars.Expr.rolling_sum_by": [[656, null]], "polars.Expr.rolling_var": [[657, null]], "polars.Expr.rolling_var_by": [[658, null]], "polars.Expr.round": [[659, null]], "polars.Expr.round_sig_figs": [[660, null]], "polars.Expr.sample": [[661, null]], "polars.Expr.search_sorted": [[662, null]], "polars.Expr.set_sorted": [[663, null]], "polars.Expr.shift": [[664, null]], "polars.Expr.shrink_dtype": [[665, null]], "polars.Expr.shuffle": [[666, null]], "polars.Expr.sign": [[667, null]], "polars.Expr.sin": [[668, null]], "polars.Expr.sinh": [[669, null]], "polars.Expr.skew": [[670, null]], "polars.Expr.slice": [[671, null]], "polars.Expr.sort": [[672, null]], "polars.Expr.sort_by": [[673, null]], "polars.Expr.sqrt": [[674, null]], "polars.Expr.std": [[675, null]], "polars.Expr.str.concat": [[676, null]], "polars.Expr.str.contains": [[677, null]], "polars.Expr.str.contains_any": [[678, null]], "polars.Expr.str.count_matches": [[679, null]], "polars.Expr.str.decode": [[680, null]], "polars.Expr.str.encode": [[681, null]], "polars.Expr.str.ends_with": [[682, null]], "polars.Expr.str.escape_regex": [[683, null]], "polars.Expr.str.explode": [[684, null]], "polars.Expr.str.extract": [[685, null]], "polars.Expr.str.extract_all": [[686, null]], "polars.Expr.str.extract_groups": [[687, null]], "polars.Expr.str.extract_many": [[688, null]], "polars.Expr.str.find": [[689, null]], "polars.Expr.str.find_many": [[690, null]], "polars.Expr.str.head": [[691, null]], "polars.Expr.str.join": [[692, null]], "polars.Expr.str.json_decode": [[693, null]], "polars.Expr.str.json_path_match": [[694, null]], "polars.Expr.str.len_bytes": [[695, null]], "polars.Expr.str.len_chars": [[696, null]], "polars.Expr.str.normalize": [[697, null]], "polars.Expr.str.pad_end": [[698, null]], "polars.Expr.str.pad_start": [[699, null]], "polars.Expr.str.replace": [[700, null]], "polars.Expr.str.replace_all": [[701, null]], "polars.Expr.str.replace_many": [[702, null]], "polars.Expr.str.reverse": [[703, null]], "polars.Expr.str.slice": [[704, null]], "polars.Expr.str.split": [[705, null]], "polars.Expr.str.split_exact": [[706, null]], "polars.Expr.str.splitn": [[707, null]], "polars.Expr.str.starts_with": [[708, null]], "polars.Expr.str.strip_chars": [[709, null]], "polars.Expr.str.strip_chars_end": [[710, null]], "polars.Expr.str.strip_chars_start": [[711, null]], "polars.Expr.str.strip_prefix": [[712, null]], "polars.Expr.str.strip_suffix": [[713, null]], "polars.Expr.str.strptime": [[714, null]], "polars.Expr.str.tail": [[715, null]], "polars.Expr.str.to_date": [[716, null]], "polars.Expr.str.to_datetime": [[717, null]], "polars.Expr.str.to_decimal": [[718, null]], "polars.Expr.str.to_integer": [[719, null]], "polars.Expr.str.to_lowercase": [[720, null]], "polars.Expr.str.to_time": [[721, null]], "polars.Expr.str.to_titlecase": [[722, null]], "polars.Expr.str.to_uppercase": [[723, null]], "polars.Expr.str.zfill": [[724, null]], "polars.Expr.struct.field": [[725, null]], "polars.Expr.struct.json_encode": [[726, null]], "polars.Expr.struct.rename_fields": [[727, null]], "polars.Expr.struct.unnest": [[728, null]], "polars.Expr.struct.with_fields": [[729, null]], "polars.Expr.sub": [[730, null]], "polars.Expr.sum": [[731, null]], "polars.Expr.tail": [[732, null]], "polars.Expr.tan": [[733, null]], "polars.Expr.tanh": [[734, null]], "polars.Expr.to_physical": [[735, null]], "polars.Expr.top_k": [[736, null]], "polars.Expr.top_k_by": [[737, null]], "polars.Expr.truediv": [[738, null]], "polars.Expr.unique": [[739, null]], "polars.Expr.unique_counts": [[740, null]], "polars.Expr.upper_bound": [[741, null]], "polars.Expr.value_counts": [[742, null]], "polars.Expr.var": [[743, null]], "polars.Expr.where": [[744, null]], "polars.Expr.xor": [[745, null]], "polars.LazyFrame.approx_n_unique": [[846, null]], "polars.LazyFrame.bottom_k": [[847, null]], "polars.LazyFrame.cache": [[848, null]], "polars.LazyFrame.cast": [[849, null]], "polars.LazyFrame.clear": [[850, null]], "polars.LazyFrame.clone": [[851, null]], "polars.LazyFrame.collect": [[852, null]], "polars.LazyFrame.collect_async": [[853, null]], "polars.LazyFrame.collect_schema": [[854, null]], "polars.LazyFrame.columns": [[855, null]], "polars.LazyFrame.count": [[856, null]], "polars.LazyFrame.describe": [[857, null]], "polars.LazyFrame.deserialize": [[858, null]], "polars.LazyFrame.drop": [[859, null]], "polars.LazyFrame.drop_nans": [[860, null]], "polars.LazyFrame.drop_nulls": [[861, null]], "polars.LazyFrame.dtypes": [[862, null]], "polars.LazyFrame.explain": [[863, null]], "polars.LazyFrame.explode": [[864, null]], "polars.LazyFrame.fill_nan": [[865, null]], "polars.LazyFrame.fill_null": [[866, null]], "polars.LazyFrame.filter": [[867, null]], "polars.LazyFrame.first": [[868, null]], "polars.LazyFrame.gather_every": [[869, null]], "polars.LazyFrame.group_by": [[870, null]], "polars.LazyFrame.group_by_dynamic": [[871, null]], "polars.LazyFrame.head": [[872, null]], "polars.LazyFrame.inspect": [[873, null]], "polars.LazyFrame.interpolate": [[874, null]], "polars.LazyFrame.join": [[875, null]], "polars.LazyFrame.join_asof": [[876, null]], "polars.LazyFrame.join_where": [[877, null]], "polars.LazyFrame.last": [[878, null]], "polars.LazyFrame.lazy": [[879, null]], "polars.LazyFrame.limit": [[880, null]], "polars.LazyFrame.map_batches": [[881, null]], "polars.LazyFrame.max": [[882, null]], "polars.LazyFrame.mean": [[883, null]], "polars.LazyFrame.median": [[884, null]], "polars.LazyFrame.melt": [[885, null]], "polars.LazyFrame.merge_sorted": [[886, null]], "polars.LazyFrame.min": [[887, null]], "polars.LazyFrame.null_count": [[888, null]], "polars.LazyFrame.pipe": [[889, null]], "polars.LazyFrame.profile": [[890, null]], "polars.LazyFrame.quantile": [[891, null]], "polars.LazyFrame.remote": [[892, null]], "polars.LazyFrame.remove": [[893, null]], "polars.LazyFrame.rename": [[894, null]], "polars.LazyFrame.reverse": [[895, null]], "polars.LazyFrame.rolling": [[896, null]], "polars.LazyFrame.schema": [[897, null]], "polars.LazyFrame.select": [[898, null]], "polars.LazyFrame.select_seq": [[899, null]], "polars.LazyFrame.serialize": [[900, null]], "polars.LazyFrame.set_sorted": [[901, null]], "polars.LazyFrame.shift": [[902, null]], "polars.LazyFrame.show_graph": [[903, null]], "polars.LazyFrame.sink_csv": [[47, null]], "polars.LazyFrame.sink_ipc": [[48, null]], "polars.LazyFrame.sink_ndjson": [[49, null]], "polars.LazyFrame.sink_parquet": [[50, null]], "polars.LazyFrame.slice": [[904, null]], "polars.LazyFrame.sort": [[905, null]], "polars.LazyFrame.sql": [[906, null]], "polars.LazyFrame.std": [[907, null]], "polars.LazyFrame.sum": [[908, null]], "polars.LazyFrame.tail": [[909, null]], "polars.LazyFrame.top_k": [[910, null]], "polars.LazyFrame.unique": [[911, null]], "polars.LazyFrame.unnest": [[912, null]], "polars.LazyFrame.unpivot": [[913, null]], "polars.LazyFrame.update": [[914, null]], "polars.LazyFrame.var": [[915, null]], "polars.LazyFrame.width": [[916, null]], "polars.LazyFrame.with_columns": [[917, null]], "polars.LazyFrame.with_columns_seq": [[918, null]], "polars.LazyFrame.with_context": [[919, null]], "polars.LazyFrame.with_row_count": [[920, null]], "polars.LazyFrame.with_row_index": [[921, null]], "polars.SQLContext.execute": [[1351, null]], "polars.SQLContext.execute_global": [[1352, null]], "polars.SQLContext.register": [[1353, null]], "polars.SQLContext.register_globals": [[1354, null]], "polars.SQLContext.register_many": [[1355, null]], "polars.SQLContext.tables": [[1356, null]], "polars.SQLContext.unregister": [[1357, null]], "polars.Series.__array__": [[955, null]], "polars.Series.__arrow_c_stream__": [[956, null]], "polars.Series.__getitem__": [[957, null]], "polars.Series.abs": [[958, null]], "polars.Series.alias": [[959, null]], "polars.Series.all": [[960, null]], "polars.Series.any": [[961, null]], "polars.Series.append": [[962, null]], "polars.Series.approx_n_unique": [[963, null]], "polars.Series.arccos": [[964, null]], "polars.Series.arccosh": [[965, null]], "polars.Series.arcsin": [[966, null]], "polars.Series.arcsinh": [[967, null]], "polars.Series.arctan": [[968, null]], "polars.Series.arctanh": [[969, null]], "polars.Series.arg_max": [[970, null]], "polars.Series.arg_min": [[971, null]], "polars.Series.arg_sort": [[972, null]], "polars.Series.arg_true": [[973, null]], "polars.Series.arg_unique": [[974, null]], "polars.Series.arr.all": [[975, null]], "polars.Series.arr.any": [[976, null]], "polars.Series.arr.arg_max": [[977, null]], "polars.Series.arr.arg_min": [[978, null]], "polars.Series.arr.contains": [[979, null]], "polars.Series.arr.count_matches": [[980, null]], "polars.Series.arr.explode": [[981, null]], "polars.Series.arr.first": [[982, null]], "polars.Series.arr.get": [[983, null]], "polars.Series.arr.join": [[984, null]], "polars.Series.arr.last": [[985, null]], "polars.Series.arr.max": [[986, null]], "polars.Series.arr.median": [[987, null]], "polars.Series.arr.min": [[988, null]], "polars.Series.arr.n_unique": [[989, null]], "polars.Series.arr.reverse": [[990, null]], "polars.Series.arr.shift": [[991, null]], "polars.Series.arr.sort": [[992, null]], "polars.Series.arr.std": [[993, null]], "polars.Series.arr.sum": [[994, null]], "polars.Series.arr.to_list": [[995, null]], "polars.Series.arr.to_struct": [[996, null]], "polars.Series.arr.unique": [[997, null]], "polars.Series.arr.var": [[998, null]], "polars.Series.bin.contains": [[999, null]], "polars.Series.bin.decode": [[1000, null]], "polars.Series.bin.encode": [[1001, null]], "polars.Series.bin.ends_with": [[1002, null]], "polars.Series.bin.reinterpret": [[1003, null]], "polars.Series.bin.size": [[1004, null]], "polars.Series.bin.starts_with": [[1005, null]], "polars.Series.bitwise_and": [[1006, null]], "polars.Series.bitwise_count_ones": [[1007, null]], "polars.Series.bitwise_count_zeros": [[1008, null]], "polars.Series.bitwise_leading_ones": [[1009, null]], "polars.Series.bitwise_leading_zeros": [[1010, null]], "polars.Series.bitwise_or": [[1011, null]], "polars.Series.bitwise_trailing_ones": [[1012, null]], "polars.Series.bitwise_trailing_zeros": [[1013, null]], "polars.Series.bitwise_xor": [[1014, null]], "polars.Series.bottom_k": [[1015, null]], "polars.Series.cast": [[1016, null]], "polars.Series.cat.ends_with": [[1017, null]], "polars.Series.cat.get_categories": [[1018, null]], "polars.Series.cat.is_local": [[1019, null]], "polars.Series.cat.len_bytes": [[1020, null]], "polars.Series.cat.len_chars": [[1021, null]], "polars.Series.cat.starts_with": [[1022, null]], "polars.Series.cat.to_local": [[1023, null]], "polars.Series.cat.uses_lexical_ordering": [[1024, null]], "polars.Series.cbrt": [[1025, null]], "polars.Series.ceil": [[1026, null]], "polars.Series.chunk_lengths": [[1027, null]], "polars.Series.clear": [[1028, null]], "polars.Series.clip": [[1029, null]], "polars.Series.clone": [[1030, null]], "polars.Series.cos": [[1031, null]], "polars.Series.cosh": [[1032, null]], "polars.Series.cot": [[1033, null]], "polars.Series.count": [[1034, null]], "polars.Series.cum_count": [[1035, null]], "polars.Series.cum_max": [[1036, null]], "polars.Series.cum_min": [[1037, null]], "polars.Series.cum_prod": [[1038, null]], "polars.Series.cum_sum": [[1039, null]], "polars.Series.cumulative_eval": [[1040, null]], "polars.Series.cut": [[1041, null]], "polars.Series.describe": [[1042, null]], "polars.Series.diff": [[1043, null]], "polars.Series.dot": [[1044, null]], "polars.Series.drop_nans": [[1045, null]], "polars.Series.drop_nulls": [[1046, null]], "polars.Series.dt.add_business_days": [[1047, null]], "polars.Series.dt.base_utc_offset": [[1048, null]], "polars.Series.dt.cast_time_unit": [[1049, null]], "polars.Series.dt.century": [[1050, null]], "polars.Series.dt.combine": [[1051, null]], "polars.Series.dt.convert_time_zone": [[1052, null]], "polars.Series.dt.date": [[1053, null]], "polars.Series.dt.datetime": [[1054, null]], "polars.Series.dt.day": [[1055, null]], "polars.Series.dt.dst_offset": [[1056, null]], "polars.Series.dt.epoch": [[1057, null]], "polars.Series.dt.hour": [[1058, null]], "polars.Series.dt.is_leap_year": [[1059, null]], "polars.Series.dt.iso_year": [[1060, null]], "polars.Series.dt.max": [[1061, null]], "polars.Series.dt.mean": [[1062, null]], "polars.Series.dt.median": [[1063, null]], "polars.Series.dt.microsecond": [[1064, null]], "polars.Series.dt.millennium": [[1065, null]], "polars.Series.dt.millisecond": [[1066, null]], "polars.Series.dt.min": [[1067, null]], "polars.Series.dt.minute": [[1068, null]], "polars.Series.dt.month": [[1069, null]], "polars.Series.dt.month_end": [[1070, null]], "polars.Series.dt.month_start": [[1071, null]], "polars.Series.dt.nanosecond": [[1072, null]], "polars.Series.dt.offset_by": [[1073, null]], "polars.Series.dt.ordinal_day": [[1074, null]], "polars.Series.dt.quarter": [[1075, null]], "polars.Series.dt.replace": [[1076, null]], "polars.Series.dt.replace_time_zone": [[1077, null]], "polars.Series.dt.round": [[1078, null]], "polars.Series.dt.second": [[1079, null]], "polars.Series.dt.strftime": [[1080, null]], "polars.Series.dt.time": [[1081, null]], "polars.Series.dt.timestamp": [[1082, null]], "polars.Series.dt.to_string": [[1083, null]], "polars.Series.dt.total_days": [[1084, null]], "polars.Series.dt.total_hours": [[1085, null]], "polars.Series.dt.total_microseconds": [[1086, null]], "polars.Series.dt.total_milliseconds": [[1087, null]], "polars.Series.dt.total_minutes": [[1088, null]], "polars.Series.dt.total_nanoseconds": [[1089, null]], "polars.Series.dt.total_seconds": [[1090, null]], "polars.Series.dt.truncate": [[1091, null]], "polars.Series.dt.week": [[1092, null]], "polars.Series.dt.weekday": [[1093, null]], "polars.Series.dt.with_time_unit": [[1094, null]], "polars.Series.dt.year": [[1095, null]], "polars.Series.dtype": [[1096, null]], "polars.Series.entropy": [[1097, null]], "polars.Series.eq": [[1098, null]], "polars.Series.eq_missing": [[1099, null]], "polars.Series.equals": [[1100, null]], "polars.Series.estimated_size": [[1101, null]], "polars.Series.ewm_mean": [[1102, null]], "polars.Series.ewm_mean_by": [[1103, null]], "polars.Series.ewm_std": [[1104, null]], "polars.Series.ewm_var": [[1105, null]], "polars.Series.exp": [[1106, null]], "polars.Series.explode": [[1107, null]], "polars.Series.extend": [[1108, null]], "polars.Series.extend_constant": [[1109, null]], "polars.Series.fill_nan": [[1110, null]], "polars.Series.fill_null": [[1111, null]], "polars.Series.filter": [[1112, null]], "polars.Series.first": [[1113, null]], "polars.Series.flags": [[1114, null]], "polars.Series.floor": [[1115, null]], "polars.Series.gather": [[1116, null]], "polars.Series.gather_every": [[1117, null]], "polars.Series.ge": [[1118, null]], "polars.Series.get_chunks": [[1119, null]], "polars.Series.gt": [[1120, null]], "polars.Series.has_nulls": [[1121, null]], "polars.Series.has_validity": [[1122, null]], "polars.Series.hash": [[1123, null]], "polars.Series.head": [[1124, null]], "polars.Series.hist": [[1125, null]], "polars.Series.implode": [[1126, null]], "polars.Series.index_of": [[1127, null]], "polars.Series.interpolate": [[1128, null]], "polars.Series.interpolate_by": [[1129, null]], "polars.Series.is_between": [[1130, null]], "polars.Series.is_duplicated": [[1131, null]], "polars.Series.is_empty": [[1132, null]], "polars.Series.is_finite": [[1133, null]], "polars.Series.is_first_distinct": [[1134, null]], "polars.Series.is_in": [[1135, null]], "polars.Series.is_infinite": [[1136, null]], "polars.Series.is_last_distinct": [[1137, null]], "polars.Series.is_nan": [[1138, null]], "polars.Series.is_not_nan": [[1139, null]], "polars.Series.is_not_null": [[1140, null]], "polars.Series.is_null": [[1141, null]], "polars.Series.is_sorted": [[1142, null]], "polars.Series.is_unique": [[1143, null]], "polars.Series.item": [[1144, null]], "polars.Series.kurtosis": [[1145, null]], "polars.Series.last": [[1146, null]], "polars.Series.le": [[1147, null]], "polars.Series.len": [[1148, null]], "polars.Series.limit": [[1149, null]], "polars.Series.list.all": [[1150, null]], "polars.Series.list.any": [[1151, null]], "polars.Series.list.arg_max": [[1152, null]], "polars.Series.list.arg_min": [[1153, null]], "polars.Series.list.concat": [[1154, null]], "polars.Series.list.contains": [[1155, null]], "polars.Series.list.count_matches": [[1156, null]], "polars.Series.list.diff": [[1157, null]], "polars.Series.list.drop_nulls": [[1158, null]], "polars.Series.list.eval": [[1159, null]], "polars.Series.list.explode": [[1160, null]], "polars.Series.list.first": [[1161, null]], "polars.Series.list.gather": [[1162, null]], "polars.Series.list.gather_every": [[1163, null]], "polars.Series.list.get": [[1164, null]], "polars.Series.list.head": [[1165, null]], "polars.Series.list.join": [[1166, null]], "polars.Series.list.last": [[1167, null]], "polars.Series.list.len": [[1168, null]], "polars.Series.list.max": [[1169, null]], "polars.Series.list.mean": [[1170, null]], "polars.Series.list.median": [[1171, null]], "polars.Series.list.min": [[1172, null]], "polars.Series.list.n_unique": [[1173, null]], "polars.Series.list.reverse": [[1174, null]], "polars.Series.list.sample": [[1175, null]], "polars.Series.list.set_difference": [[1176, null]], "polars.Series.list.set_intersection": [[1177, null]], "polars.Series.list.set_symmetric_difference": [[1178, null]], "polars.Series.list.set_union": [[1179, null]], "polars.Series.list.shift": [[1180, null]], "polars.Series.list.slice": [[1181, null]], "polars.Series.list.sort": [[1182, null]], "polars.Series.list.std": [[1183, null]], "polars.Series.list.sum": [[1184, null]], "polars.Series.list.tail": [[1185, null]], "polars.Series.list.to_array": [[1186, null]], "polars.Series.list.to_struct": [[1187, null]], "polars.Series.list.unique": [[1188, null]], "polars.Series.list.var": [[1189, null]], "polars.Series.log": [[1190, null]], "polars.Series.log10": [[1191, null]], "polars.Series.log1p": [[1192, null]], "polars.Series.lower_bound": [[1193, null]], "polars.Series.lt": [[1194, null]], "polars.Series.map_elements": [[1195, null]], "polars.Series.max": [[1196, null]], "polars.Series.mean": [[1197, null]], "polars.Series.median": [[1198, null]], "polars.Series.min": [[1199, null]], "polars.Series.mode": [[1200, null]], "polars.Series.n_chunks": [[1201, null]], "polars.Series.n_unique": [[1202, null]], "polars.Series.name": [[1203, null]], "polars.Series.nan_max": [[1204, null]], "polars.Series.nan_min": [[1205, null]], "polars.Series.ne": [[1206, null]], "polars.Series.ne_missing": [[1207, null]], "polars.Series.new_from_index": [[1208, null]], "polars.Series.not_": [[1209, null]], "polars.Series.null_count": [[1210, null]], "polars.Series.pct_change": [[1211, null]], "polars.Series.peak_max": [[1212, null]], "polars.Series.peak_min": [[1213, null]], "polars.Series.pow": [[1214, null]], "polars.Series.product": [[1215, null]], "polars.Series.qcut": [[1216, null]], "polars.Series.quantile": [[1217, null]], "polars.Series.rank": [[1218, null]], "polars.Series.rechunk": [[1219, null]], "polars.Series.reinterpret": [[1220, null]], "polars.Series.rename": [[1221, null]], "polars.Series.replace": [[1222, null]], "polars.Series.replace_strict": [[1223, null]], "polars.Series.reshape": [[1224, null]], "polars.Series.reverse": [[1225, null]], "polars.Series.rle": [[1226, null]], "polars.Series.rle_id": [[1227, null]], "polars.Series.rolling_map": [[1228, null]], "polars.Series.rolling_max": [[1229, null]], "polars.Series.rolling_mean": [[1230, null]], "polars.Series.rolling_median": [[1231, null]], "polars.Series.rolling_min": [[1232, null]], "polars.Series.rolling_quantile": [[1233, null]], "polars.Series.rolling_skew": [[1234, null]], "polars.Series.rolling_std": [[1235, null]], "polars.Series.rolling_sum": [[1236, null]], "polars.Series.rolling_var": [[1237, null]], "polars.Series.round": [[1238, null]], "polars.Series.round_sig_figs": [[1239, null]], "polars.Series.sample": [[1240, null]], "polars.Series.scatter": [[1241, null]], "polars.Series.search_sorted": [[1242, null]], "polars.Series.set": [[1243, null]], "polars.Series.set_sorted": [[1244, null]], "polars.Series.shape": [[1245, null]], "polars.Series.shift": [[1246, null]], "polars.Series.shrink_dtype": [[1247, null]], "polars.Series.shrink_to_fit": [[1248, null]], "polars.Series.shuffle": [[1249, null]], "polars.Series.sign": [[1250, null]], "polars.Series.sin": [[1251, null]], "polars.Series.sinh": [[1252, null]], "polars.Series.skew": [[1253, null]], "polars.Series.slice": [[1254, null]], "polars.Series.sort": [[1255, null]], "polars.Series.sqrt": [[1256, null]], "polars.Series.std": [[1257, null]], "polars.Series.str.concat": [[1258, null]], "polars.Series.str.contains": [[1259, null]], "polars.Series.str.contains_any": [[1260, null]], "polars.Series.str.count_matches": [[1261, null]], "polars.Series.str.decode": [[1262, null]], "polars.Series.str.encode": [[1263, null]], "polars.Series.str.ends_with": [[1264, null]], "polars.Series.str.escape_regex": [[1265, null]], "polars.Series.str.explode": [[1266, null]], "polars.Series.str.extract": [[1267, null]], "polars.Series.str.extract_all": [[1268, null]], "polars.Series.str.extract_groups": [[1269, null]], "polars.Series.str.extract_many": [[1270, null]], "polars.Series.str.find": [[1271, null]], "polars.Series.str.find_many": [[1272, null]], "polars.Series.str.head": [[1273, null]], "polars.Series.str.join": [[1274, null]], "polars.Series.str.json_decode": [[1275, null]], "polars.Series.str.json_path_match": [[1276, null]], "polars.Series.str.len_bytes": [[1277, null]], "polars.Series.str.len_chars": [[1278, null]], "polars.Series.str.normalize": [[1279, null]], "polars.Series.str.pad_end": [[1280, null]], "polars.Series.str.pad_start": [[1281, null]], "polars.Series.str.replace": [[1282, null]], "polars.Series.str.replace_all": [[1283, null]], "polars.Series.str.replace_many": [[1284, null]], "polars.Series.str.reverse": [[1285, null]], "polars.Series.str.slice": [[1286, null]], "polars.Series.str.split": [[1287, null]], "polars.Series.str.split_exact": [[1288, null]], "polars.Series.str.splitn": [[1289, null]], "polars.Series.str.starts_with": [[1290, null]], "polars.Series.str.strip_chars": [[1291, null]], "polars.Series.str.strip_chars_end": [[1292, null]], "polars.Series.str.strip_chars_start": [[1293, null]], "polars.Series.str.strip_prefix": [[1294, null]], "polars.Series.str.strip_suffix": [[1295, null]], "polars.Series.str.strptime": [[1296, null]], "polars.Series.str.tail": [[1297, null]], "polars.Series.str.to_date": [[1298, null]], "polars.Series.str.to_datetime": [[1299, null]], "polars.Series.str.to_decimal": [[1300, null]], "polars.Series.str.to_integer": [[1301, null]], "polars.Series.str.to_lowercase": [[1302, null]], "polars.Series.str.to_time": [[1303, null]], "polars.Series.str.to_titlecase": [[1304, null]], "polars.Series.str.to_uppercase": [[1305, null]], "polars.Series.str.zfill": [[1306, null]], "polars.Series.struct.field": [[1307, null]], "polars.Series.struct.fields": [[1308, null]], "polars.Series.struct.json_encode": [[1309, null]], "polars.Series.struct.rename_fields": [[1310, null]], "polars.Series.struct.schema": [[1311, null]], "polars.Series.struct.unnest": [[1312, null]], "polars.Series.sum": [[1313, null]], "polars.Series.tail": [[1314, null]], "polars.Series.tan": [[1315, null]], "polars.Series.tanh": [[1316, null]], "polars.Series.to_arrow": [[1317, null]], "polars.Series.to_dummies": [[1318, null]], "polars.Series.to_frame": [[1319, null]], "polars.Series.to_init_repr": [[1320, null]], "polars.Series.to_jax": [[1321, null]], "polars.Series.to_list": [[1322, null]], "polars.Series.to_numpy": [[1323, null]], "polars.Series.to_pandas": [[1324, null]], "polars.Series.to_physical": [[1325, null]], "polars.Series.to_torch": [[1326, null]], "polars.Series.top_k": [[1327, null]], "polars.Series.unique": [[1328, null]], "polars.Series.unique_counts": [[1329, null]], "polars.Series.upper_bound": [[1330, null]], "polars.Series.value_counts": [[1331, null]], "polars.Series.var": [[1332, null]], "polars.Series.zip_with": [[1333, null]], "polars.StringCache": [[51, null]], "polars.align_frames": [[52, null]], "polars.all": [[746, null]], "polars.all_horizontal": [[747, null]], "polars.any": [[748, null]], "polars.any_horizontal": [[749, null]], "polars.api.register_dataframe_namespace": [[53, null]], "polars.api.register_expr_namespace": [[54, null]], "polars.api.register_lazyframe_namespace": [[55, null]], "polars.api.register_series_namespace": [[56, null]], "polars.approx_n_unique": [[750, null]], "polars.arange": [[751, null]], "polars.arctan2": [[752, null]], "polars.arctan2d": [[753, null]], "polars.arg_sort_by": [[754, null]], "polars.arg_where": [[755, null]], "polars.build_info": [[57, null]], "polars.business_day_count": [[756, null]], "polars.catalog.unity.CatalogInfo": [[184, null]], "polars.catalog.unity.ColumnInfo": [[185, null]], "polars.catalog.unity.DataSourceFormat": [[186, null]], "polars.catalog.unity.NamespaceInfo": [[187, null]], "polars.catalog.unity.TableInfo": [[188, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[189, null]], "polars.catalog.unity.TableType": [[190, null]], "polars.coalesce": [[757, null]], "polars.col": [[827, null]], "polars.collect_all": [[58, null]], "polars.collect_all_async": [[59, null]], "polars.concat": [[60, null]], "polars.concat_arr": [[758, null]], "polars.concat_list": [[759, null]], "polars.concat_str": [[760, null]], "polars.corr": [[761, null]], "polars.count": [[762, null]], "polars.cov": [[763, null]], "polars.cum_count": [[764, null]], "polars.cum_fold": [[765, null]], "polars.cum_reduce": [[766, null]], "polars.cum_sum": [[767, null]], "polars.cum_sum_horizontal": [[768, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[318, null]], "polars.dataframe.group_by.GroupBy.agg": [[319, null]], "polars.dataframe.group_by.GroupBy.all": [[320, null]], "polars.dataframe.group_by.GroupBy.count": [[321, null]], "polars.dataframe.group_by.GroupBy.first": [[322, null]], "polars.dataframe.group_by.GroupBy.head": [[323, null]], "polars.dataframe.group_by.GroupBy.last": [[324, null]], "polars.dataframe.group_by.GroupBy.len": [[325, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[326, null]], "polars.dataframe.group_by.GroupBy.max": [[327, null]], "polars.dataframe.group_by.GroupBy.mean": [[328, null]], "polars.dataframe.group_by.GroupBy.median": [[329, null]], "polars.dataframe.group_by.GroupBy.min": [[330, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[331, null]], "polars.dataframe.group_by.GroupBy.quantile": [[332, null]], "polars.dataframe.group_by.GroupBy.sum": [[333, null]], "polars.dataframe.group_by.GroupBy.tail": [[334, null]], "polars.datatypes.Array": [[61, null]], "polars.datatypes.Binary": [[62, null]], "polars.datatypes.Boolean": [[63, null]], "polars.datatypes.Categorical": [[64, null]], "polars.datatypes.DataType": [[65, null]], "polars.datatypes.Date": [[66, null]], "polars.datatypes.Datetime": [[67, null]], "polars.datatypes.Decimal": [[68, null]], "polars.datatypes.Duration": [[69, null]], "polars.datatypes.Enum": [[70, null]], "polars.datatypes.Field": [[71, null]], "polars.datatypes.Float32": [[72, null]], "polars.datatypes.Float64": [[73, null]], "polars.datatypes.Int128": [[74, null]], "polars.datatypes.Int16": [[75, null]], "polars.datatypes.Int32": [[76, null]], "polars.datatypes.Int64": [[77, null]], "polars.datatypes.Int8": [[78, null]], "polars.datatypes.List": [[79, null]], "polars.datatypes.Null": [[80, null]], "polars.datatypes.Object": [[81, null]], "polars.datatypes.String": [[82, null]], "polars.datatypes.Struct": [[83, null]], "polars.datatypes.Time": [[84, null]], "polars.datatypes.UInt16": [[85, null]], "polars.datatypes.UInt32": [[86, null]], "polars.datatypes.UInt64": [[87, null]], "polars.datatypes.UInt8": [[88, null]], "polars.datatypes.Unknown": [[89, null]], "polars.datatypes.Utf8": [[90, null]], "polars.date": [[769, null]], "polars.date_range": [[770, null]], "polars.date_ranges": [[771, null]], "polars.datetime": [[772, null]], "polars.datetime_range": [[773, null]], "polars.datetime_ranges": [[774, null]], "polars.disable_string_cache": [[91, null]], "polars.duration": [[775, null]], "polars.element": [[776, null]], "polars.enable_string_cache": [[92, null]], "polars.escape_regex": [[93, null]], "polars.exceptions.CategoricalRemappingWarning": [[94, null]], "polars.exceptions.ChronoFormatWarning": [[95, null]], "polars.exceptions.ColumnNotFoundError": [[96, null]], "polars.exceptions.ComputeError": [[97, null]], "polars.exceptions.CustomUFuncWarning": [[98, null]], "polars.exceptions.DataOrientationWarning": [[99, null]], "polars.exceptions.DuplicateError": [[100, null]], "polars.exceptions.InvalidOperationError": [[101, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[102, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[103, null]], "polars.exceptions.NoDataError": [[104, null]], "polars.exceptions.NoRowsReturnedError": [[105, null]], "polars.exceptions.OutOfBoundsError": [[106, null]], "polars.exceptions.PanicException": [[107, null]], "polars.exceptions.ParameterCollisionError": [[108, null]], "polars.exceptions.PerformanceWarning": [[109, null]], "polars.exceptions.PolarsError": [[110, null]], "polars.exceptions.PolarsInefficientMapWarning": [[111, null]], "polars.exceptions.PolarsWarning": [[112, null]], "polars.exceptions.RowsError": [[113, null]], "polars.exceptions.SQLInterfaceError": [[114, null]], "polars.exceptions.SQLSyntaxError": [[115, null]], "polars.exceptions.SchemaError": [[116, null]], "polars.exceptions.SchemaFieldNotFoundError": [[117, null]], "polars.exceptions.ShapeError": [[118, null]], "polars.exceptions.StringCacheMismatchError": [[119, null]], "polars.exceptions.StructFieldNotFoundError": [[120, null]], "polars.exceptions.TooManyRowsReturnedError": [[121, null]], "polars.exceptions.UnstableWarning": [[122, null]], "polars.exceptions.UnsuitableSQLError": [[123, null]], "polars.exclude": [[777, null]], "polars.first": [[778, null]], "polars.fold": [[779, null]], "polars.format": [[780, null]], "polars.from_arrow": [[124, null]], "polars.from_dataframe": [[125, null]], "polars.from_dict": [[126, null]], "polars.from_dicts": [[127, null]], "polars.from_epoch": [[781, null]], "polars.from_numpy": [[128, null]], "polars.from_pandas": [[129, null]], "polars.from_records": [[130, null]], "polars.from_repr": [[131, null]], "polars.get_index_type": [[132, null]], "polars.groups": [[782, null]], "polars.head": [[783, null]], "polars.implode": [[784, null]], "polars.int_range": [[785, null]], "polars.int_ranges": [[786, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[133, null]], "polars.io.plugins.register_io_source": [[134, null]], "polars.json_normalize": [[135, null]], "polars.last": [[787, null]], "polars.lazyframe.engine_config.GPUEngine": [[922, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[923, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[924, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[925, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[926, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[927, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[928, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[929, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[930, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[931, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[932, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[933, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[934, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[935, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[936, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[937, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[938, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[939, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[940, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[941, null]], "polars.len": [[788, null]], "polars.linear_space": [[789, null]], "polars.linear_spaces": [[790, null]], "polars.lit": [[791, null]], "polars.map_batches": [[792, null]], "polars.map_groups": [[793, null]], "polars.max": [[794, null]], "polars.max_horizontal": [[795, null]], "polars.mean": [[796, null]], "polars.mean_horizontal": [[797, null]], "polars.median": [[798, null]], "polars.min": [[799, null]], "polars.min_horizontal": [[800, null]], "polars.n_unique": [[801, null]], "polars.nth": [[802, null]], "polars.ones": [[803, null]], "polars.plugins.register_plugin_function": [[136, null]], "polars.quantile": [[804, null]], "polars.read_avro": [[137, null]], "polars.read_clipboard": [[138, null]], "polars.read_csv": [[139, null]], "polars.read_csv_batched": [[140, null]], "polars.read_database": [[141, null]], "polars.read_database_uri": [[142, null]], "polars.read_delta": [[143, null]], "polars.read_excel": [[144, null]], "polars.read_ipc": [[145, null]], "polars.read_ipc_schema": [[146, null]], "polars.read_ipc_stream": [[147, null]], "polars.read_json": [[148, null]], "polars.read_ndjson": [[149, null]], "polars.read_ods": [[150, null]], "polars.read_parquet": [[151, null]], "polars.read_parquet_schema": [[152, null]], "polars.reduce": [[805, null]], "polars.repeat": [[806, null]], "polars.rolling_corr": [[807, null]], "polars.rolling_cov": [[808, null]], "polars.scan_csv": [[153, null]], "polars.scan_delta": [[154, null]], "polars.scan_iceberg": [[155, null]], "polars.scan_ipc": [[156, null]], "polars.scan_ndjson": [[157, null]], "polars.scan_parquet": [[158, null]], "polars.scan_pyarrow_dataset": [[159, null]], "polars.select": [[809, null]], "polars.set_random_seed": [[160, null]], "polars.show_versions": [[161, null]], "polars.sql": [[810, null]], "polars.sql_expr": [[811, null]], "polars.std": [[812, null]], "polars.struct": [[813, null]], "polars.sum": [[814, null]], "polars.sum_horizontal": [[815, null]], "polars.tail": [[816, null]], "polars.testing.assert_frame_equal": [[162, null]], "polars.testing.assert_frame_not_equal": [[163, null]], "polars.testing.assert_series_equal": [[164, null]], "polars.testing.assert_series_not_equal": [[165, null]], "polars.testing.parametric.column": [[166, null]], "polars.testing.parametric.columns": [[167, null]], "polars.testing.parametric.create_list_strategy": [[168, null]], "polars.testing.parametric.dataframes": [[169, null]], "polars.testing.parametric.dtypes": [[170, null]], "polars.testing.parametric.lists": [[171, null]], "polars.testing.parametric.load_profile": [[172, null]], "polars.testing.parametric.series": [[173, null]], "polars.testing.parametric.set_profile": [[174, null]], "polars.thread_pool_size": [[175, null]], "polars.threadpool_size": [[176, null]], "polars.time": [[817, null]], "polars.time_range": [[818, null]], "polars.time_ranges": [[819, null]], "polars.using_string_cache": [[177, null]], "polars.var": [[820, null]], "polars.when": [[821, null]], "polars.zeros": [[822, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[195, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[955, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[196, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[956, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[197, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1370, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1370, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[198, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[957, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[178, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[184, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[185, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[187, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[188, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[33, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[34, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[61, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[62, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[63, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[64, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[65, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[66, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[67, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[68, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[69, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[70, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[71, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[72, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[73, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[74, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[75, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[76, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[77, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[78, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[79, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[80, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[81, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[82, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[83, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[84, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[85, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[86, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[87, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[88, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[89, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[922, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1370, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[166, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[318, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[348, "polars.Expr.abs", false]], "abs() (polars.series method)": [[958, "polars.Series.abs", false]], "add() (polars.expr method)": [[349, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[437, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1047, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[319, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[350, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[351, "polars.Expr.alias", false]], "alias() (polars.series method)": [[959, "polars.Series.alias", false]], "align_frames() (in module polars)": [[52, "polars.align_frames", false]], "all() (in module polars)": [[746, "polars.all", false]], "all() (in module polars.selectors)": [[953, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[320, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[352, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[368, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[533, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[924, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[960, "polars.Series.all", false]], "all() (polars.series.arr method)": [[975, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1150, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[747, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[953, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[953, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[353, "polars.Expr.and_", false]], "any() (in module polars)": [[748, "polars.any", false]], "any() (polars.expr method)": [[354, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[369, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[534, "polars.Expr.list.any", false]], "any() (polars.series method)": [[961, "polars.Series.any", false]], "any() (polars.series.arr method)": [[976, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1151, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[749, "polars.any_horizontal", false]], "append() (polars.expr method)": [[355, "polars.Expr.append", false]], "append() (polars.series method)": [[962, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[750, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[199, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[356, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[846, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[963, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[751, "polars.arange", false]], "arccos() (polars.expr method)": [[357, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[964, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[358, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[965, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[359, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[966, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[360, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[967, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[361, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[968, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[752, "polars.arctan2", false]], "arctan2d() (in module polars)": [[753, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[362, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[969, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[363, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[370, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[535, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[970, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[977, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1152, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[364, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[371, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[536, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[971, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[978, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1153, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[365, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[972, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[754, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[366, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[973, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[367, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[974, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[755, "polars.arg_where", false]], "array (class in polars.datatypes)": [[61, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[162, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[163, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[164, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[165, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[392, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[438, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1048, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[62, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[953, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[400, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1006, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[401, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1007, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[402, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1008, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[403, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1009, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[404, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1010, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[405, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1011, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[406, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1012, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[407, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1013, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[408, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1014, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[63, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[953, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[200, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[409, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[847, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1015, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[410, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[57, "polars.build_info", false]], "business_day_count() (in module polars)": [[756, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[953, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[953, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[953, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[848, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[939, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[201, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[411, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[849, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1016, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[439, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1049, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[178, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[184, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[64, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[953, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[94, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[417, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1025, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[418, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1026, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[440, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1050, "polars.Series.dt.century", false]], "chronoformatwarning": [[95, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1027, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[202, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[850, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1028, "polars.Series.clear", false]], "clip() (polars.expr method)": [[419, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1029, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[203, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[851, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1030, "polars.Series.clone", false]], "coalesce() (in module polars)": [[757, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[852, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[58, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[59, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[853, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[204, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[854, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[166, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[185, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[96, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[205, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[855, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[441, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1051, "polars.Series.dt.combine", false]], "computeerror": [[97, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[60, "polars.concat", false]], "concat() (polars.expr.list method)": [[537, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[676, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1154, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1258, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[758, "polars.concat_arr", false]], "concat_list() (in module polars)": [[759, "polars.concat_list", false]], "concat_str() (in module polars)": [[760, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[953, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[372, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[393, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[538, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[677, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[979, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[999, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1155, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1259, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[678, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1260, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[442, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1052, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[761, "polars.corr", false]], "corr() (polars.dataframe method)": [[206, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[420, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1031, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[421, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1032, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[422, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1033, "polars.Series.cot", false]], "count() (in module polars)": [[762, "polars.count", false]], "count() (polars.dataframe method)": [[207, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[321, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[423, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[856, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[925, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1034, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[373, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[539, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[679, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[980, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1156, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1261, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[763, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[33, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[34, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[764, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[424, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1035, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[765, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[425, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1036, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[426, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1037, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[427, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1038, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[766, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[767, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[428, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1039, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[768, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[429, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1040, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[98, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[430, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1041, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[99, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[186, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[65, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[66, "polars.datatypes.Date", false]], "date() (in module polars)": [[769, "polars.date", false]], "date() (in module polars.selectors)": [[953, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[443, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1053, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[770, "polars.date_range", false]], "date_ranges() (in module polars)": [[771, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[67, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[772, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[953, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[444, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1054, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[773, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[774, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[445, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1055, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[68, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[953, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[394, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[680, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1000, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1262, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[431, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[208, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[857, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1042, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[209, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[432, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[858, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[433, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[540, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1043, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1157, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[953, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[91, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[434, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1044, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[210, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[859, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[211, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[212, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[435, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[860, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1045, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[213, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[436, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[541, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[861, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1046, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1158, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[446, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1056, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1096, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[214, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[862, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[100, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[69, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[775, "polars.duration", false]], "duration() (in module polars.selectors)": [[953, "polars.selectors.duration", false]], "element() (in module polars)": [[776, "polars.element", false]], "enable_string_cache() (in module polars)": [[92, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[395, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[681, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1001, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1263, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[953, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[396, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[412, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[682, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1002, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1017, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1264, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[482, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1097, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[70, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[447, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1057, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[483, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[583, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1098, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[484, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1099, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[215, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1100, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[93, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[683, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1265, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[216, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1101, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[542, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1159, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[485, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1102, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[486, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1103, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[487, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1104, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[488, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1105, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[777, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[953, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[489, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1351, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1352, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[490, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1106, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[953, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[863, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[217, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[491, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[374, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[543, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[684, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[864, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1107, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[981, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1160, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1266, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[218, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1108, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[492, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1109, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[685, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1267, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[686, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1268, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[687, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1269, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[688, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1270, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[940, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[941, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[71, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[725, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1307, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1308, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[219, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[493, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[865, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1110, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[220, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[494, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[866, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1111, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[221, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[495, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[867, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1112, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[689, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1271, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[690, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1272, "polars.Series.str.find_many", false]], "first() (in module polars)": [[778, "polars.first", false]], "first() (in module polars.selectors)": [[953, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[322, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[496, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[375, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[544, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[868, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[926, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1113, "polars.Series.first", false]], "first() (polars.series.arr method)": [[982, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1161, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[222, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1114, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[497, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[953, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[72, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[73, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[498, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1115, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[499, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[779, "polars.fold", false]], "fold() (polars.dataframe method)": [[223, "polars.DataFrame.fold", false]], "format() (in module polars)": [[780, "polars.format", false]], "forward_fill() (polars.expr method)": [[500, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[124, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[125, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[126, "polars.from_dict", false]], "from_dicts() (in module polars)": [[127, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[781, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[501, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[128, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[129, "polars.from_pandas", false]], "from_records() (in module polars)": [[130, "polars.from_records", false]], "from_repr() (in module polars)": [[131, "polars.from_repr", false]], "gather() (polars.expr method)": [[502, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[545, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1116, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1162, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[224, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[503, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[546, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[869, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1117, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1163, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[504, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1118, "polars.Series.ge", false]], "get() (polars.expr method)": [[505, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[376, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[547, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[983, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1164, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[413, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1018, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1119, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[225, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[226, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[227, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[132, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[189, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[179, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[228, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[922, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[229, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[870, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[230, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[871, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[782, "polars.groups", false]], "gt() (polars.expr method)": [[506, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1120, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[584, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[507, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1121, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1122, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[508, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1123, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[231, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[783, "polars.head", false]], "head() (polars.dataframe method)": [[232, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[323, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[509, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[548, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[691, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[872, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[927, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1124, "polars.Series.head", false]], "head() (polars.series.list method)": [[1165, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1273, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[233, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[510, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1125, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[448, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1058, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[234, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[784, "polars.implode", false]], "implode() (polars.expr method)": [[511, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1126, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[512, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1127, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[235, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[513, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[873, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[74, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[75, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[76, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[77, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[78, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[785, "polars.int_range", false]], "int_ranges() (in module polars)": [[786, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[953, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[236, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[514, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[874, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1128, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[515, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1129, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[101, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[516, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1130, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[585, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[586, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[237, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[517, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1131, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[238, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1132, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[518, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1133, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[519, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1134, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[520, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1135, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[521, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1136, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[522, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1137, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[449, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1059, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[587, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1019, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[523, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1138, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[524, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1139, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[525, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1140, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[526, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1141, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[588, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[953, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1142, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[239, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[527, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1143, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[450, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1060, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[240, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1144, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[241, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[242, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[243, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[244, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[377, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[549, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[692, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[875, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[984, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1166, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1274, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[245, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[876, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[246, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[877, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[693, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1275, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[726, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1309, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[135, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[694, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1276, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[603, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[528, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1145, "polars.Series.kurtosis", false]], "last() (in module polars)": [[787, "polars.last", false]], "last() (in module polars.selectors)": [[953, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[324, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[529, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[378, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[550, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[878, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[928, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1146, "polars.Series.last", false]], "last() (polars.series.arr method)": [[985, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1167, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[247, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[879, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[530, "polars.Expr.le", false]], "le() (polars.series method)": [[1147, "polars.Series.le", false]], "len() (in module polars)": [[788, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[325, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[531, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[551, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[929, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1148, "polars.Series.len", false]], "len() (polars.series.list method)": [[1168, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[414, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[695, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1020, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1277, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[415, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[696, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1021, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1278, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[248, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[532, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[880, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1149, "polars.Series.limit", false]], "linear_space() (in module polars)": [[789, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[790, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[79, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[180, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[181, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[182, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[171, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[791, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[172, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[573, "polars.Expr.log", false]], "log() (polars.series method)": [[1190, "polars.Series.log", false]], "log10() (polars.expr method)": [[574, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1191, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[575, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1192, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[576, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1193, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[577, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1194, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[604, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[792, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[578, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[881, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[579, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1195, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[605, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[793, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[326, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[930, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[249, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[102, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[953, "polars.selectors.matches", false]], "max() (in module polars)": [[794, "polars.max", false]], "max() (polars.dataframe method)": [[250, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[327, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[580, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[379, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[552, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[882, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[931, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1196, "polars.Series.max", false]], "max() (polars.series.arr method)": [[986, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1061, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1169, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[795, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[251, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[796, "polars.mean", false]], "mean() (polars.dataframe method)": [[252, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[581, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[553, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[883, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[932, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1197, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1062, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1170, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[797, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[253, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[798, "polars.median", false]], "median() (polars.dataframe method)": [[254, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[582, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[380, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[554, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[884, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[933, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1198, "polars.Series.median", false]], "median() (polars.series.arr method)": [[987, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1063, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1171, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[255, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[885, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[256, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[886, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[451, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1064, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[452, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1065, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[453, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1066, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[799, "polars.min", false]], "min() (polars.dataframe method)": [[257, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[598, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[381, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[555, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[887, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[934, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1199, "polars.Series.min", false]], "min() (polars.series.arr method)": [[988, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1067, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1172, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[800, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[258, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[454, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1068, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[599, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[600, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1200, "polars.Series.mode", false]], "module": [[953, "module-polars.selectors", false]], "moduleupgraderequirederror": [[103, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[455, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1069, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[456, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1070, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[457, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1071, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[601, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[259, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1201, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[801, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[260, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[602, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[382, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[556, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[935, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1202, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[989, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1173, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1203, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[187, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[612, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1204, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[613, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1205, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[458, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1072, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[614, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[589, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1206, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[615, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1207, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[616, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1208, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[133, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[104, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[697, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1279, "polars.Series.str.normalize", false]], "norowsreturnederror": [[105, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[617, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1209, "polars.Series.not_", false]], "nth() (in module polars)": [[802, "polars.nth", false]], "null (class in polars.datatypes)": [[80, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[261, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[618, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[888, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1210, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[953, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[81, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[459, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1073, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[803, "polars.ones", false]], "or_() (polars.expr method)": [[619, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[460, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1074, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[106, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[590, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[620, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[698, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1280, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[699, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1281, "polars.Series.str.pad_start", false]], "panicexception": [[107, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[108, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[262, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[621, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1211, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[622, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1212, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[623, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1213, "polars.Series.peak_min", false]], "performancewarning": [[109, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[263, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[624, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[889, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[264, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[343, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1347, "polars.Series.plot", false]], "polars.selectors": [[953, "module-polars.selectors", false]], "polarserror": [[110, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[111, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[112, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[591, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[625, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1214, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[606, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[607, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[265, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[626, "polars.Expr.product", false]], "product() (polars.series method)": [[1215, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[890, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[627, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1216, "polars.Series.qcut", false]], "quantile() (in module polars)": [[804, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[266, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[628, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[891, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[936, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1217, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[461, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1075, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[629, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[630, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1218, "polars.Series.rank", false]], "read_avro() (in module polars)": [[137, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[138, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[139, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[140, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[141, "polars.read_database", false]], "read_database_uri() (in module polars)": [[142, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[143, "polars.read_delta", false]], "read_excel() (in module polars)": [[144, "polars.read_excel", false]], "read_ipc() (in module polars)": [[145, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[146, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[147, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[148, "polars.read_json", false]], "read_ndjson() (in module polars)": [[149, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[150, "polars.read_ods", false]], "read_parquet() (in module polars)": [[151, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[152, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[267, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[631, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1219, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[805, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1353, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[53, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[54, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1354, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[134, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[55, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1355, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[136, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[56, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[632, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[397, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1220, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1003, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[892, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[268, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[893, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[269, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[894, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1221, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[727, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1310, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[806, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[633, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[634, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[462, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[700, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1222, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1076, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1282, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[701, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1283, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[270, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[702, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1284, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[635, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1223, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[463, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1077, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[636, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1224, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[271, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[637, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[383, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[557, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[703, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[895, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1225, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[990, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1174, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1285, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[638, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1226, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[639, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1227, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[272, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[640, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[896, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[807, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[808, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[641, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1228, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[642, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1229, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[643, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[644, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1230, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[645, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[646, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1231, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[647, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[648, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1232, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[649, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[650, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1233, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[651, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[652, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1234, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[653, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1235, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[654, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[655, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1236, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[656, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[657, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1237, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[658, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[592, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[659, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[464, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1238, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1078, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[660, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1239, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[273, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[274, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[275, "polars.DataFrame.rows_by_key", false]], "rowserror": [[113, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[276, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[661, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[558, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1240, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1175, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[153, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[154, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[155, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[156, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[157, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[158, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[159, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[183, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1241, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[277, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[897, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1311, "polars.Series.struct.schema", false]], "schemaerror": [[116, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[117, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[662, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1242, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[465, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1079, "polars.Series.dt.second", false]], "select() (in module polars)": [[809, "polars.select", false]], "select() (polars.dataframe method)": [[278, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[898, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[279, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[899, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[280, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[593, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[900, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[173, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1243, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[559, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1176, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[560, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1177, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[174, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[160, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[281, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[663, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[901, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1244, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[561, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1178, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[562, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1179, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[282, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1245, "polars.Series.shape", false]], "shapeerror": [[118, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[283, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[664, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[384, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[563, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[902, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1246, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[991, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1180, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[594, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[903, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[161, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[665, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1247, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[284, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1248, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[666, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1249, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[667, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1250, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[953, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[668, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1251, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[669, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1252, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[398, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1004, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[670, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1253, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[285, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[671, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[564, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[704, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[904, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1254, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1181, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1286, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[286, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[672, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[385, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[565, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[905, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1255, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[992, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1182, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[673, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[705, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1287, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[706, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1288, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[707, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1289, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[810, "polars.sql", false]], "sql() (polars.dataframe method)": [[287, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[906, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[811, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1370, "polars.SQLContext", false]], "sqlinterfaceerror": [[114, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[115, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[674, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1256, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[953, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[399, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[416, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[708, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1005, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1022, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1290, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[812, "polars.std", false]], "std() (polars.dataframe method)": [[288, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[675, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[386, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[566, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[907, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1257, "polars.Series.std", false]], "std() (polars.series.arr method)": [[993, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1183, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[466, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1080, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[82, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[953, "polars.selectors.string", false]], "stringcache (class in polars)": [[51, "polars.StringCache", false]], "stringcachemismatcherror": [[119, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[709, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1291, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[710, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1292, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[711, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1293, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[712, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1294, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[713, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1295, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[714, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1296, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[83, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[813, "polars.struct", false]], "structfieldnotfounderror": [[120, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[344, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[730, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[608, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[609, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[814, "polars.sum", false]], "sum() (polars.dataframe method)": [[289, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[731, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[387, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[567, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[908, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[937, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1313, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[994, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1184, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[815, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[290, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[188, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1356, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[190, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[816, "polars.tail", false]], "tail() (polars.dataframe method)": [[291, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[732, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[568, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[715, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[909, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[938, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1314, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1185, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1297, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[733, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1315, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[734, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1316, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[953, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[175, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[176, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[84, "polars.datatypes.Time", false]], "time() (in module polars)": [[817, "polars.time", false]], "time() (in module polars.selectors)": [[953, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[467, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1081, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[818, "polars.time_range", false]], "time_ranges() (in module polars)": [[819, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[468, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1082, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[569, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1186, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[292, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1317, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[716, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1298, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[717, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1299, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[718, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1300, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[293, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[294, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[295, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1318, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1319, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[296, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1320, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[719, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1301, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[297, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1321, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[388, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1322, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[995, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1023, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[610, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[720, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1302, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[298, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1323, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[299, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1324, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[735, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1325, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[300, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[469, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1083, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[301, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[389, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[570, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[996, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1187, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[721, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1303, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[722, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1304, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[302, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1326, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[611, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[723, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1305, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[121, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[303, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[736, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[910, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1327, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[737, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[470, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1084, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[471, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1085, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[472, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1086, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[473, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1087, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[474, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1088, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[475, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1089, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[476, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1090, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[304, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[595, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[738, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[477, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1091, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[85, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[86, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[87, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[88, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[596, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[305, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[739, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[390, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[571, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[911, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1328, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[997, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1188, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[740, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1329, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[89, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[306, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[728, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[912, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1312, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[307, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[913, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1357, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[953, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[122, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[308, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[123, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[309, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[914, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[741, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1330, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[310, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1024, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[177, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[90, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[742, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1331, "polars.Series.value_counts", false]], "var() (in module polars)": [[820, "polars.var", false]], "var() (polars.dataframe method)": [[311, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[743, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[391, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[572, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[915, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1332, "polars.Series.var", false]], "var() (polars.series.arr method)": [[998, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1189, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[312, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[478, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1092, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[479, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1093, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[821, "polars.when", false]], "where() (polars.expr method)": [[744, "polars.Expr.where", false]], "width (polars.dataframe property)": [[313, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[916, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[314, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[917, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[315, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[918, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[919, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[729, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[316, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[920, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[317, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[921, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[480, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1094, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[35, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[36, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[41, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[44, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[597, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[45, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[46, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[745, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[481, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1095, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[822, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[724, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1306, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1333, "polars.Series.zip_with", false]]}, "objects": {"polars": [[178, 0, 1, "", "Catalog"], [31, 0, 1, "", "CredentialProvider"], [32, 0, 1, "", "CredentialProviderAWS"], [33, 0, 1, "", "CredentialProviderAzure"], [34, 0, 1, "", "CredentialProviderGCP"], [1370, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 4, 1, "", "align_frames"], [746, 4, 1, "", "all"], [747, 4, 1, "", "all_horizontal"], [748, 4, 1, "", "any"], [749, 4, 1, "", "any_horizontal"], [750, 4, 1, "", "approx_n_unique"], [751, 4, 1, "", "arange"], [752, 4, 1, "", "arctan2"], [753, 4, 1, "", "arctan2d"], [754, 4, 1, "", "arg_sort_by"], [755, 4, 1, "", "arg_where"], [57, 4, 1, "", "build_info"], [756, 4, 1, "", "business_day_count"], [757, 4, 1, "", "coalesce"], [58, 4, 1, "", "collect_all"], [59, 4, 1, "", "collect_all_async"], [60, 4, 1, "", "concat"], [758, 4, 1, "", "concat_arr"], [759, 4, 1, "", "concat_list"], [760, 4, 1, "", "concat_str"], [761, 4, 1, "", "corr"], [762, 4, 1, "", "count"], [763, 4, 1, "", "cov"], [764, 4, 1, "", "cum_count"], [765, 4, 1, "", "cum_fold"], [766, 4, 1, "", "cum_reduce"], [767, 4, 1, "", "cum_sum"], [768, 4, 1, "", "cum_sum_horizontal"], [769, 4, 1, "", "date"], [770, 4, 1, "", "date_range"], [771, 4, 1, "", "date_ranges"], [772, 4, 1, "", "datetime"], [773, 4, 1, "", "datetime_range"], [774, 4, 1, "", "datetime_ranges"], [91, 4, 1, "", "disable_string_cache"], [775, 4, 1, "", "duration"], [776, 4, 1, "", "element"], [92, 4, 1, "", "enable_string_cache"], [93, 4, 1, "", "escape_regex"], [777, 4, 1, "", "exclude"], [778, 4, 1, "", "first"], [779, 4, 1, "", "fold"], [780, 4, 1, "", "format"], [124, 4, 1, "", "from_arrow"], [125, 4, 1, "", "from_dataframe"], [126, 4, 1, "", "from_dict"], [127, 4, 1, "", "from_dicts"], [781, 4, 1, "", "from_epoch"], [128, 4, 1, "", "from_numpy"], [129, 4, 1, "", "from_pandas"], [130, 4, 1, "", "from_records"], [131, 4, 1, "", "from_repr"], [132, 4, 1, "", "get_index_type"], [782, 4, 1, "", "groups"], [783, 4, 1, "", "head"], [784, 4, 1, "", "implode"], [785, 4, 1, "", "int_range"], [786, 4, 1, "", "int_ranges"], [135, 4, 1, "", "json_normalize"], [787, 4, 1, "", "last"], [788, 4, 1, "", "len"], [789, 4, 1, "", "linear_space"], [790, 4, 1, "", "linear_spaces"], [791, 4, 1, "", "lit"], [792, 4, 1, "", "map_batches"], [793, 4, 1, "", "map_groups"], [794, 4, 1, "", "max"], [795, 4, 1, "", "max_horizontal"], [796, 4, 1, "", "mean"], [797, 4, 1, "", "mean_horizontal"], [798, 4, 1, "", "median"], [799, 4, 1, "", "min"], [800, 4, 1, "", "min_horizontal"], [801, 4, 1, "", "n_unique"], [802, 4, 1, "", "nth"], [803, 4, 1, "", "ones"], [804, 4, 1, "", "quantile"], [137, 4, 1, "", "read_avro"], [138, 4, 1, "", "read_clipboard"], [139, 4, 1, "", "read_csv"], [140, 4, 1, "", "read_csv_batched"], [141, 4, 1, "", "read_database"], [142, 4, 1, "", "read_database_uri"], [143, 4, 1, "", "read_delta"], [144, 4, 1, "", "read_excel"], [145, 4, 1, "", "read_ipc"], [146, 4, 1, "", "read_ipc_schema"], [147, 4, 1, "", "read_ipc_stream"], [148, 4, 1, "", "read_json"], [149, 4, 1, "", "read_ndjson"], [150, 4, 1, "", "read_ods"], [151, 4, 1, "", "read_parquet"], [152, 4, 1, "", "read_parquet_schema"], [805, 4, 1, "", "reduce"], [806, 4, 1, "", "repeat"], [807, 4, 1, "", "rolling_corr"], [808, 4, 1, "", "rolling_cov"], [153, 4, 1, "", "scan_csv"], [154, 4, 1, "", "scan_delta"], [155, 4, 1, "", "scan_iceberg"], [156, 4, 1, "", "scan_ipc"], [157, 4, 1, "", "scan_ndjson"], [158, 4, 1, "", "scan_parquet"], [159, 4, 1, "", "scan_pyarrow_dataset"], [809, 4, 1, "", "select"], [953, 7, 0, "-", "selectors"], [160, 4, 1, "", "set_random_seed"], [161, 4, 1, "", "show_versions"], [810, 4, 1, "", "sql"], [811, 4, 1, "", "sql_expr"], [812, 4, 1, "", "std"], [813, 4, 1, "", "struct"], [814, 4, 1, "", "sum"], [815, 4, 1, "", "sum_horizontal"], [816, 4, 1, "", "tail"], [175, 4, 1, "", "thread_pool_size"], [176, 4, 1, "", "threadpool_size"], [817, 4, 1, "", "time"], [818, 4, 1, "", "time_range"], [819, 4, 1, "", "time_ranges"], [177, 4, 1, "", "using_string_cache"], [820, 4, 1, "", "var"], [821, 4, 1, "", "when"], [822, 4, 1, "", "zeros"]], "polars.Catalog": [[178, 1, 1, "", "__init__"], [179, 1, 1, "", "get_table_info"], [180, 1, 1, "", "list_catalogs"], [181, 1, 1, "", "list_namespaces"], [182, 1, 1, "", "list_tables"], [183, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_float_precision"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_fmt_table_cell_list_len"], [14, 1, 1, "", "set_streaming_chunk_size"], [15, 1, 1, "", "set_tbl_cell_alignment"], [16, 1, 1, "", "set_tbl_cell_numeric_alignment"], [17, 1, 1, "", "set_tbl_cols"], [18, 1, 1, "", "set_tbl_column_data_type_inline"], [19, 1, 1, "", "set_tbl_dataframe_shape_below"], [20, 1, 1, "", "set_tbl_formatting"], [21, 1, 1, "", "set_tbl_hide_column_data_types"], [22, 1, 1, "", "set_tbl_hide_column_names"], [23, 1, 1, "", "set_tbl_hide_dataframe_shape"], [24, 1, 1, "", "set_tbl_hide_dtype_separator"], [25, 1, 1, "", "set_tbl_rows"], [26, 1, 1, "", "set_tbl_width_chars"], [27, 1, 1, "", "set_thousands_separator"], [28, 1, 1, "", "set_trim_decimal_zeros"], [29, 1, 1, "", "set_verbose"], [30, 1, 1, "", "state"]], "polars.CredentialProvider": [[31, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[34, 1, 1, "", "__init__"]], "polars.DataFrame": [[195, 1, 1, "", "__array__"], [196, 1, 1, "", "__arrow_c_stream__"], [197, 1, 1, "", "__dataframe__"], [198, 1, 1, "", "__getitem__"], [199, 1, 1, "", "approx_n_unique"], [200, 1, 1, "", "bottom_k"], [201, 1, 1, "", "cast"], [202, 1, 1, "", "clear"], [203, 1, 1, "", "clone"], [204, 1, 1, "", "collect_schema"], [205, 2, 1, "", "columns"], [206, 1, 1, "", "corr"], [207, 1, 1, "", "count"], [208, 1, 1, "", "describe"], [209, 1, 1, "", "deserialize"], [210, 1, 1, "", "drop"], [211, 1, 1, "", "drop_in_place"], [212, 1, 1, "", "drop_nans"], [213, 1, 1, "", "drop_nulls"], [214, 2, 1, "", "dtypes"], [215, 1, 1, "", "equals"], [216, 1, 1, "", "estimated_size"], [217, 1, 1, "", "explode"], [218, 1, 1, "", "extend"], [219, 1, 1, "", "fill_nan"], [220, 1, 1, "", "fill_null"], [221, 1, 1, "", "filter"], [222, 2, 1, "", "flags"], [223, 1, 1, "", "fold"], [224, 1, 1, "", "gather_every"], [225, 1, 1, "", "get_column"], [226, 1, 1, "", "get_column_index"], [227, 1, 1, "", "get_columns"], [228, 1, 1, "", "glimpse"], [229, 1, 1, "", "group_by"], [230, 1, 1, "", "group_by_dynamic"], [231, 1, 1, "", "hash_rows"], [232, 1, 1, "", "head"], [233, 2, 1, "", "height"], [234, 1, 1, "", "hstack"], [235, 1, 1, "", "insert_column"], [236, 1, 1, "", "interpolate"], [237, 1, 1, "", "is_duplicated"], [238, 1, 1, "", "is_empty"], [239, 1, 1, "", "is_unique"], [240, 1, 1, "", "item"], [241, 1, 1, "", "iter_columns"], [242, 1, 1, "", "iter_rows"], [243, 1, 1, "", "iter_slices"], [244, 1, 1, "", "join"], [245, 1, 1, "", "join_asof"], [246, 1, 1, "", "join_where"], [247, 1, 1, "", "lazy"], [248, 1, 1, "", "limit"], [249, 1, 1, "", "map_rows"], [250, 1, 1, "", "max"], [251, 1, 1, "", "max_horizontal"], [252, 1, 1, "", "mean"], [253, 1, 1, "", "mean_horizontal"], [254, 1, 1, "", "median"], [255, 1, 1, "", "melt"], [256, 1, 1, "", "merge_sorted"], [257, 1, 1, "", "min"], [258, 1, 1, "", "min_horizontal"], [259, 1, 1, "", "n_chunks"], [260, 1, 1, "", "n_unique"], [261, 1, 1, "", "null_count"], [262, 1, 1, "", "partition_by"], [263, 1, 1, "", "pipe"], [264, 1, 1, "", "pivot"], [343, 2, 1, "", "plot"], [265, 1, 1, "", "product"], [266, 1, 1, "", "quantile"], [267, 1, 1, "", "rechunk"], [268, 1, 1, "", "remove"], [269, 1, 1, "", "rename"], [270, 1, 1, "", "replace_column"], [271, 1, 1, "", "reverse"], [272, 1, 1, "", "rolling"], [273, 1, 1, "", "row"], [274, 1, 1, "", "rows"], [275, 1, 1, "", "rows_by_key"], [276, 1, 1, "", "sample"], [277, 2, 1, "", "schema"], [278, 1, 1, "", "select"], [279, 1, 1, "", "select_seq"], [280, 1, 1, "", "serialize"], [281, 1, 1, "", "set_sorted"], [282, 2, 1, "", "shape"], [283, 1, 1, "", "shift"], [284, 1, 1, "", "shrink_to_fit"], [285, 1, 1, "", "slice"], [286, 1, 1, "", "sort"], [287, 1, 1, "", "sql"], [288, 1, 1, "", "std"], [344, 2, 1, "", "style"], [289, 1, 1, "", "sum"], [290, 1, 1, "", "sum_horizontal"], [291, 1, 1, "", "tail"], [292, 1, 1, "", "to_arrow"], [293, 1, 1, "", "to_dict"], [294, 1, 1, "", "to_dicts"], [295, 1, 1, "", "to_dummies"], [296, 1, 1, "", "to_init_repr"], [297, 1, 1, "", "to_jax"], [298, 1, 1, "", "to_numpy"], [299, 1, 1, "", "to_pandas"], [300, 1, 1, "", "to_series"], [301, 1, 1, "", "to_struct"], [302, 1, 1, "", "to_torch"], [303, 1, 1, "", "top_k"], [304, 1, 1, "", "transpose"], [305, 1, 1, "", "unique"], [306, 1, 1, "", "unnest"], [307, 1, 1, "", "unpivot"], [308, 1, 1, "", "unstack"], [309, 1, 1, "", "update"], [310, 1, 1, "", "upsample"], [311, 1, 1, "", "var"], [312, 1, 1, "", "vstack"], [313, 2, 1, "", "width"], [314, 1, 1, "", "with_columns"], [315, 1, 1, "", "with_columns_seq"], [316, 1, 1, "", "with_row_count"], [317, 1, 1, "", "with_row_index"], [35, 1, 1, "", "write_avro"], [36, 1, 1, "", "write_clipboard"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_iceberg"], [42, 1, 1, "", "write_ipc"], [43, 1, 1, "", "write_ipc_stream"], [44, 1, 1, "", "write_json"], [45, 1, 1, "", "write_ndjson"], [46, 1, 1, "", "write_parquet"]], "polars.Expr": [[348, 1, 1, "", "abs"], [349, 1, 1, "", "add"], [350, 1, 1, "", "agg_groups"], [351, 1, 1, "", "alias"], [352, 1, 1, "", "all"], [353, 1, 1, "", "and_"], [354, 1, 1, "", "any"], [355, 1, 1, "", "append"], [356, 1, 1, "", "approx_n_unique"], [357, 1, 1, "", "arccos"], [358, 1, 1, "", "arccosh"], [359, 1, 1, "", "arcsin"], [360, 1, 1, "", "arcsinh"], [361, 1, 1, "", "arctan"], [362, 1, 1, "", "arctanh"], [363, 1, 1, "", "arg_max"], [364, 1, 1, "", "arg_min"], [365, 1, 1, "", "arg_sort"], [366, 1, 1, "", "arg_true"], [367, 1, 1, "", "arg_unique"], [392, 1, 1, "", "backward_fill"], [400, 1, 1, "", "bitwise_and"], [401, 1, 1, "", "bitwise_count_ones"], [402, 1, 1, "", "bitwise_count_zeros"], [403, 1, 1, "", "bitwise_leading_ones"], [404, 1, 1, "", "bitwise_leading_zeros"], [405, 1, 1, "", "bitwise_or"], [406, 1, 1, "", "bitwise_trailing_ones"], [407, 1, 1, "", "bitwise_trailing_zeros"], [408, 1, 1, "", "bitwise_xor"], [409, 1, 1, "", "bottom_k"], [410, 1, 1, "", "bottom_k_by"], [411, 1, 1, "", "cast"], [417, 1, 1, "", "cbrt"], [418, 1, 1, "", "ceil"], [419, 1, 1, "", "clip"], [420, 1, 1, "", "cos"], [421, 1, 1, "", "cosh"], [422, 1, 1, "", "cot"], [423, 1, 1, "", "count"], [424, 1, 1, "", "cum_count"], [425, 1, 1, "", "cum_max"], [426, 1, 1, "", "cum_min"], [427, 1, 1, "", "cum_prod"], [428, 1, 1, "", "cum_sum"], [429, 1, 1, "", "cumulative_eval"], [430, 1, 1, "", "cut"], [431, 1, 1, "", "degrees"], [432, 1, 1, "", "deserialize"], [433, 1, 1, "", "diff"], [434, 1, 1, "", "dot"], [435, 1, 1, "", "drop_nans"], [436, 1, 1, "", "drop_nulls"], [482, 1, 1, "", "entropy"], [483, 1, 1, "", "eq"], [484, 1, 1, "", "eq_missing"], [485, 1, 1, "", "ewm_mean"], [486, 1, 1, "", "ewm_mean_by"], [487, 1, 1, "", "ewm_std"], [488, 1, 1, "", "ewm_var"], [489, 1, 1, "", "exclude"], [490, 1, 1, "", "exp"], [491, 1, 1, "", "explode"], [492, 1, 1, "", "extend_constant"], [493, 1, 1, "", "fill_nan"], [494, 1, 1, "", "fill_null"], [495, 1, 1, "", "filter"], [496, 1, 1, "", "first"], [497, 1, 1, "", "flatten"], [498, 1, 1, "", "floor"], [499, 1, 1, "", "floordiv"], [500, 1, 1, "", "forward_fill"], [501, 1, 1, "", "from_json"], [502, 1, 1, "", "gather"], [503, 1, 1, "", "gather_every"], [504, 1, 1, "", "ge"], [505, 1, 1, "", "get"], [506, 1, 1, "", "gt"], [507, 1, 1, "", "has_nulls"], [508, 1, 1, "", "hash"], [509, 1, 1, "", "head"], [510, 1, 1, "", "hist"], [511, 1, 1, "", "implode"], [512, 1, 1, "", "index_of"], [513, 1, 1, "", "inspect"], [514, 1, 1, "", "interpolate"], [515, 1, 1, "", "interpolate_by"], [516, 1, 1, "", "is_between"], [517, 1, 1, "", "is_duplicated"], [518, 1, 1, "", "is_finite"], [519, 1, 1, "", "is_first_distinct"], [520, 1, 1, "", "is_in"], [521, 1, 1, "", "is_infinite"], [522, 1, 1, "", "is_last_distinct"], [523, 1, 1, "", "is_nan"], [524, 1, 1, "", "is_not_nan"], [525, 1, 1, "", "is_not_null"], [526, 1, 1, "", "is_null"], [527, 1, 1, "", "is_unique"], [528, 1, 1, "", "kurtosis"], [529, 1, 1, "", "last"], [530, 1, 1, "", "le"], [531, 1, 1, "", "len"], [532, 1, 1, "", "limit"], [573, 1, 1, "", "log"], [574, 1, 1, "", "log10"], [575, 1, 1, "", "log1p"], [576, 1, 1, "", "lower_bound"], [577, 1, 1, "", "lt"], [578, 1, 1, "", "map_batches"], [579, 1, 1, "", "map_elements"], [580, 1, 1, "", "max"], [581, 1, 1, "", "mean"], [582, 1, 1, "", "median"], [598, 1, 1, "", "min"], [599, 1, 1, "", "mod"], [600, 1, 1, "", "mode"], [601, 1, 1, "", "mul"], [602, 1, 1, "", "n_unique"], [612, 1, 1, "", "nan_max"], [613, 1, 1, "", "nan_min"], [614, 1, 1, "", "ne"], [615, 1, 1, "", "ne_missing"], [616, 1, 1, "", "neg"], [617, 1, 1, "", "not_"], [618, 1, 1, "", "null_count"], [619, 1, 1, "", "or_"], [620, 1, 1, "", "over"], [621, 1, 1, "", "pct_change"], [622, 1, 1, "", "peak_max"], [623, 1, 1, "", "peak_min"], [624, 1, 1, "", "pipe"], [625, 1, 1, "", "pow"], [626, 1, 1, "", "product"], [627, 1, 1, "", "qcut"], [628, 1, 1, "", "quantile"], [629, 1, 1, "", "radians"], [630, 1, 1, "", "rank"], [631, 1, 1, "", "rechunk"], [632, 1, 1, "", "reinterpret"], [633, 1, 1, "", "repeat_by"], [634, 1, 1, "", "replace"], [635, 1, 1, "", "replace_strict"], [636, 1, 1, "", "reshape"], [637, 1, 1, "", "reverse"], [638, 1, 1, "", "rle"], [639, 1, 1, "", "rle_id"], [640, 1, 1, "", "rolling"], [641, 1, 1, "", "rolling_map"], [642, 1, 1, "", "rolling_max"], [643, 1, 1, "", "rolling_max_by"], [644, 1, 1, "", "rolling_mean"], [645, 1, 1, "", "rolling_mean_by"], [646, 1, 1, "", "rolling_median"], [647, 1, 1, "", "rolling_median_by"], [648, 1, 1, "", "rolling_min"], [649, 1, 1, "", "rolling_min_by"], [650, 1, 1, "", "rolling_quantile"], [651, 1, 1, "", "rolling_quantile_by"], [652, 1, 1, "", "rolling_skew"], [653, 1, 1, "", "rolling_std"], [654, 1, 1, "", "rolling_std_by"], [655, 1, 1, "", "rolling_sum"], [656, 1, 1, "", "rolling_sum_by"], [657, 1, 1, "", "rolling_var"], [658, 1, 1, "", "rolling_var_by"], [659, 1, 1, "", "round"], [660, 1, 1, "", "round_sig_figs"], [661, 1, 1, "", "sample"], [662, 1, 1, "", "search_sorted"], [663, 1, 1, "", "set_sorted"], [664, 1, 1, "", "shift"], [665, 1, 1, "", "shrink_dtype"], [666, 1, 1, "", "shuffle"], [667, 1, 1, "", "sign"], [668, 1, 1, "", "sin"], [669, 1, 1, "", "sinh"], [670, 1, 1, "", "skew"], [671, 1, 1, "", "slice"], [672, 1, 1, "", "sort"], [673, 1, 1, "", "sort_by"], [674, 1, 1, "", "sqrt"], [675, 1, 1, "", "std"], [730, 1, 1, "", "sub"], [731, 1, 1, "", "sum"], [732, 1, 1, "", "tail"], [733, 1, 1, "", "tan"], [734, 1, 1, "", "tanh"], [735, 1, 1, "", "to_physical"], [736, 1, 1, "", "top_k"], [737, 1, 1, "", "top_k_by"], [738, 1, 1, "", "truediv"], [739, 1, 1, "", "unique"], [740, 1, 1, "", "unique_counts"], [741, 1, 1, "", "upper_bound"], [742, 1, 1, "", "value_counts"], [743, 1, 1, "", "var"], [744, 1, 1, "", "where"], [745, 1, 1, "", "xor"]], "polars.Expr.arr": [[368, 1, 1, "", "all"], [369, 1, 1, "", "any"], [370, 1, 1, "", "arg_max"], [371, 1, 1, "", "arg_min"], [372, 1, 1, "", "contains"], [373, 1, 1, "", "count_matches"], [374, 1, 1, "", "explode"], [375, 1, 1, "", "first"], [376, 1, 1, "", "get"], [377, 1, 1, "", "join"], [378, 1, 1, "", "last"], [379, 1, 1, "", "max"], [380, 1, 1, "", "median"], [381, 1, 1, "", "min"], [382, 1, 1, "", "n_unique"], [383, 1, 1, "", "reverse"], [384, 1, 1, "", "shift"], [385, 1, 1, "", "sort"], [386, 1, 1, "", "std"], [387, 1, 1, "", "sum"], [388, 1, 1, "", "to_list"], [389, 1, 1, "", "to_struct"], [390, 1, 1, "", "unique"], [391, 1, 1, "", "var"]], "polars.Expr.bin": [[393, 1, 1, "", "contains"], [394, 1, 1, "", "decode"], [395, 1, 1, "", "encode"], [396, 1, 1, "", "ends_with"], [397, 1, 1, "", "reinterpret"], [398, 1, 1, "", "size"], [399, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[412, 1, 1, "", "ends_with"], [413, 1, 1, "", "get_categories"], [414, 1, 1, "", "len_bytes"], [415, 1, 1, "", "len_chars"], [416, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[437, 1, 1, "", "add_business_days"], [438, 1, 1, "", "base_utc_offset"], [439, 1, 1, "", "cast_time_unit"], [440, 1, 1, "", "century"], [441, 1, 1, "", "combine"], [442, 1, 1, "", "convert_time_zone"], [443, 1, 1, "", "date"], [444, 1, 1, "", "datetime"], [445, 1, 1, "", "day"], [446, 1, 1, "", "dst_offset"], [447, 1, 1, "", "epoch"], [448, 1, 1, "", "hour"], [449, 1, 1, "", "is_leap_year"], [450, 1, 1, "", "iso_year"], [451, 1, 1, "", "microsecond"], [452, 1, 1, "", "millennium"], [453, 1, 1, "", "millisecond"], [454, 1, 1, "", "minute"], [455, 1, 1, "", "month"], [456, 1, 1, "", "month_end"], [457, 1, 1, "", "month_start"], [458, 1, 1, "", "nanosecond"], [459, 1, 1, "", "offset_by"], [460, 1, 1, "", "ordinal_day"], [461, 1, 1, "", "quarter"], [462, 1, 1, "", "replace"], [463, 1, 1, "", "replace_time_zone"], [464, 1, 1, "", "round"], [465, 1, 1, "", "second"], [466, 1, 1, "", "strftime"], [467, 1, 1, "", "time"], [468, 1, 1, "", "timestamp"], [469, 1, 1, "", "to_string"], [470, 1, 1, "", "total_days"], [471, 1, 1, "", "total_hours"], [472, 1, 1, "", "total_microseconds"], [473, 1, 1, "", "total_milliseconds"], [474, 1, 1, "", "total_minutes"], [475, 1, 1, "", "total_nanoseconds"], [476, 1, 1, "", "total_seconds"], [477, 1, 1, "", "truncate"], [478, 1, 1, "", "week"], [479, 1, 1, "", "weekday"], [480, 1, 1, "", "with_time_unit"], [481, 1, 1, "", "year"]], "polars.Expr.list": [[533, 1, 1, "", "all"], [534, 1, 1, "", "any"], [535, 1, 1, "", "arg_max"], [536, 1, 1, "", "arg_min"], [537, 1, 1, "", "concat"], [538, 1, 1, "", "contains"], [539, 1, 1, "", "count_matches"], [540, 1, 1, "", "diff"], [541, 1, 1, "", "drop_nulls"], [542, 1, 1, "", "eval"], [543, 1, 1, "", "explode"], [544, 1, 1, "", "first"], [545, 1, 1, "", "gather"], [546, 1, 1, "", "gather_every"], [547, 1, 1, "", "get"], [548, 1, 1, "", "head"], [549, 1, 1, "", "join"], [550, 1, 1, "", "last"], [551, 1, 1, "", "len"], [552, 1, 1, "", "max"], [553, 1, 1, "", "mean"], [554, 1, 1, "", "median"], [555, 1, 1, "", "min"], [556, 1, 1, "", "n_unique"], [557, 1, 1, "", "reverse"], [558, 1, 1, "", "sample"], [559, 1, 1, "", "set_difference"], [560, 1, 1, "", "set_intersection"], [561, 1, 1, "", "set_symmetric_difference"], [562, 1, 1, "", "set_union"], [563, 1, 1, "", "shift"], [564, 1, 1, "", "slice"], [565, 1, 1, "", "sort"], [566, 1, 1, "", "std"], [567, 1, 1, "", "sum"], [568, 1, 1, "", "tail"], [569, 1, 1, "", "to_array"], [570, 1, 1, "", "to_struct"], [571, 1, 1, "", "unique"], [572, 1, 1, "", "var"]], "polars.Expr.meta": [[583, 1, 1, "", "eq"], [584, 1, 1, "", "has_multiple_outputs"], [585, 1, 1, "", "is_column"], [586, 1, 1, "", "is_column_selection"], [587, 1, 1, "", "is_literal"], [588, 1, 1, "", "is_regex_projection"], [589, 1, 1, "", "ne"], [590, 1, 1, "", "output_name"], [591, 1, 1, "", "pop"], [592, 1, 1, "", "root_names"], [593, 1, 1, "", "serialize"], [594, 1, 1, "", "show_graph"], [595, 1, 1, "", "tree_format"], [596, 1, 1, "", "undo_aliases"], [597, 1, 1, "", "write_json"]], "polars.Expr.name": [[603, 1, 1, "", "keep"], [604, 1, 1, "", "map"], [605, 1, 1, "", "map_fields"], [606, 1, 1, "", "prefix"], [607, 1, 1, "", "prefix_fields"], [608, 1, 1, "", "suffix"], [609, 1, 1, "", "suffix_fields"], [610, 1, 1, "", "to_lowercase"], [611, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[676, 1, 1, "", "concat"], [677, 1, 1, "", "contains"], [678, 1, 1, "", "contains_any"], [679, 1, 1, "", "count_matches"], [680, 1, 1, "", "decode"], [681, 1, 1, "", "encode"], [682, 1, 1, "", "ends_with"], [683, 1, 1, "", "escape_regex"], [684, 1, 1, "", "explode"], [685, 1, 1, "", "extract"], [686, 1, 1, "", "extract_all"], [687, 1, 1, "", "extract_groups"], [688, 1, 1, "", "extract_many"], [689, 1, 1, "", "find"], [690, 1, 1, "", "find_many"], [691, 1, 1, "", "head"], [692, 1, 1, "", "join"], [693, 1, 1, "", "json_decode"], [694, 1, 1, "", "json_path_match"], [695, 1, 1, "", "len_bytes"], [696, 1, 1, "", "len_chars"], [697, 1, 1, "", "normalize"], [698, 1, 1, "", "pad_end"], [699, 1, 1, "", "pad_start"], [700, 1, 1, "", "replace"], [701, 1, 1, "", "replace_all"], [702, 1, 1, "", "replace_many"], [703, 1, 1, "", "reverse"], [704, 1, 1, "", "slice"], [705, 1, 1, "", "split"], [706, 1, 1, "", "split_exact"], [707, 1, 1, "", "splitn"], [708, 1, 1, "", "starts_with"], [709, 1, 1, "", "strip_chars"], [710, 1, 1, "", "strip_chars_end"], [711, 1, 1, "", "strip_chars_start"], [712, 1, 1, "", "strip_prefix"], [713, 1, 1, "", "strip_suffix"], [714, 1, 1, "", "strptime"], [715, 1, 1, "", "tail"], [716, 1, 1, "", "to_date"], [717, 1, 1, "", "to_datetime"], [718, 1, 1, "", "to_decimal"], [719, 1, 1, "", "to_integer"], [720, 1, 1, "", "to_lowercase"], [721, 1, 1, "", "to_time"], [722, 1, 1, "", "to_titlecase"], [723, 1, 1, "", "to_uppercase"], [724, 1, 1, "", "zfill"]], "polars.Expr.struct": [[725, 1, 1, "", "field"], [726, 1, 1, "", "json_encode"], [727, 1, 1, "", "rename_fields"], [728, 1, 1, "", "unnest"], [729, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[846, 1, 1, "", "approx_n_unique"], [847, 1, 1, "", "bottom_k"], [848, 1, 1, "", "cache"], [849, 1, 1, "", "cast"], [850, 1, 1, "", "clear"], [851, 1, 1, "", "clone"], [852, 1, 1, "", "collect"], [853, 1, 1, "", "collect_async"], [854, 1, 1, "", "collect_schema"], [855, 2, 1, "", "columns"], [856, 1, 1, "", "count"], [857, 1, 1, "", "describe"], [858, 1, 1, "", "deserialize"], [859, 1, 1, "", "drop"], [860, 1, 1, "", "drop_nans"], [861, 1, 1, "", "drop_nulls"], [862, 2, 1, "", "dtypes"], [863, 1, 1, "", "explain"], [864, 1, 1, "", "explode"], [865, 1, 1, "", "fill_nan"], [866, 1, 1, "", "fill_null"], [867, 1, 1, "", "filter"], [868, 1, 1, "", "first"], [869, 1, 1, "", "gather_every"], [870, 1, 1, "", "group_by"], [871, 1, 1, "", "group_by_dynamic"], [872, 1, 1, "", "head"], [873, 1, 1, "", "inspect"], [874, 1, 1, "", "interpolate"], [875, 1, 1, "", "join"], [876, 1, 1, "", "join_asof"], [877, 1, 1, "", "join_where"], [878, 1, 1, "", "last"], [879, 1, 1, "", "lazy"], [880, 1, 1, "", "limit"], [881, 1, 1, "", "map_batches"], [882, 1, 1, "", "max"], [883, 1, 1, "", "mean"], [884, 1, 1, "", "median"], [885, 1, 1, "", "melt"], [886, 1, 1, "", "merge_sorted"], [887, 1, 1, "", "min"], [888, 1, 1, "", "null_count"], [889, 1, 1, "", "pipe"], [890, 1, 1, "", "profile"], [891, 1, 1, "", "quantile"], [892, 1, 1, "", "remote"], [893, 1, 1, "", "remove"], [894, 1, 1, "", "rename"], [895, 1, 1, "", "reverse"], [896, 1, 1, "", "rolling"], [897, 2, 1, "", "schema"], [898, 1, 1, "", "select"], [899, 1, 1, "", "select_seq"], [900, 1, 1, "", "serialize"], [901, 1, 1, "", "set_sorted"], [902, 1, 1, "", "shift"], [903, 1, 1, "", "show_graph"], [47, 1, 1, "", "sink_csv"], [48, 1, 1, "", "sink_ipc"], [49, 1, 1, "", "sink_ndjson"], [50, 1, 1, "", "sink_parquet"], [904, 1, 1, "", "slice"], [905, 1, 1, "", "sort"], [906, 1, 1, "", "sql"], [907, 1, 1, "", "std"], [908, 1, 1, "", "sum"], [909, 1, 1, "", "tail"], [910, 1, 1, "", "top_k"], [911, 1, 1, "", "unique"], [912, 1, 1, "", "unnest"], [913, 1, 1, "", "unpivot"], [914, 1, 1, "", "update"], [915, 1, 1, "", "var"], [916, 2, 1, "", "width"], [917, 1, 1, "", "with_columns"], [918, 1, 1, "", "with_columns_seq"], [919, 1, 1, "", "with_context"], [920, 1, 1, "", "with_row_count"], [921, 1, 1, "", "with_row_index"]], "polars.SQLContext": [[1370, 1, 1, "", "__enter__"], [1370, 1, 1, "", "__exit__"], [1370, 1, 1, "", "__init__"], [1351, 1, 1, "", "execute"], [1352, 1, 1, "", "execute_global"], [1353, 1, 1, "", "register"], [1354, 1, 1, "", "register_globals"], [1355, 1, 1, "", "register_many"], [1356, 1, 1, "", "tables"], [1357, 1, 1, "", "unregister"]], "polars.Series": [[955, 1, 1, "", "__array__"], [956, 1, 1, "", "__arrow_c_stream__"], [957, 1, 1, "", "__getitem__"], [958, 1, 1, "", "abs"], [959, 1, 1, "", "alias"], [960, 1, 1, "", "all"], [961, 1, 1, "", "any"], [962, 1, 1, "", "append"], [963, 1, 1, "", "approx_n_unique"], [964, 1, 1, "", "arccos"], [965, 1, 1, "", "arccosh"], [966, 1, 1, "", "arcsin"], [967, 1, 1, "", "arcsinh"], [968, 1, 1, "", "arctan"], [969, 1, 1, "", "arctanh"], [970, 1, 1, "", "arg_max"], [971, 1, 1, "", "arg_min"], [972, 1, 1, "", "arg_sort"], [973, 1, 1, "", "arg_true"], [974, 1, 1, "", "arg_unique"], [1006, 1, 1, "", "bitwise_and"], [1007, 1, 1, "", "bitwise_count_ones"], [1008, 1, 1, "", "bitwise_count_zeros"], [1009, 1, 1, "", "bitwise_leading_ones"], [1010, 1, 1, "", "bitwise_leading_zeros"], [1011, 1, 1, "", "bitwise_or"], [1012, 1, 1, "", "bitwise_trailing_ones"], [1013, 1, 1, "", "bitwise_trailing_zeros"], [1014, 1, 1, "", "bitwise_xor"], [1015, 1, 1, "", "bottom_k"], [1016, 1, 1, "", "cast"], [1025, 1, 1, "", "cbrt"], [1026, 1, 1, "", "ceil"], [1027, 1, 1, "", "chunk_lengths"], [1028, 1, 1, "", "clear"], [1029, 1, 1, "", "clip"], [1030, 1, 1, "", "clone"], [1031, 1, 1, "", "cos"], [1032, 1, 1, "", "cosh"], [1033, 1, 1, "", "cot"], [1034, 1, 1, "", "count"], [1035, 1, 1, "", "cum_count"], [1036, 1, 1, "", "cum_max"], [1037, 1, 1, "", "cum_min"], [1038, 1, 1, "", "cum_prod"], [1039, 1, 1, "", "cum_sum"], [1040, 1, 1, "", "cumulative_eval"], [1041, 1, 1, "", "cut"], [1042, 1, 1, "", "describe"], [1043, 1, 1, "", "diff"], [1044, 1, 1, "", "dot"], [1045, 1, 1, "", "drop_nans"], [1046, 1, 1, "", "drop_nulls"], [1096, 2, 1, "", "dtype"], [1097, 1, 1, "", "entropy"], [1098, 1, 1, "", "eq"], [1099, 1, 1, "", "eq_missing"], [1100, 1, 1, "", "equals"], [1101, 1, 1, "", "estimated_size"], [1102, 1, 1, "", "ewm_mean"], [1103, 1, 1, "", "ewm_mean_by"], [1104, 1, 1, "", "ewm_std"], [1105, 1, 1, "", "ewm_var"], [1106, 1, 1, "", "exp"], [1107, 1, 1, "", "explode"], [1108, 1, 1, "", "extend"], [1109, 1, 1, "", "extend_constant"], [1110, 1, 1, "", "fill_nan"], [1111, 1, 1, "", "fill_null"], [1112, 1, 1, "", "filter"], [1113, 1, 1, "", "first"], [1114, 2, 1, "", "flags"], [1115, 1, 1, "", "floor"], [1116, 1, 1, "", "gather"], [1117, 1, 1, "", "gather_every"], [1118, 1, 1, "", "ge"], [1119, 1, 1, "", "get_chunks"], [1120, 1, 1, "", "gt"], [1121, 1, 1, "", "has_nulls"], [1122, 1, 1, "", "has_validity"], [1123, 1, 1, "", "hash"], [1124, 1, 1, "", "head"], [1125, 1, 1, "", "hist"], [1126, 1, 1, "", "implode"], [1127, 1, 1, "", "index_of"], [1128, 1, 1, "", "interpolate"], [1129, 1, 1, "", "interpolate_by"], [1130, 1, 1, "", "is_between"], [1131, 1, 1, "", "is_duplicated"], [1132, 1, 1, "", "is_empty"], [1133, 1, 1, "", "is_finite"], [1134, 1, 1, "", "is_first_distinct"], [1135, 1, 1, "", "is_in"], [1136, 1, 1, "", "is_infinite"], [1137, 1, 1, "", "is_last_distinct"], [1138, 1, 1, "", "is_nan"], [1139, 1, 1, "", "is_not_nan"], [1140, 1, 1, "", "is_not_null"], [1141, 1, 1, "", "is_null"], [1142, 1, 1, "", "is_sorted"], [1143, 1, 1, "", "is_unique"], [1144, 1, 1, "", "item"], [1145, 1, 1, "", "kurtosis"], [1146, 1, 1, "", "last"], [1147, 1, 1, "", "le"], [1148, 1, 1, "", "len"], [1149, 1, 1, "", "limit"], [1190, 1, 1, "", "log"], [1191, 1, 1, "", "log10"], [1192, 1, 1, "", "log1p"], [1193, 1, 1, "", "lower_bound"], [1194, 1, 1, "", "lt"], [1195, 1, 1, "", "map_elements"], [1196, 1, 1, "", "max"], [1197, 1, 1, "", "mean"], [1198, 1, 1, "", "median"], [1199, 1, 1, "", "min"], [1200, 1, 1, "", "mode"], [1201, 1, 1, "", "n_chunks"], [1202, 1, 1, "", "n_unique"], [1203, 2, 1, "", "name"], [1204, 1, 1, "", "nan_max"], [1205, 1, 1, "", "nan_min"], [1206, 1, 1, "", "ne"], [1207, 1, 1, "", "ne_missing"], [1208, 1, 1, "", "new_from_index"], [1209, 1, 1, "", "not_"], [1210, 1, 1, "", "null_count"], [1211, 1, 1, "", "pct_change"], [1212, 1, 1, "", "peak_max"], [1213, 1, 1, "", "peak_min"], [1347, 2, 1, "", "plot"], [1214, 1, 1, "", "pow"], [1215, 1, 1, "", "product"], [1216, 1, 1, "", "qcut"], [1217, 1, 1, "", "quantile"], [1218, 1, 1, "", "rank"], [1219, 1, 1, "", "rechunk"], [1220, 1, 1, "", "reinterpret"], [1221, 1, 1, "", "rename"], [1222, 1, 1, "", "replace"], [1223, 1, 1, "", "replace_strict"], [1224, 1, 1, "", "reshape"], [1225, 1, 1, "", "reverse"], [1226, 1, 1, "", "rle"], [1227, 1, 1, "", "rle_id"], [1228, 1, 1, "", "rolling_map"], [1229, 1, 1, "", "rolling_max"], [1230, 1, 1, "", "rolling_mean"], [1231, 1, 1, "", "rolling_median"], [1232, 1, 1, "", "rolling_min"], [1233, 1, 1, "", "rolling_quantile"], [1234, 1, 1, "", "rolling_skew"], [1235, 1, 1, "", "rolling_std"], [1236, 1, 1, "", "rolling_sum"], [1237, 1, 1, "", "rolling_var"], [1238, 1, 1, "", "round"], [1239, 1, 1, "", "round_sig_figs"], [1240, 1, 1, "", "sample"], [1241, 1, 1, "", "scatter"], [1242, 1, 1, "", "search_sorted"], [1243, 1, 1, "", "set"], [1244, 1, 1, "", "set_sorted"], [1245, 2, 1, "", "shape"], [1246, 1, 1, "", "shift"], [1247, 1, 1, "", "shrink_dtype"], [1248, 1, 1, "", "shrink_to_fit"], [1249, 1, 1, "", "shuffle"], [1250, 1, 1, "", "sign"], [1251, 1, 1, "", "sin"], [1252, 1, 1, "", "sinh"], [1253, 1, 1, "", "skew"], [1254, 1, 1, "", "slice"], [1255, 1, 1, "", "sort"], [1256, 1, 1, "", "sqrt"], [1257, 1, 1, "", "std"], [1313, 1, 1, "", "sum"], [1314, 1, 1, "", "tail"], [1315, 1, 1, "", "tan"], [1316, 1, 1, "", "tanh"], [1317, 1, 1, "", "to_arrow"], [1318, 1, 1, "", "to_dummies"], [1319, 1, 1, "", "to_frame"], [1320, 1, 1, "", "to_init_repr"], [1321, 1, 1, "", "to_jax"], [1322, 1, 1, "", "to_list"], [1323, 1, 1, "", "to_numpy"], [1324, 1, 1, "", "to_pandas"], [1325, 1, 1, "", "to_physical"], [1326, 1, 1, "", "to_torch"], [1327, 1, 1, "", "top_k"], [1328, 1, 1, "", "unique"], [1329, 1, 1, "", "unique_counts"], [1330, 1, 1, "", "upper_bound"], [1331, 1, 1, "", "value_counts"], [1332, 1, 1, "", "var"], [1333, 1, 1, "", "zip_with"]], "polars.Series.arr": [[975, 1, 1, "", "all"], [976, 1, 1, "", "any"], [977, 1, 1, "", "arg_max"], [978, 1, 1, "", "arg_min"], [979, 1, 1, "", "contains"], [980, 1, 1, "", "count_matches"], [981, 1, 1, "", "explode"], [982, 1, 1, "", "first"], [983, 1, 1, "", "get"], [984, 1, 1, "", "join"], [985, 1, 1, "", "last"], [986, 1, 1, "", "max"], [987, 1, 1, "", "median"], [988, 1, 1, "", "min"], [989, 1, 1, "", "n_unique"], [990, 1, 1, "", "reverse"], [991, 1, 1, "", "shift"], [992, 1, 1, "", "sort"], [993, 1, 1, "", "std"], [994, 1, 1, "", "sum"], [995, 1, 1, "", "to_list"], [996, 1, 1, "", "to_struct"], [997, 1, 1, "", "unique"], [998, 1, 1, "", "var"]], "polars.Series.bin": [[999, 1, 1, "", "contains"], [1000, 1, 1, "", "decode"], [1001, 1, 1, "", "encode"], [1002, 1, 1, "", "ends_with"], [1003, 1, 1, "", "reinterpret"], [1004, 1, 1, "", "size"], [1005, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1017, 1, 1, "", "ends_with"], [1018, 1, 1, "", "get_categories"], [1019, 1, 1, "", "is_local"], [1020, 1, 1, "", "len_bytes"], [1021, 1, 1, "", "len_chars"], [1022, 1, 1, "", "starts_with"], [1023, 1, 1, "", "to_local"], [1024, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1047, 1, 1, "", "add_business_days"], [1048, 1, 1, "", "base_utc_offset"], [1049, 1, 1, "", "cast_time_unit"], [1050, 1, 1, "", "century"], [1051, 1, 1, "", "combine"], [1052, 1, 1, "", "convert_time_zone"], [1053, 1, 1, "", "date"], [1054, 1, 1, "", "datetime"], [1055, 1, 1, "", "day"], [1056, 1, 1, "", "dst_offset"], [1057, 1, 1, "", "epoch"], [1058, 1, 1, "", "hour"], [1059, 1, 1, "", "is_leap_year"], [1060, 1, 1, "", "iso_year"], [1061, 1, 1, "", "max"], [1062, 1, 1, "", "mean"], [1063, 1, 1, "", "median"], [1064, 1, 1, "", "microsecond"], [1065, 1, 1, "", "millennium"], [1066, 1, 1, "", "millisecond"], [1067, 1, 1, "", "min"], [1068, 1, 1, "", "minute"], [1069, 1, 1, "", "month"], [1070, 1, 1, "", "month_end"], [1071, 1, 1, "", "month_start"], [1072, 1, 1, "", "nanosecond"], [1073, 1, 1, "", "offset_by"], [1074, 1, 1, "", "ordinal_day"], [1075, 1, 1, "", "quarter"], [1076, 1, 1, "", "replace"], [1077, 1, 1, "", "replace_time_zone"], [1078, 1, 1, "", "round"], [1079, 1, 1, "", "second"], [1080, 1, 1, "", "strftime"], [1081, 1, 1, "", "time"], [1082, 1, 1, "", "timestamp"], [1083, 1, 1, "", "to_string"], [1084, 1, 1, "", "total_days"], [1085, 1, 1, "", "total_hours"], [1086, 1, 1, "", "total_microseconds"], [1087, 1, 1, "", "total_milliseconds"], [1088, 1, 1, "", "total_minutes"], [1089, 1, 1, "", "total_nanoseconds"], [1090, 1, 1, "", "total_seconds"], [1091, 1, 1, "", "truncate"], [1092, 1, 1, "", "week"], [1093, 1, 1, "", "weekday"], [1094, 1, 1, "", "with_time_unit"], [1095, 1, 1, "", "year"]], "polars.Series.list": [[1150, 1, 1, "", "all"], [1151, 1, 1, "", "any"], [1152, 1, 1, "", "arg_max"], [1153, 1, 1, "", "arg_min"], [1154, 1, 1, "", "concat"], [1155, 1, 1, "", "contains"], [1156, 1, 1, "", "count_matches"], [1157, 1, 1, "", "diff"], [1158, 1, 1, "", "drop_nulls"], [1159, 1, 1, "", "eval"], [1160, 1, 1, "", "explode"], [1161, 1, 1, "", "first"], [1162, 1, 1, "", "gather"], [1163, 1, 1, "", "gather_every"], [1164, 1, 1, "", "get"], [1165, 1, 1, "", "head"], [1166, 1, 1, "", "join"], [1167, 1, 1, "", "last"], [1168, 1, 1, "", "len"], [1169, 1, 1, "", "max"], [1170, 1, 1, "", "mean"], [1171, 1, 1, "", "median"], [1172, 1, 1, "", "min"], [1173, 1, 1, "", "n_unique"], [1174, 1, 1, "", "reverse"], [1175, 1, 1, "", "sample"], [1176, 1, 1, "", "set_difference"], [1177, 1, 1, "", "set_intersection"], [1178, 1, 1, "", "set_symmetric_difference"], [1179, 1, 1, "", "set_union"], [1180, 1, 1, "", "shift"], [1181, 1, 1, "", "slice"], [1182, 1, 1, "", "sort"], [1183, 1, 1, "", "std"], [1184, 1, 1, "", "sum"], [1185, 1, 1, "", "tail"], [1186, 1, 1, "", "to_array"], [1187, 1, 1, "", "to_struct"], [1188, 1, 1, "", "unique"], [1189, 1, 1, "", "var"]], "polars.Series.str": [[1258, 1, 1, "", "concat"], [1259, 1, 1, "", "contains"], [1260, 1, 1, "", "contains_any"], [1261, 1, 1, "", "count_matches"], [1262, 1, 1, "", "decode"], [1263, 1, 1, "", "encode"], [1264, 1, 1, "", "ends_with"], [1265, 1, 1, "", "escape_regex"], [1266, 1, 1, "", "explode"], [1267, 1, 1, "", "extract"], [1268, 1, 1, "", "extract_all"], [1269, 1, 1, "", "extract_groups"], [1270, 1, 1, "", "extract_many"], [1271, 1, 1, "", "find"], [1272, 1, 1, "", "find_many"], [1273, 1, 1, "", "head"], [1274, 1, 1, "", "join"], [1275, 1, 1, "", "json_decode"], [1276, 1, 1, "", "json_path_match"], [1277, 1, 1, "", "len_bytes"], [1278, 1, 1, "", "len_chars"], [1279, 1, 1, "", "normalize"], [1280, 1, 1, "", "pad_end"], [1281, 1, 1, "", "pad_start"], [1282, 1, 1, "", "replace"], [1283, 1, 1, "", "replace_all"], [1284, 1, 1, "", "replace_many"], [1285, 1, 1, "", "reverse"], [1286, 1, 1, "", "slice"], [1287, 1, 1, "", "split"], [1288, 1, 1, "", "split_exact"], [1289, 1, 1, "", "splitn"], [1290, 1, 1, "", "starts_with"], [1291, 1, 1, "", "strip_chars"], [1292, 1, 1, "", "strip_chars_end"], [1293, 1, 1, "", "strip_chars_start"], [1294, 1, 1, "", "strip_prefix"], [1295, 1, 1, "", "strip_suffix"], [1296, 1, 1, "", "strptime"], [1297, 1, 1, "", "tail"], [1298, 1, 1, "", "to_date"], [1299, 1, 1, "", "to_datetime"], [1300, 1, 1, "", "to_decimal"], [1301, 1, 1, "", "to_integer"], [1302, 1, 1, "", "to_lowercase"], [1303, 1, 1, "", "to_time"], [1304, 1, 1, "", "to_titlecase"], [1305, 1, 1, "", "to_uppercase"], [1306, 1, 1, "", "zfill"]], "polars.Series.struct": [[1307, 1, 1, "", "field"], [1308, 3, 1, "", "fields"], [1309, 1, 1, "", "json_encode"], [1310, 1, 1, "", "rename_fields"], [1311, 3, 1, "", "schema"], [1312, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.api": [[53, 4, 1, "", "register_dataframe_namespace"], [54, 4, 1, "", "register_expr_namespace"], [55, 4, 1, "", "register_lazyframe_namespace"], [56, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[184, 0, 1, "", "CatalogInfo"], [185, 0, 1, "", "ColumnInfo"], [186, 5, 1, "", "DataSourceFormat"], [187, 0, 1, "", "NamespaceInfo"], [188, 0, 1, "", "TableInfo"], [190, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[184, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[185, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[187, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[188, 1, 1, "", "__init__"], [189, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[318, 1, 1, "", "__iter__"], [319, 1, 1, "", "agg"], [320, 1, 1, "", "all"], [321, 1, 1, "", "count"], [322, 1, 1, "", "first"], [323, 1, 1, "", "head"], [324, 1, 1, "", "last"], [325, 1, 1, "", "len"], [326, 1, 1, "", "map_groups"], [327, 1, 1, "", "max"], [328, 1, 1, "", "mean"], [329, 1, 1, "", "median"], [330, 1, 1, "", "min"], [331, 1, 1, "", "n_unique"], [332, 1, 1, "", "quantile"], [333, 1, 1, "", "sum"], [334, 1, 1, "", "tail"]], "polars.datatypes": [[61, 0, 1, "", "Array"], [62, 0, 1, "", "Binary"], [63, 0, 1, "", "Boolean"], [64, 0, 1, "", "Categorical"], [65, 0, 1, "", "DataType"], [66, 0, 1, "", "Date"], [67, 0, 1, "", "Datetime"], [68, 0, 1, "", "Decimal"], [69, 0, 1, "", "Duration"], [70, 0, 1, "", "Enum"], [71, 0, 1, "", "Field"], [72, 0, 1, "", "Float32"], [73, 0, 1, "", "Float64"], [74, 0, 1, "", "Int128"], [75, 0, 1, "", "Int16"], [76, 0, 1, "", "Int32"], [77, 0, 1, "", "Int64"], [78, 0, 1, "", "Int8"], [79, 0, 1, "", "List"], [80, 0, 1, "", "Null"], [81, 0, 1, "", "Object"], [82, 0, 1, "", "String"], [83, 0, 1, "", "Struct"], [84, 0, 1, "", "Time"], [85, 0, 1, "", "UInt16"], [86, 0, 1, "", "UInt32"], [87, 0, 1, "", "UInt64"], [88, 0, 1, "", "UInt8"], [89, 0, 1, "", "Unknown"], [90, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[61, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[62, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[63, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[64, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[78, 1, 1, "", "__init__"]], "polars.datatypes.List": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[81, 1, 1, "", "__init__"]], "polars.datatypes.String": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[84, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[85, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[86, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[87, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[89, 1, 1, "", "__init__"]], "polars.exceptions": [[94, 6, 1, "", "CategoricalRemappingWarning"], [95, 6, 1, "", "ChronoFormatWarning"], [96, 6, 1, "", "ColumnNotFoundError"], [97, 6, 1, "", "ComputeError"], [98, 6, 1, "", "CustomUFuncWarning"], [99, 6, 1, "", "DataOrientationWarning"], [100, 6, 1, "", "DuplicateError"], [101, 6, 1, "", "InvalidOperationError"], [102, 6, 1, "", "MapWithoutReturnDtypeWarning"], [103, 6, 1, "", "ModuleUpgradeRequiredError"], [104, 6, 1, "", "NoDataError"], [105, 6, 1, "", "NoRowsReturnedError"], [106, 6, 1, "", "OutOfBoundsError"], [107, 6, 1, "", "PanicException"], [108, 6, 1, "", "ParameterCollisionError"], [109, 6, 1, "", "PerformanceWarning"], [110, 6, 1, "", "PolarsError"], [111, 6, 1, "", "PolarsInefficientMapWarning"], [112, 6, 1, "", "PolarsWarning"], [113, 6, 1, "", "RowsError"], [114, 6, 1, "", "SQLInterfaceError"], [115, 6, 1, "", "SQLSyntaxError"], [116, 6, 1, "", "SchemaError"], [117, 6, 1, "", "SchemaFieldNotFoundError"], [118, 6, 1, "", "ShapeError"], [119, 6, 1, "", "StringCacheMismatchError"], [120, 6, 1, "", "StructFieldNotFoundError"], [121, 6, 1, "", "TooManyRowsReturnedError"], [122, 6, 1, "", "UnstableWarning"], [123, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[133, 1, 1, "", "next_batches"]], "polars.io.plugins": [[134, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[922, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[922, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[923, 1, 1, "", "agg"], [924, 1, 1, "", "all"], [925, 1, 1, "", "count"], [926, 1, 1, "", "first"], [927, 1, 1, "", "head"], [928, 1, 1, "", "last"], [929, 1, 1, "", "len"], [930, 1, 1, "", "map_groups"], [931, 1, 1, "", "max"], [932, 1, 1, "", "mean"], [933, 1, 1, "", "median"], [934, 1, 1, "", "min"], [935, 1, 1, "", "n_unique"], [936, 1, 1, "", "quantile"], [937, 1, 1, "", "sum"], [938, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[939, 1, 1, "", "cancel"], [940, 1, 1, "", "fetch"], [941, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[136, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[953, 4, 1, "", "all"], [953, 4, 1, "", "alpha"], [953, 4, 1, "", "alphanumeric"], [953, 4, 1, "", "binary"], [953, 4, 1, "", "boolean"], [953, 4, 1, "", "by_dtype"], [953, 4, 1, "", "by_index"], [953, 4, 1, "", "by_name"], [953, 4, 1, "", "categorical"], [953, 4, 1, "", "contains"], [953, 4, 1, "", "date"], [953, 4, 1, "", "datetime"], [953, 4, 1, "", "decimal"], [953, 4, 1, "", "digit"], [953, 4, 1, "", "duration"], [953, 4, 1, "", "ends_with"], [953, 4, 1, "", "exclude"], [953, 4, 1, "", "expand_selector"], [953, 4, 1, "", "first"], [953, 4, 1, "", "float"], [953, 4, 1, "", "integer"], [953, 4, 1, "", "is_selector"], [953, 4, 1, "", "last"], [953, 4, 1, "", "matches"], [953, 4, 1, "", "numeric"], [953, 4, 1, "", "signed_integer"], [953, 4, 1, "", "starts_with"], [953, 4, 1, "", "string"], [953, 4, 1, "", "temporal"], [953, 4, 1, "", "time"], [953, 4, 1, "", "unsigned_integer"]], "polars.testing": [[162, 4, 1, "", "assert_frame_equal"], [163, 4, 1, "", "assert_frame_not_equal"], [164, 4, 1, "", "assert_series_equal"], [165, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[166, 0, 1, "", "column"], [167, 4, 1, "", "columns"], [168, 4, 1, "", "create_list_strategy"], [169, 4, 1, "", "dataframes"], [170, 4, 1, "", "dtypes"], [171, 4, 1, "", "lists"], [172, 4, 1, "", "load_profile"], [173, 4, 1, "", "series"], [174, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[166, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 11, 37, 38, 39, 40, 46, 47, 56, 61, 71, 83, 93, 95, 101, 124, 131, 134, 139, 140, 141, 142, 144, 145, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 173, 200, 201, 212, 213, 216, 221, 224, 229, 230, 235, 241, 244, 245, 255, 262, 264, 268, 270, 272, 275, 278, 279, 286, 295, 298, 303, 305, 306, 307, 308, 309, 314, 315, 340, 377, 410, 442, 447, 466, 469, 489, 495, 499, 512, 528, 549, 578, 579, 591, 600, 605, 612, 613, 620, 621, 632, 639, 673, 677, 685, 686, 687, 689, 691, 700, 701, 704, 705, 707, 714, 715, 716, 717, 721, 725, 727, 729, 737, 746, 747, 748, 749, 754, 761, 764, 767, 768, 777, 778, 780, 781, 787, 792, 793, 794, 795, 797, 799, 800, 802, 809, 811, 813, 814, 815, 821, 827, 831, 847, 849, 860, 861, 870, 871, 875, 876, 885, 893, 898, 899, 905, 910, 911, 912, 913, 914, 917, 918, 930, 947, 952, 953, 957, 958, 959, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1061, 1062, 1063, 1065, 1066, 1067, 1070, 1071, 1074, 1076, 1078, 1079, 1080, 1083, 1091, 1093, 1094, 1095, 1096, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1342, 1347, 1351, 1355, 1358, 1365, 1366], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 46, 50, 52, 53, 54, 56, 60, 61, 68, 79, 125, 135, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 161, 166, 167, 168, 169, 170, 171, 173, 176, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 235, 236, 240, 242, 243, 244, 247, 249, 251, 252, 253, 254, 255, 258, 259, 260, 261, 264, 265, 266, 268, 270, 272, 274, 275, 276, 277, 278, 285, 286, 287, 288, 290, 295, 296, 297, 298, 299, 300, 302, 304, 308, 310, 311, 314, 316, 317, 319, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 340, 343, 344, 348, 350, 351, 353, 357, 358, 359, 360, 361, 362, 365, 366, 367, 370, 371, 373, 376, 386, 389, 391, 398, 400, 405, 408, 411, 417, 418, 419, 420, 421, 422, 429, 430, 431, 435, 436, 437, 443, 444, 448, 451, 453, 454, 458, 462, 465, 467, 469, 472, 473, 475, 476, 480, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 498, 499, 501, 503, 504, 506, 508, 510, 514, 515, 518, 521, 523, 524, 525, 526, 528, 530, 535, 536, 539, 542, 545, 546, 547, 553, 554, 566, 570, 572, 573, 574, 575, 577, 578, 580, 581, 582, 586, 591, 594, 597, 598, 599, 601, 603, 612, 613, 614, 615, 616, 618, 619, 621, 624, 625, 627, 628, 629, 630, 634, 635, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 667, 668, 669, 670, 674, 675, 676, 679, 684, 685, 686, 689, 690, 729, 730, 731, 733, 734, 735, 738, 743, 744, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 765, 772, 776, 779, 785, 786, 788, 789, 790, 793, 796, 797, 798, 802, 804, 805, 809, 810, 817, 818, 819, 820, 821, 822, 827, 831, 846, 849, 850, 851, 854, 856, 857, 859, 860, 862, 863, 865, 866, 867, 869, 870, 871, 874, 875, 879, 881, 884, 885, 888, 890, 891, 893, 897, 898, 903, 905, 906, 907, 915, 917, 919, 920, 921, 923, 925, 926, 928, 930, 931, 932, 933, 934, 935, 936, 937, 947, 952, 953, 957, 964, 965, 966, 967, 968, 969, 970, 972, 974, 977, 983, 993, 996, 998, 1004, 1016, 1023, 1025, 1026, 1028, 1031, 1032, 1033, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1054, 1058, 1062, 1063, 1064, 1066, 1068, 1072, 1076, 1079, 1083, 1086, 1087, 1089, 1090, 1094, 1097, 1102, 1103, 1104, 1105, 1110, 1115, 1117, 1122, 1123, 1125, 1128, 1129, 1133, 1136, 1138, 1139, 1140, 1141, 1144, 1145, 1152, 1153, 1156, 1159, 1162, 1163, 1164, 1170, 1171, 1183, 1187, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1204, 1205, 1211, 1214, 1216, 1217, 1218, 1222, 1223, 1227, 1228, 1230, 1231, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1261, 1266, 1267, 1268, 1271, 1272, 1276, 1282, 1315, 1316, 1318, 1321, 1323, 1324, 1325, 1326, 1330, 1332, 1342, 1347, 1351, 1357, 1359, 1360, 1361, 1364, 1367, 1368, 1370, 1372, 1373], "00": [27, 40, 67, 201, 208, 230, 310, 340, 438, 439, 442, 446, 456, 457, 459, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 643, 645, 647, 649, 651, 654, 656, 658, 714, 717, 721, 772, 773, 774, 775, 789, 817, 818, 819, 831, 849, 857, 871, 947, 953, 1048, 1049, 1052, 1053, 1054, 1056, 1057, 1058, 1063, 1064, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1282, 1296, 1299, 1303, 1365], "000": [9, 10, 27, 40, 340, 1282, 1373], "0000": [302, 340, 1326, 1342, 1373], "000000": [394, 395, 469, 680, 1000, 1001, 1262], "00000001": [11, 745, 831], "00000010": [745, 831], "00000011": [745, 831], "00000100": [745, 831], "00001000": [745, 831], "00001010": [745, 831], "00001011": [745, 831], "0000e": 11, "0000ff": [394, 395, 680, 1000, 1001, 1262], "0001": 469, "000100": 469, "000101": 469, "0005": 953, "00050": 953, "000800": 1083, "001": [54, 724, 775, 1086, 1087, 1089, 1306], "002": [775, 1086, 1087, 1089], "005": [1097, 1342], "00prefix": 953, "00z": [714, 717, 1296, 1299], "01": [28, 52, 66, 67, 169, 201, 208, 228, 230, 245, 272, 310, 340, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 714, 716, 717, 721, 756, 769, 770, 771, 772, 773, 774, 775, 789, 831, 849, 857, 871, 876, 896, 947, 953, 1047, 1049, 1051, 1052, 1053, 1054, 1057, 1058, 1063, 1064, 1068, 1070, 1071, 1072, 1073, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1296, 1298, 1299, 1303, 1365, 1368], "010": [9, 719, 1301], "01000": 28, "01000010": [745, 831], "01000110": [745, 831], "012": [660, 697, 831, 1239, 1279, 1342], "0123": [724, 1306], "01234": [660, 831, 1239, 1342], "012345": 1083, "015625": [1214, 1342], "01\u00b2": [697, 1279], "02": [52, 201, 208, 228, 230, 272, 310, 340, 437, 439, 441, 447, 456, 457, 459, 463, 468, 469, 471, 474, 476, 480, 640, 643, 645, 647, 649, 651, 654, 656, 658, 659, 714, 716, 717, 721, 756, 769, 770, 771, 772, 773, 774, 775, 789, 831, 849, 857, 871, 896, 947, 953, 996, 1049, 1051, 1053, 1054, 1057, 1058, 1063, 1064, 1068, 1070, 1071, 1072, 1076, 1077, 1078, 1081, 1082, 1085, 1088, 1090, 1091, 1187, 1296, 1298, 1299, 1303, 1365, 1366], "03": [52, 131, 139, 201, 230, 245, 272, 310, 340, 439, 441, 442, 447, 456, 457, 459, 462, 463, 464, 466, 468, 469, 470, 471, 474, 476, 477, 480, 486, 499, 640, 643, 645, 647, 649, 651, 654, 656, 658, 716, 721, 769, 770, 771, 772, 773, 774, 775, 831, 849, 871, 876, 896, 947, 953, 1049, 1051, 1052, 1057, 1058, 1063, 1064, 1070, 1071, 1072, 1077, 1078, 1080, 1082, 1084, 1085, 1088, 1090, 1298, 1303], "037037": [1214, 1342], "04": [159, 201, 208, 230, 310, 340, 441, 442, 456, 457, 462, 463, 464, 466, 470, 471, 474, 476, 480, 643, 645, 647, 649, 651, 654, 656, 658, 714, 756, 769, 772, 773, 775, 831, 849, 857, 871, 947, 953, 1052, 1064, 1068, 1070, 1071, 1072, 1077, 1080, 1084, 1085, 1088, 1090, 1094, 1296, 1365], "047198": 1367, "05": [16, 159, 162, 163, 164, 165, 169, 201, 208, 310, 340, 437, 440, 441, 442, 443, 444, 448, 451, 452, 453, 454, 456, 457, 458, 463, 465, 466, 467, 469, 470, 756, 769, 770, 772, 773, 849, 857, 947, 953, 1051, 1052, 1053, 1054, 1077, 1078, 1080, 1081, 1083, 1084, 1091, 1365, 1366, 1368], "050545": 131, "0522623626787952": [1145, 1342], "0545": [1053, 1054, 1081], "05t10": 1083, "06": [169, 201, 310, 340, 437, 441, 455, 461, 463, 464, 465, 477, 478, 769, 772, 789, 849, 947, 953, 1047, 1077, 1078, 1083, 1091], "060": [443, 444, 448, 451, 453, 454, 458, 465, 467], "0601749420166": [216, 340], "06293300616044681": [1097, 1342], "07": [16, 139, 169, 208, 340, 437, 440, 441, 452, 463, 464, 469, 477, 714, 769, 770, 772, 773, 781, 857, 947, 953, 1047, 1051, 1077, 1083, 1296, 1365, 1368], "071068": [208, 340, 857, 947], "08": [139, 162, 163, 164, 165, 208, 245, 272, 287, 340, 437, 441, 456, 457, 464, 469, 640, 714, 773, 775, 789, 831, 857, 876, 896, 947, 953, 1047, 1078, 1091, 1296, 1365, 1366], "085537": [1106, 1342], "09": [52, 139, 208, 272, 340, 437, 441, 456, 457, 469, 620, 640, 718, 769, 770, 772, 819, 831, 857, 896, 947, 953, 1047, 1300], "090909": [621, 831], "094395": 1367, "098612": [575, 831, 1190, 1192, 1342, 1364], "0999": [440, 452], "0_": [40, 340], "0m": [446, 1056], "0x11bc0ad80": 952, "0\u00b5": 469, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 50, 52, 53, 54, 55, 56, 60, 61, 79, 83, 96, 99, 100, 101, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 140, 143, 144, 145, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 169, 173, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 398, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 587, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 700, 701, 702, 706, 707, 708, 709, 710, 711, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 827, 831, 846, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 953, 957, 958, 959, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1004, 1015, 1016, 1020, 1021, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1267, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1282, 1283, 1284, 1288, 1289, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342, 1347, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373], "10": [13, 16, 17, 27, 35, 37, 39, 40, 42, 43, 46, 50, 52, 60, 131, 139, 140, 142, 153, 161, 203, 208, 212, 218, 227, 228, 230, 232, 234, 235, 236, 241, 245, 248, 259, 263, 265, 270, 272, 278, 287, 291, 314, 319, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 351, 355, 363, 364, 365, 367, 419, 425, 428, 433, 437, 438, 440, 441, 443, 444, 446, 448, 451, 452, 453, 454, 456, 457, 458, 462, 463, 464, 465, 467, 469, 477, 480, 486, 507, 508, 509, 514, 520, 532, 540, 546, 548, 554, 564, 566, 568, 572, 574, 590, 592, 603, 618, 620, 621, 624, 634, 635, 640, 671, 719, 729, 732, 745, 756, 757, 765, 770, 772, 773, 776, 779, 781, 783, 791, 792, 816, 819, 831, 852, 853, 857, 860, 871, 872, 874, 876, 880, 889, 890, 896, 898, 908, 909, 917, 923, 926, 928, 931, 932, 933, 934, 935, 936, 937, 947, 953, 1029, 1043, 1047, 1048, 1050, 1051, 1056, 1065, 1077, 1083, 1091, 1094, 1097, 1103, 1124, 1135, 1149, 1157, 1165, 1171, 1181, 1183, 1185, 1189, 1191, 1195, 1211, 1223, 1241, 1243, 1301, 1314, 1321, 1323, 1326, 1342, 1351, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1368, 1373], "100": [10, 17, 27, 40, 127, 130, 135, 139, 140, 141, 144, 148, 149, 150, 153, 157, 246, 264, 283, 340, 469, 634, 635, 664, 678, 688, 690, 693, 702, 718, 774, 831, 877, 902, 947, 953, 1099, 1191, 1207, 1222, 1223, 1229, 1230, 1232, 1246, 1260, 1272, 1275, 1284, 1300, 1342, 1362, 1373], "1000": [141, 216, 296, 317, 340, 356, 831, 921, 947, 1086, 1191, 1320, 1342, 1373], "10000": [139, 243, 340], "100000": [10, 27], "1000000": [11, 1089], "1001": [317, 340, 921, 947], "1002": [317, 340, 921, 947], "10047419486152048166": [231, 340], "1005": [356, 831], "100_000": [809, 881, 947], "100\u00b5": 469, "101": [9, 27, 246, 340, 441, 469, 719, 877, 947, 953, 1301, 1373], "101000": 441, "10101": [27, 1368], "1010101": 9, "101514": [208, 340, 857, 947], "102": [246, 340, 877, 947], "1024": [37, 46, 47, 50, 139, 140, 141, 149, 157, 340, 398, 947, 1004], "1040361802642726": [1145, 1342], "107149": 1367, "10734580197236529959": [1123, 1342], "1073741824": [665, 831], "10783150408545073287": [231, 340], "107_930_000": 1351, "10_000": [40, 340], "10i": [230, 340, 871, 947], "10m": [464, 477, 1078, 1091], "10t00": 469, "11": [10, 16, 46, 50, 161, 169, 199, 208, 245, 272, 340, 351, 456, 457, 459, 464, 477, 501, 514, 546, 597, 621, 630, 640, 641, 655, 671, 745, 789, 814, 819, 827, 831, 846, 852, 853, 857, 872, 876, 880, 890, 896, 909, 947, 953, 1073, 1078, 1091, 1195, 1228, 1342, 1360], "110": [212, 340, 702, 719, 860, 947, 1301], "1101441246220388612": [508, 831], "111": [10, 1362], "11111": 1079, "111110": 1079, "11111001": [745, 831], "11111010": [745, 831], "11111111": 10, "112": [665, 831, 1373], "11330": 168, "1152921504606846976": [1220, 1342], "116": 168, "11638928888656214026": [508, 831], "118034": [907, 947], "11aa": 1365, "11aabb": 1365, "11h": [438, 1048], "12": [26, 40, 52, 131, 139, 161, 169, 208, 230, 241, 245, 246, 272, 287, 310, 340, 351, 427, 438, 440, 441, 445, 452, 455, 456, 457, 459, 460, 461, 462, 464, 469, 477, 478, 479, 486, 514, 546, 578, 594, 621, 629, 640, 655, 665, 679, 700, 718, 766, 769, 772, 773, 774, 789, 792, 817, 818, 819, 831, 857, 871, 872, 876, 877, 880, 896, 903, 909, 947, 953, 1048, 1050, 1051, 1062, 1063, 1065, 1069, 1076, 1078, 1083, 1091, 1103, 1195, 1238, 1261, 1283, 1300, 1342, 1364, 1365, 1366, 1368, 1370, 1373], "120": [246, 340, 775, 877, 947, 1367], "1200": [660, 831], "120134": [718, 1300], "121": 1373, "123": [9, 587, 679, 686, 701, 724, 821, 953, 1261, 1268, 1306, 1319, 1342], "123000": 953, "1232e": [1031, 1033, 1342], "1234": [27, 660, 831], "12345": [781, 1026, 1083, 1115, 1238, 1342], "1234500": 953, "123456": [9, 953], "1234567": 27, "123456780": 131, "12346": 781, "123465": 953, "123a123": 701, "123abc": [700, 1282, 1283], "125": [1, 40, 56, 340, 349, 625, 810, 831, 906, 947, 1211, 1214, 1342], "1252": 139, "127": [1330, 1342, 1361], "128": [54, 68, 74, 1211, 1342], "129": [665, 831], "13": [202, 203, 208, 219, 220, 227, 235, 246, 247, 259, 272, 314, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 351, 437, 443, 444, 448, 451, 453, 454, 458, 465, 467, 590, 592, 640, 718, 759, 765, 768, 772, 779, 815, 817, 820, 831, 850, 851, 857, 865, 866, 877, 879, 896, 917, 926, 928, 931, 932, 933, 934, 935, 936, 937, 947, 1047, 1078, 1091, 1092, 1195, 1300, 1342, 1361], "130": [246, 340, 877, 947], "13382926553367784577": [508, 831], "134821952": 1351, "134_821_952": 1351, "135": [753, 1367], "13614470193936745724": [508, 831], "13756996518000038261": [1123, 1342], "13d": 469, "13h": [438, 1048], "14": [39, 161, 208, 246, 249, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 438, 443, 444, 448, 451, 453, 454, 458, 465, 467, 469, 514, 587, 630, 772, 817, 818, 831, 857, 877, 926, 928, 931, 932, 933, 934, 935, 936, 937, 947, 953, 1048, 1078, 1083], "140": [246, 340, 877, 947], "141592653589793": 10, "141593": [629, 831, 964, 1342, 1364, 1367], "142857": [1211, 1342], "143": [718, 1300, 1373], "1433": [38, 340], "1436e16": 169, "1438741209321515184": [231, 340], "1440": [474, 1088], "1443e235": 1373, "149": 1373, "14d": 953, "14h": 469, "15": [10, 40, 161, 208, 230, 235, 246, 249, 272, 340, 429, 433, 457, 462, 464, 469, 477, 486, 624, 640, 655, 697, 766, 772, 817, 818, 831, 857, 871, 877, 896, 947, 953, 1040, 1043, 1078, 1083, 1091, 1103, 1279, 1342, 1361, 1365], "150": [246, 340, 877, 947, 1230, 1342], "1500": [161, 172], "15000": [243, 340], "153061": [528, 831], "155": 135, "15836": 169, "15_000": [243, 340], "16": [1, 40, 54, 75, 85, 161, 175, 208, 230, 246, 272, 314, 340, 425, 428, 462, 469, 514, 594, 601, 620, 625, 640, 719, 729, 765, 775, 776, 779, 789, 831, 857, 871, 877, 896, 903, 917, 947, 953, 1078, 1091, 1211, 1251, 1301, 1315, 1342, 1361, 1364, 1365, 1370], "160": [246, 340, 877, 947], "165": [1078, 1091], "1656e15": [1033, 1342], "166667": [1211, 1342], "1666683077": 781, "1666683099": 781, "167": 52, "16996": 1373, "16h": 953, "17": [161, 169, 216, 245, 319, 340, 486, 512, 620, 641, 659, 761, 781, 818, 831, 876, 923, 947, 1031, 1033, 1078, 1103, 1127, 1228, 1342, 1373], "170": [135, 246, 340, 877, 947], "17293822569102704640": [1220, 1342], "174": 1373, "175201": [669, 831, 1252, 1342], "1755e": [166, 169], "1764": 56, "17888890": [216, 340], "179": 1373, "17_500": [243, 340], "18": [38, 131, 144, 208, 256, 272, 340, 428, 464, 477, 480, 514, 603, 620, 640, 729, 831, 857, 886, 890, 896, 947, 953, 1083, 1094, 1359, 1370], "180": [135, 431, 629, 831, 1367], "1800": [462, 1076], "1844": 169, "18446744073709551614": [1220, 1342], "185_000_000": 1351, "186": 1373, "1875": [657, 831, 915, 947], "1897": [440, 452, 1050, 1065], "18d": 953, "19": [169, 245, 272, 340, 440, 464, 640, 645, 647, 649, 651, 718, 831, 876, 896, 947, 1050, 1078, 1091, 1300], "1920": 1365, "196": 1366, "1964": [890, 947], "1969": [1365, 1366], "1970": [66, 67, 159, 1351], "1972": 1351, "1976": [450, 481], "1977": [450, 481], "1978": [443, 444, 448, 450, 451, 453, 454, 458, 465, 467, 481, 1366], "1979": [450, 481], "1980": 469, "1985": [770, 773], "1990": [139, 1351], "1993": 1351, "1994": 1351, "1995": 139, "1998": [459, 1073], "1999": [287, 340, 459, 469, 953, 1073, 1083, 1368], "199992": [881, 947], "199994": [881, 947], "199996": [881, 947], "199998": [881, 947], "1_000_000": [216, 340, 1101, 1342], "1_234_500": 953, "1d": [230, 245, 272, 310, 340, 439, 459, 464, 469, 471, 474, 477, 480, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 775, 791, 818, 819, 831, 871, 876, 896, 947, 953, 1049, 1057, 1063, 1073, 1078, 1082, 1085, 1088, 1091, 1103, 1342], "1e": [11, 162, 163, 164, 165], "1e6": 11, "1h": [230, 245, 272, 310, 340, 446, 459, 464, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1056, 1058, 1073, 1078, 1091, 1103, 1342], "1i": [230, 272, 310, 340, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 831, 871, 896, 947, 1103, 1342], "1m": [230, 245, 272, 310, 340, 459, 464, 476, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1086, 1087, 1089, 1090, 1091, 1103, 1342], "1mo": [230, 245, 272, 310, 340, 442, 456, 457, 459, 463, 464, 470, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1052, 1069, 1070, 1071, 1073, 1074, 1075, 1077, 1078, 1084, 1091, 1092, 1103, 1342], "1n": [230, 245, 272, 310, 340, 459, 464, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091, 1103, 1342], "1q": [230, 245, 272, 310, 340, 459, 464, 477, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091], "1st_col": 953, "1u": [230, 245, 272, 310, 340, 459, 464, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091, 1103, 1342], "1w": [230, 245, 272, 310, 340, 459, 464, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091, 1103, 1342], "1w2d": [770, 771], "1y": [230, 245, 272, 310, 340, 459, 464, 477, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091], "1y2mo": [459, 1073], "1zy3": [679, 1261], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 60, 61, 79, 83, 96, 99, 101, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 142, 148, 149, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 171, 183, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 353, 355, 356, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 397, 398, 400, 405, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 449, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 594, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 805, 809, 810, 811, 812, 813, 814, 816, 819, 820, 821, 827, 831, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 957, 958, 959, 962, 965, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1004, 1015, 1021, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1051, 1053, 1054, 1056, 1058, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1071, 1075, 1076, 1077, 1078, 1081, 1091, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1261, 1267, 1269, 1271, 1272, 1273, 1275, 1276, 1278, 1279, 1282, 1283, 1288, 1289, 1291, 1292, 1293, 1296, 1297, 1299, 1300, 1301, 1302, 1305, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342, 1347, 1351, 1352, 1354, 1355, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373], "20": [38, 39, 40, 61, 139, 144, 161, 166, 167, 168, 169, 173, 176, 199, 208, 212, 218, 234, 235, 256, 263, 265, 270, 287, 297, 298, 302, 316, 321, 340, 363, 364, 365, 419, 433, 440, 443, 444, 448, 451, 452, 453, 454, 458, 464, 465, 467, 469, 477, 480, 501, 508, 514, 578, 586, 597, 624, 643, 645, 647, 649, 651, 654, 656, 658, 684, 729, 744, 772, 781, 791, 810, 818, 831, 846, 857, 860, 863, 886, 889, 906, 920, 925, 947, 953, 1043, 1050, 1054, 1065, 1078, 1083, 1091, 1094, 1106, 1122, 1222, 1266, 1321, 1323, 1326, 1342, 1358, 1359, 1362, 1368], "200": [472, 473, 475, 634, 635, 831, 953, 1099, 1207, 1222, 1223, 1229, 1230, 1232, 1342, 1362], "2000": [440, 449, 452, 456, 457, 459, 953, 1050, 1059, 1065, 1070, 1071, 1073, 1079, 1351, 1365], "200000": [472, 881, 947], "200000000": 475, "2001": [16, 439, 440, 445, 447, 449, 452, 455, 459, 460, 461, 464, 468, 477, 478, 479, 480, 643, 645, 647, 649, 651, 654, 656, 658, 714, 831, 953, 1049, 1050, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1072, 1073, 1074, 1075, 1078, 1082, 1091, 1092, 1093, 1094, 1095, 1296], "2002": [139, 449, 459, 1059, 1073, 1095], "2003": [459, 781, 1073], "2004": [459, 1073], "2005": [459, 1073], "2006": [459, 1073], "2008": 1351, "200m": [472, 473, 475], "2010": [287, 340, 469, 953], "2011": [438, 1048], "2012": [438, 1048, 1368], "2013": 1076, "2016": [245, 340, 876, 947], "2017": [245, 340, 876, 947], "2018": [245, 340, 463, 876, 947, 1077], "2019": [245, 340, 876, 947], "202": 1366, "2020": [143, 154, 201, 208, 228, 245, 272, 340, 343, 437, 442, 446, 463, 466, 469, 470, 471, 472, 473, 474, 475, 476, 486, 640, 714, 716, 717, 756, 831, 849, 857, 876, 896, 947, 953, 1047, 1052, 1056, 1077, 1080, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1103, 1296, 1298, 1299, 1342, 1366], "2021": [201, 208, 228, 230, 310, 340, 714, 791, 849, 857, 871, 947, 953, 1053, 1054, 1060, 1081, 1296, 1365], "2022": [52, 201, 208, 228, 340, 441, 464, 477, 714, 770, 771, 773, 774, 775, 781, 849, 857, 947, 953, 1051, 1060, 1078, 1091, 1296], "2023": [16, 40, 131, 161, 243, 340, 441, 775, 791, 953, 1051], "2024": [161, 437, 443, 444, 448, 451, 453, 454, 458, 462, 465, 467, 620, 756, 769, 770, 772, 773, 775, 831, 953, 1047, 1076, 1365, 1368], "2025": [437, 462, 756, 789, 953, 1047], "2026": 1366, "2030": 1365, "2031": 953, "2040": 469, "2047317070637311557": [231, 340], "2055938745": 131, "2065": [443, 444, 448, 451, 453, 454, 458, 465, 467], "2068": 169, "207": 1366, "2077": [287, 340, 469, 953, 1083, 1365, 1366], "2095": 169, "20_000": [40, 340], "20t08": 469, "20t18": 1083, "20word": 142, "21": [161, 208, 256, 289, 340, 440, 643, 645, 647, 649, 651, 654, 656, 658, 772, 781, 789, 831, 857, 886, 947, 953, 1050, 1359], "213": 1373, "2147483647": 1373, "2147483648": [1193, 1342], "21d": 953, "22": [46, 50, 161, 169, 340, 445, 460, 464, 477, 479, 480, 641, 643, 645, 647, 649, 651, 654, 656, 658, 714, 772, 827, 831, 947, 953, 1078, 1091, 1094, 1228, 1296, 1342, 1365, 1366, 1373], "221": 1373, "2246e": [1251, 1315, 1342], "225": [464, 477, 1367], "22500": 809, "22_000_000": 1351, "22_500": 809, "23": [10, 125, 169, 208, 230, 272, 302, 340, 441, 445, 448, 460, 462, 464, 469, 479, 640, 643, 645, 647, 649, 651, 654, 656, 658, 772, 775, 817, 818, 819, 831, 857, 871, 896, 906, 947, 953, 1051, 1058, 1076, 1326, 1342, 1372, 1373], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1351, "2337": [40, 340], "234": 27, "2345": 953, "23456789": 10, "235": 1373, "23h": 953, "24": [54, 161, 230, 245, 249, 272, 287, 310, 340, 427, 429, 445, 459, 460, 464, 471, 477, 479, 601, 640, 643, 645, 647, 649, 651, 654, 656, 658, 697, 770, 771, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 1040, 1073, 1078, 1085, 1091, 1144, 1342, 1365, 1372], "24030": 168, "249": [745, 831], "25": [1, 27, 40, 56, 131, 208, 212, 230, 245, 272, 297, 302, 310, 314, 340, 398, 433, 445, 446, 460, 464, 469, 477, 479, 486, 625, 627, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 738, 772, 773, 774, 775, 781, 789, 790, 793, 818, 819, 831, 857, 860, 871, 876, 883, 896, 915, 917, 947, 953, 1004, 1042, 1043, 1056, 1078, 1083, 1091, 1097, 1103, 1125, 1211, 1216, 1282, 1342, 1359, 1364, 1370, 1371], "250": [745, 831, 1230, 1342, 1362, 1373], "2500": [243, 302, 340], "254508": [486, 831, 1103, 1342], "255": 1373, "256": [249, 340, 398, 1004, 1211, 1342, 1364], "2560": 1004, "259921": [417, 831, 1025, 1342, 1364], "25_000_000": 1351, "26": [38, 40, 161, 166, 167, 168, 169, 173, 208, 340, 446, 478, 857, 947, 1056], "266667": [208, 340, 857, 947], "27": [1, 56, 297, 333, 340, 428, 455, 461, 478, 729, 831, 937, 953, 1214, 1321, 1342, 1372, 1373], "270": 1367, "28": [293, 298, 340, 349, 463, 480, 831, 1077, 1094, 1323, 1342, 1365, 1367, 1372, 1373], "283185": [629, 831], "2846": 340, "285714": [515, 831, 1129, 1342], "289962": 1367, "28_341_469": 1351, "29": [16, 161, 438, 456, 1048, 1070], "29096": 1373, "290994": [907, 947], "292432": [965, 1342], "292893": [486, 831, 1103, 1342], "2_color_scal": [40, 340], "2d": [272, 297, 298, 340, 459, 640, 791, 831, 896, 947, 1048, 1055], "2h": [643, 645, 647, 649, 651, 654, 656, 658, 831], "2i": [230, 340, 871, 947], "2m": [953, 1068], "2x": 168, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 35, 37, 39, 40, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56, 60, 61, 79, 96, 99, 101, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 142, 144, 148, 149, 150, 153, 159, 161, 162, 163, 164, 165, 168, 169, 170, 171, 173, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 349, 350, 351, 352, 354, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 599, 600, 601, 602, 603, 604, 606, 608, 610, 611, 614, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 672, 673, 674, 677, 678, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 716, 721, 722, 725, 726, 727, 728, 729, 730, 732, 736, 737, 740, 741, 742, 744, 745, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 958, 959, 962, 964, 966, 967, 968, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1074, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1089, 1091, 1093, 1094, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1148, 1149, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1262, 1263, 1264, 1267, 1268, 1269, 1272, 1273, 1274, 1275, 1277, 1278, 1282, 1283, 1284, 1285, 1286, 1290, 1297, 1298, 1303, 1304, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342, 1347, 1351, 1352, 1354, 1355, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373], "30": [40, 208, 218, 230, 234, 263, 270, 293, 314, 340, 343, 363, 364, 365, 433, 441, 443, 444, 448, 451, 453, 454, 455, 456, 458, 461, 463, 464, 465, 467, 469, 470, 477, 478, 508, 586, 665, 772, 789, 791, 817, 818, 831, 857, 863, 871, 889, 917, 947, 953, 1043, 1051, 1070, 1077, 1078, 1083, 1084, 1091, 1122, 1342, 1347, 1358, 1359, 1362, 1364, 1365, 1367, 1368, 1371, 1373], "300": [293, 340, 507, 618, 635, 831, 953, 1223, 1229, 1230, 1232, 1342, 1362], "3000": 953, "3002": [440, 452, 1050, 1065], "30103": [574, 831, 1364], "3022416320763508302": [1123, 1342], "30_000": [40, 340], "30m": [230, 340, 464, 477, 871, 947, 1078, 1091], "30t16": 469, "31": [56, 61, 208, 287, 340, 440, 441, 445, 452, 456, 459, 462, 470, 684, 714, 769, 772, 781, 791, 810, 857, 947, 953, 1048, 1050, 1051, 1055, 1065, 1070, 1076, 1083, 1084, 1222, 1266, 1296, 1342, 1366, 1368, 1373], "31t06": 1083, "32": [54, 66, 72, 76, 86, 240, 245, 272, 340, 601, 640, 665, 831, 876, 896, 947, 1044, 1074, 1211, 1233, 1342, 1359, 1365], "321": [27, 1373], "3212": [718, 1300], "321cba": 1365, "3265500": 953, "32971": [480, 1094], "32974": [480, 1094], "32976": [480, 1094], "32bit": [297, 340], "33": [208, 256, 340, 659, 831, 857, 886, 947, 1233, 1342, 1366], "333": [16, 660, 831, 1099, 1207, 1239, 1342], "33333": 1368, "333333": [236, 340, 603, 789, 874, 947, 1211, 1237, 1342, 1359], "34": [208, 340, 700, 714, 857, 947, 1283, 1296], "3420": [718, 1300], "343622": [670, 831], "345": [414, 415, 695, 696, 1020, 1021, 1277, 1278], "3450": [1239, 1342], "3456": 953, "34776706224699483": [1253, 1342], "35": [40, 340, 433, 469, 772, 831, 1043, 1342], "350": [340, 343, 507, 618, 831, 1230, 1342, 1347], "3500": [1239, 1342], "356": [445, 460, 479], "356194": [752, 753, 1367], "357": [445, 460, 479], "358": [445, 460, 479], "359": [445, 460, 479], "36": [208, 340, 857, 947, 1370], "360": [431, 629, 831, 1367], "361": 1373, "363961": [566, 1183], "366": [460, 1074], "37": [12, 953], "370h": [486, 831, 1103, 1342], "37338": 1373, "38": [40, 131, 166, 169, 340], "38180177416060584": [652, 831, 1234, 1342], "381802": [652, 831, 1234, 1342], "386294": [575, 831, 1192, 1342, 1364], "389056": [490, 831, 1106, 1342, 1364], "39": [656, 781, 831], "39m": 953, "3_color_scal": [40, 340], "3d12h4m25": [230, 245, 272, 310, 340, 464, 477, 486, 640, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1078, 1091, 1103, 1342], "3f": [142, 714, 717, 1296, 1299], "3i": [230, 272, 340, 871, 947], "3rd": [1273, 1297], "3xy": [679, 1261], "4": [1, 8, 13, 17, 25, 35, 37, 39, 40, 42, 43, 46, 52, 53, 54, 55, 56, 60, 61, 79, 99, 124, 125, 126, 127, 128, 129, 130, 131, 135, 153, 161, 173, 197, 198, 199, 200, 201, 202, 203, 207, 209, 213, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 268, 272, 274, 275, 282, 283, 286, 290, 291, 292, 293, 294, 295, 298, 301, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 353, 355, 367, 374, 375, 376, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 391, 392, 398, 409, 410, 411, 414, 415, 417, 418, 419, 423, 424, 427, 428, 429, 431, 434, 441, 444, 445, 452, 460, 461, 462, 463, 464, 465, 466, 469, 471, 474, 476, 477, 479, 483, 484, 486, 490, 491, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 509, 511, 513, 514, 515, 516, 525, 526, 530, 531, 532, 539, 540, 541, 542, 543, 545, 546, 548, 556, 558, 559, 560, 561, 562, 563, 564, 568, 569, 574, 577, 578, 579, 599, 601, 603, 604, 606, 608, 610, 611, 614, 615, 616, 619, 620, 622, 623, 624, 625, 628, 630, 634, 635, 636, 637, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 667, 671, 672, 673, 674, 677, 679, 683, 686, 689, 691, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 712, 713, 714, 715, 719, 724, 725, 727, 728, 729, 730, 732, 735, 736, 737, 738, 744, 745, 747, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 772, 773, 774, 776, 778, 779, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 827, 831, 846, 847, 849, 850, 851, 852, 853, 856, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 889, 890, 891, 893, 896, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 920, 921, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 957, 962, 965, 972, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 1004, 1015, 1020, 1021, 1026, 1027, 1029, 1035, 1040, 1042, 1044, 1054, 1058, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1078, 1080, 1085, 1088, 1090, 1091, 1092, 1093, 1100, 1103, 1107, 1108, 1110, 1111, 1116, 1117, 1119, 1124, 1125, 1128, 1129, 1130, 1131, 1135, 1138, 1139, 1140, 1141, 1143, 1149, 1156, 1157, 1158, 1159, 1160, 1165, 1169, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1186, 1201, 1204, 1205, 1208, 1211, 1212, 1213, 1214, 1218, 1219, 1222, 1223, 1224, 1227, 1231, 1233, 1234, 1235, 1236, 1237, 1240, 1242, 1246, 1247, 1250, 1253, 1254, 1255, 1259, 1261, 1265, 1268, 1271, 1273, 1277, 1278, 1280, 1281, 1286, 1288, 1289, 1294, 1295, 1296, 1297, 1301, 1306, 1307, 1310, 1312, 1314, 1320, 1323, 1325, 1327, 1333, 1342, 1347, 1351, 1352, 1354, 1355, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1370, 1371, 1372, 1373], "40": [40, 208, 218, 245, 263, 340, 464, 469, 477, 508, 572, 718, 729, 831, 857, 876, 889, 947, 953, 1060, 1091, 1189, 1300, 1358, 1359, 1362, 1365], "400": [309, 340, 472, 473, 475, 914, 947, 1229, 1230, 1232, 1342, 1362], "4000000": [1101, 1342], "404": [246, 340, 685, 687, 877, 947, 1267, 1269], "4096": 1364, "41": [208, 340, 656, 831, 857, 947, 1359, 1373], "412277": 169, "414214": [674, 831, 1256, 1342, 1364], "4160": 56, "416147": 1367, "4164": [245, 340, 876, 947], "42": [56, 208, 231, 256, 272, 340, 469, 640, 831, 857, 886, 896, 947, 1123, 1342, 1358, 1372], "424778": [629, 831], "428571": [485, 831, 1102, 1342], "429101": 1359, "4294967296": [46, 340], "43": [208, 272, 340, 428, 640, 656, 831, 857, 896, 947], "4321": 953, "433013": [653, 831, 907, 947], "44": [10, 256, 340, 434, 831, 886, 947], "4411": [245, 340, 876, 947], "44225": [1025, 1342], "444": 10, "44444444444": 10, "45": [40, 208, 272, 340, 441, 464, 477, 640, 656, 679, 686, 726, 753, 772, 791, 817, 818, 831, 857, 896, 947, 953, 1051, 1078, 1083, 1091, 1261, 1268, 1309, 1364, 1365, 1367, 1371, 1373], "450": [1230, 1342], "45000": 809, "4500000": 953, "456": [9, 10, 441, 953, 1051, 1319, 1342], "456000": [441, 1051], "456001\u00b5": 953, "4566": [245, 340, 876, 947], "456789": [469, 953, 1079], "456789\u00b5": 953, "456m": 953, "457658": 1367, "459148": [482, 831], "46": 953, "4696": [245, 340, 876, 947], "47": [52, 208, 340, 656, 831, 857, 947, 953, 1359], "470": [890, 947], "47033": [652, 831, 1234, 1342], "47033046033698594": [652, 831, 1234, 1342], "475": [890, 947], "48": [12, 169, 272, 340, 640, 729, 831, 896, 947, 953], "4827": [245, 340, 876, 947], "485": 1373, "49": [208, 340, 857, 947, 953], "492474": [486, 831, 1103, 1342], "498": [246, 340, 877, 947], "4_500_000": 953, "4ab4a": 1365, "4d": [486, 831, 1103, 1342], "4f6228": [40, 340], "4f71": [40, 340], "4x": [242, 340], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 37, 39, 42, 43, 46, 52, 53, 55, 56, 60, 99, 124, 127, 128, 129, 130, 131, 133, 140, 161, 162, 164, 167, 169, 173, 198, 201, 202, 203, 208, 209, 212, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 232, 233, 235, 236, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 258, 259, 260, 262, 264, 265, 266, 268, 272, 275, 282, 283, 286, 287, 290, 291, 292, 293, 294, 295, 297, 298, 301, 302, 304, 307, 308, 309, 310, 313, 314, 316, 317, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 349, 350, 353, 368, 369, 374, 375, 376, 378, 380, 384, 389, 391, 397, 398, 409, 410, 411, 414, 415, 418, 419, 429, 430, 431, 433, 434, 437, 440, 441, 442, 443, 444, 448, 451, 452, 453, 454, 458, 463, 465, 466, 467, 469, 470, 476, 480, 484, 486, 488, 489, 492, 494, 498, 499, 503, 504, 506, 509, 511, 514, 516, 519, 522, 523, 524, 525, 526, 530, 532, 539, 542, 543, 545, 546, 548, 551, 553, 554, 558, 559, 560, 561, 562, 563, 567, 568, 572, 578, 599, 601, 603, 615, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 662, 673, 679, 689, 690, 691, 694, 695, 696, 715, 719, 730, 732, 736, 737, 738, 750, 752, 753, 755, 756, 757, 758, 759, 761, 763, 765, 766, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 783, 785, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 809, 810, 812, 814, 815, 816, 820, 827, 831, 849, 850, 851, 852, 853, 857, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 883, 884, 890, 893, 896, 902, 903, 904, 905, 906, 907, 908, 909, 913, 914, 916, 917, 920, 921, 923, 925, 926, 927, 928, 931, 932, 933, 934, 935, 936, 937, 938, 947, 953, 962, 965, 969, 972, 975, 976, 979, 981, 982, 983, 985, 987, 991, 996, 997, 998, 1003, 1004, 1015, 1020, 1027, 1029, 1036, 1040, 1041, 1042, 1043, 1044, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1065, 1077, 1079, 1080, 1081, 1083, 1084, 1090, 1092, 1093, 1094, 1100, 1103, 1105, 1107, 1108, 1109, 1119, 1124, 1125, 1128, 1130, 1134, 1137, 1149, 1156, 1159, 1160, 1165, 1168, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1185, 1189, 1193, 1201, 1208, 1211, 1212, 1213, 1216, 1217, 1218, 1219, 1223, 1224, 1227, 1228, 1229, 1230, 1232, 1233, 1236, 1240, 1242, 1247, 1253, 1256, 1261, 1271, 1272, 1273, 1276, 1277, 1297, 1301, 1314, 1321, 1323, 1326, 1327, 1330, 1333, 1342, 1347, 1352, 1355, 1357, 1359, 1360, 1361, 1364, 1365, 1366, 1367, 1370, 1372, 1373], "50": [12, 27, 40, 208, 218, 228, 340, 419, 464, 469, 477, 770, 771, 831, 857, 947, 953, 1029, 1042, 1091, 1282, 1342, 1358, 1359], "500": [40, 309, 340, 343, 443, 444, 448, 451, 453, 454, 458, 465, 467, 914, 947, 1064, 1066, 1072, 1229, 1230, 1232, 1342, 1347], "5000": [302, 340, 1326, 1342], "50000": 140, "500000": [451, 1064], "500000000": [458, 1072], "5000555": 953, "500_000": [443, 444, 448, 451, 453, 454, 458, 465, 467], "500m": [1064, 1066, 1072], "51": 953, "512": [46, 141, 242, 340, 398, 625, 831, 1004, 1211, 1342], "51966": [719, 1301], "52": [314, 340, 478, 659, 831, 917, 947], "523599": 1367, "527525": [1235, 1342], "53": [478, 1092, 1370], "533316061": 1351, "533_316_061": 1351, "54": [490, 831, 1145, 1342, 1364, 1373], "540": [431, 629, 831], "540302": 1367, "543": 9, "543081": [421, 831, 1032, 1342], "5432": 141, "54321": 9, "544": 1373, "544705": 761, "549306": [969, 1342], "55": [40, 54, 340, 512, 831, 1127, 1342, 1361, 1365, 1366], "5555": 953, "55550": 953, "56": [131, 700, 733, 831, 1283], "566371": [629, 831], "567": 27, "56789": [1026, 1115, 1238, 1342], "57": [656, 831, 1238, 1342, 1367, 1373], "570796": [357, 359, 831, 964, 966, 1342, 1367], "575050513": [166, 169], "58": [135, 264, 340], "581139": [1042, 1342], "584963": [573, 831], "587401": [417, 831, 1364], "59": [131, 208, 340, 441, 454, 462, 465, 469, 499, 772, 817, 818, 819, 831, 857, 947, 953, 1051, 1068, 1076, 1079], "59815": [490, 831, 1364], "5_000_555": 953, "5th": [40, 340], "6": [1, 8, 13, 35, 37, 39, 40, 42, 43, 44, 45, 46, 51, 53, 55, 60, 91, 92, 99, 124, 127, 128, 129, 130, 148, 149, 161, 198, 201, 204, 205, 209, 210, 211, 213, 214, 215, 217, 218, 221, 224, 225, 226, 227, 228, 230, 232, 234, 235, 236, 238, 240, 241, 242, 244, 245, 248, 249, 250, 251, 252, 253, 254, 257, 258, 261, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 304, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 323, 333, 334, 340, 343, 344, 349, 353, 374, 375, 376, 378, 384, 392, 410, 411, 414, 415, 427, 428, 434, 437, 441, 445, 455, 459, 460, 461, 472, 473, 475, 478, 479, 482, 484, 493, 494, 499, 500, 503, 509, 511, 514, 532, 533, 534, 543, 546, 559, 560, 561, 562, 566, 578, 579, 615, 619, 626, 629, 630, 631, 636, 638, 640, 642, 644, 646, 648, 650, 653, 655, 656, 657, 662, 667, 673, 679, 684, 695, 696, 719, 730, 732, 737, 745, 747, 749, 756, 758, 765, 766, 767, 769, 772, 776, 779, 785, 792, 793, 797, 810, 814, 827, 831, 849, 852, 853, 854, 855, 858, 859, 861, 862, 863, 864, 867, 868, 869, 871, 872, 874, 875, 876, 878, 880, 881, 888, 890, 892, 893, 894, 896, 897, 898, 900, 902, 903, 904, 905, 906, 909, 912, 913, 916, 917, 920, 921, 927, 937, 938, 947, 953, 979, 981, 982, 983, 985, 991, 1020, 1027, 1031, 1033, 1038, 1039, 1044, 1047, 1073, 1083, 1093, 1100, 1107, 1119, 1125, 1150, 1151, 1160, 1163, 1176, 1177, 1178, 1179, 1183, 1201, 1215, 1218, 1219, 1224, 1226, 1231, 1233, 1235, 1237, 1242, 1247, 1250, 1261, 1266, 1277, 1301, 1313, 1323, 1342, 1347, 1352, 1355, 1357, 1359, 1360, 1364, 1370, 1371, 1373], "60": [40, 218, 264, 340, 448, 453, 454, 465, 476, 499, 656, 714, 831, 1074, 1079, 1090, 1220, 1296, 1342, 1367], "600": [309, 340, 472, 473, 475, 914, 947, 953], "60000": 451, "600000": 953, "60000000": 458, "60206": [574, 831, 1364], "605551": 812, "605551275463989": 812, "609438": 1364, "60_000": [443, 444, 448, 451, 453, 454, 458, 465, 467], "61": [264, 340], "625": [650, 831], "626172": [681, 1263], "63": [656, 831], "63204": 1373, "6331e16": [1315, 1342, 1367], "636253": 1367, "64": [1, 54, 56, 67, 69, 73, 77, 84, 87, 160, 197, 302, 340, 422, 601, 625, 831, 1211, 1214, 1342, 1364], "64030": [719, 1301], "642093": 1367, "647961": 169, "64bit": [161, 632, 831, 1220, 1342], "65": [212, 340, 860, 947, 1097, 1342], "650": [507, 618, 831], "65280": [719, 1301], "654": [27, 810, 906, 947], "65432": 1368, "654321": 587, "65536": 1364, "65552": [397, 1003], "66": [245, 309, 340, 656, 745, 831, 876, 914, 947, 1145, 1233, 1342], "663053": 131, "666": 953, "666000": 953, "666667": [208, 236, 311, 328, 340, 485, 789, 790, 796, 831, 857, 874, 915, 932, 947, 1102, 1342], "666f6f": [681, 1263], "67500": 809, "676": [246, 340, 877, 947], "678": [679, 686, 1261, 1268], "6789": [28, 953], "67890": 28, "686241": 1359, "69": [656, 831, 1145, 1342], "693147": [575, 831, 1190, 1192, 1342, 1364], "6_000_000": 1351, "7": [1, 16, 27, 35, 37, 39, 40, 42, 43, 44, 45, 46, 53, 55, 60, 148, 149, 161, 176, 198, 201, 204, 205, 206, 208, 210, 211, 214, 215, 217, 221, 224, 226, 230, 232, 234, 236, 244, 248, 250, 252, 254, 256, 257, 261, 264, 266, 269, 270, 272, 273, 275, 276, 277, 278, 280, 283, 285, 288, 289, 290, 291, 296, 298, 299, 300, 308, 310, 311, 312, 340, 343, 344, 349, 353, 375, 376, 378, 387, 428, 440, 441, 445, 452, 460, 463, 464, 469, 477, 479, 490, 503, 509, 514, 515, 532, 546, 559, 560, 561, 562, 619, 620, 630, 636, 640, 655, 656, 673, 689, 718, 732, 756, 765, 766, 769, 772, 773, 779, 784, 792, 793, 810, 814, 831, 849, 854, 855, 857, 859, 862, 864, 867, 869, 871, 872, 874, 875, 880, 886, 888, 891, 894, 896, 897, 898, 902, 906, 909, 947, 953, 969, 982, 983, 985, 994, 1050, 1051, 1055, 1060, 1065, 1077, 1078, 1083, 1091, 1093, 1106, 1129, 1144, 1163, 1176, 1177, 1178, 1179, 1223, 1224, 1236, 1242, 1271, 1300, 1342, 1347, 1352, 1357, 1359, 1360, 1361, 1364, 1366, 1370, 1373], "70": [208, 340, 745, 773, 831, 857, 947, 1145, 1342, 1359], "700": [309, 340, 914, 947], "702963": [40, 340], "7051579356916758811": 155, "707107": [386, 487, 653, 654, 752, 831, 993, 1104, 1342, 1367], "712389": 1367, "714": 1373, "714286": [515, 831, 1129, 1342], "718281828459045": [10, 482, 573, 831, 1097, 1190, 1342], "718282": [490, 831, 1106, 1342, 1364], "720": [431, 629, 831], "7264": 1373, "732051": [1256, 1342], "7415e16": 169, "742": [246, 340, 877, 947], "75": [40, 208, 212, 340, 353, 619, 627, 642, 644, 646, 648, 653, 655, 657, 789, 793, 831, 857, 860, 947, 953, 1042, 1125, 1145, 1216, 1282, 1342, 1359, 1367, 1373], "7500": [243, 340], "7508": 1373, "754": [738, 831], "754888": [482, 831], "761594": [734, 831, 1316, 1342], "7654": 953, "765431": 1079, "7654321": 27, "76933c": [40, 340], "77": 1083, "78": [9, 135, 700, 1283], "780": 9, "784": [245, 340, 876, 947], "785398": [361, 752, 753, 831, 968, 1342, 1367], "789": [10, 953], "79": [1145, 1342], "7d": 953, "8": [1, 11, 35, 37, 39, 42, 43, 44, 45, 46, 47, 52, 53, 55, 56, 60, 78, 82, 88, 148, 149, 161, 198, 201, 204, 205, 206, 208, 210, 211, 213, 214, 215, 217, 221, 224, 226, 228, 232, 234, 241, 244, 245, 246, 248, 249, 250, 252, 254, 257, 266, 269, 270, 272, 273, 275, 276, 277, 278, 280, 283, 285, 287, 288, 289, 291, 296, 298, 299, 300, 308, 311, 312, 314, 340, 353, 355, 367, 375, 376, 378, 425, 428, 429, 441, 469, 503, 510, 514, 515, 540, 542, 546, 559, 560, 561, 562, 601, 619, 620, 625, 636, 637, 641, 665, 671, 673, 697, 698, 699, 714, 745, 750, 756, 761, 763, 766, 768, 776, 778, 783, 784, 787, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 812, 815, 816, 820, 831, 849, 854, 855, 857, 859, 861, 862, 864, 867, 869, 872, 875, 876, 877, 880, 881, 890, 894, 897, 898, 902, 906, 909, 917, 947, 953, 982, 983, 985, 1033, 1040, 1060, 1125, 1129, 1144, 1157, 1159, 1163, 1176, 1177, 1178, 1179, 1211, 1214, 1224, 1227, 1228, 1231, 1233, 1235, 1237, 1280, 1281, 1296, 1342, 1351, 1352, 1357, 1359, 1360, 1361, 1364, 1365, 1366, 1370, 1373], "80": [40, 212, 340, 860, 947], "800": [472, 473, 475, 1083], "8000": 141, "803065983": 131, "81": 1364, "814697265625": [1101, 1342], "816497": [288, 340], "8192": 139, "82": [245, 340, 876, 947], "8257e14": 1373, "83": [245, 340, 876, 947], "833": [245, 340, 876, 947], "833333": [328, 932], "848062": 1367, "848808": 169, "85": [40, 135, 340, 1145, 1342, 1373], "850": [507, 618, 831], "8568409950394724": [1097, 1342], "8589934592": [665, 831], "86": 1373, "8601": 1365, "87": 1373, "876": 9, "88": [208, 340, 857, 947], "881374": [360, 831, 967, 1342], "888": [810, 906, 947], "8_000_000": 1351, "8a": [1000, 1001], "8nin": 1373, "9": [1, 9, 35, 37, 39, 40, 42, 43, 46, 52, 60, 198, 206, 208, 221, 223, 232, 236, 244, 246, 248, 249, 264, 272, 274, 275, 278, 290, 291, 308, 312, 314, 333, 340, 349, 353, 355, 367, 375, 376, 378, 383, 385, 425, 428, 431, 441, 469, 495, 503, 514, 520, 540, 546, 557, 565, 603, 619, 620, 629, 636, 640, 641, 652, 655, 656, 667, 671, 686, 718, 726, 729, 759, 765, 766, 769, 772, 784, 819, 831, 857, 867, 872, 874, 875, 877, 880, 896, 898, 909, 917, 937, 947, 953, 977, 978, 982, 983, 985, 990, 992, 1042, 1055, 1064, 1066, 1072, 1078, 1091, 1092, 1135, 1144, 1157, 1163, 1174, 1182, 1224, 1228, 1234, 1236, 1238, 1250, 1268, 1300, 1309, 1342, 1351, 1352, 1357, 1360, 1361, 1370], "90": [208, 246, 340, 718, 857, 877, 947, 1300, 1359, 1367], "90000": 809, "901234": [1026, 1115, 1238, 1342], "909": [245, 340, 876, 947], "910": [245, 340, 686, 876, 947, 1268], "910t": [679, 686, 1261, 1268], "914": [245, 340, 876, 947], "9223372036854775807": [741, 831], "9223372036854775808": [576, 831], "927295": 1367, "928571": [488, 831, 1105, 1342], "93": [1145, 1342], "94": [350, 831], "9477376373212048": [1145, 1342], "95": [17, 350, 831, 953], "95b3d7": [40, 340], "96": [17, 208, 340, 350, 831, 857, 947, 1145, 1342], "961": 56, "963624": [487, 831, 1104, 1342], "964028": [264, 340], "96_067_179": 1351, "97": [17, 235, 340, 350, 831, 1145, 1342], "9774092659964970114": [508, 831], "978307200": [447, 1057], "978307200000": 468, "978307200000000": [447, 468, 1057, 1082], "978307200000000000": 1082, "978393600": [447, 1057], "978393600000": 468, "978393600000000": [447, 468, 1057, 1082], "978393600000000000": 1082, "978480000": [447, 1057], "978480000000": 468, "978480000000000": [447, 468, 1057, 1082], "978480000000000000": 1082, "98": [17, 235, 264, 340, 409, 502, 505, 672, 718, 736, 831, 1300], "987": [27, 587], "987000": 953, "9876": 9, "987654": [27, 953], "987654321": 10, "9876543210": 131, "987m": 953, "988": 10, "99": [17, 40, 219, 220, 235, 238, 264, 309, 340, 350, 409, 492, 494, 502, 505, 672, 736, 821, 831, 865, 866, 914, 947, 1083, 1097, 1109, 1342, 1364], "9914e218": 169, "993": [1125, 1342], "998347": [264, 340], "999": [440, 452, 953, 1050, 1065, 1362, 1373], "999000": 953, "999954": [264, 340], "999999": [462, 724, 772, 817, 818, 819, 953, 1076, 1083, 1306], "999999\u00b5": 953, "9bbb59": [40, 340], "A": [13, 37, 40, 46, 47, 58, 59, 64, 70, 131, 134, 139, 140, 141, 142, 153, 155, 160, 175, 205, 214, 223, 230, 245, 251, 253, 258, 264, 290, 293, 308, 309, 310, 314, 315, 340, 348, 415, 435, 436, 441, 466, 469, 483, 484, 492, 504, 506, 518, 521, 523, 524, 530, 570, 577, 578, 591, 605, 614, 615, 637, 642, 644, 646, 648, 650, 653, 655, 657, 677, 678, 679, 685, 686, 687, 688, 689, 690, 691, 694, 696, 700, 701, 702, 704, 715, 724, 759, 775, 776, 780, 831, 855, 862, 871, 876, 894, 914, 917, 918, 947, 953, 1021, 1045, 1046, 1051, 1080, 1083, 1099, 1109, 1207, 1229, 1230, 1232, 1235, 1236, 1237, 1259, 1260, 1261, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1278, 1282, 1283, 1284, 1286, 1297, 1306, 1342, 1351, 1352, 1355, 1368, 1370], "AND": [746, 747, 810, 953, 1361], "ANDs": [400, 831, 1006, 1342], "AS": [287, 340, 810, 811, 906, 947, 1351, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1372], "And": [722, 1304], "As": [12, 51, 91, 92, 124, 126, 127, 128, 130, 144, 148, 149, 157, 221, 268, 297, 302, 340, 570, 821, 867, 893, 947], "At": [46, 47, 48, 49, 50, 264, 340, 852, 853, 863, 890, 903, 947], "BY": [810, 906, 947, 1351, 1354, 1360, 1369, 1370], "Be": 947, "By": [5, 12, 14, 30, 33, 52, 139, 140, 153, 230, 244, 245, 272, 274, 283, 288, 310, 311, 340, 384, 459, 464, 477, 563, 566, 572, 620, 635, 640, 643, 645, 647, 649, 651, 654, 656, 658, 664, 675, 743, 763, 770, 771, 773, 774, 775, 791, 812, 818, 819, 820, 831, 852, 871, 875, 876, 896, 902, 907, 915, 947, 991, 1073, 1078, 1091, 1180, 1223, 1246, 1257, 1332, 1342], "For": [14, 39, 40, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 212, 213, 216, 218, 244, 245, 264, 272, 297, 326, 340, 343, 456, 457, 469, 485, 487, 488, 499, 570, 579, 591, 632, 670, 677, 685, 686, 687, 689, 691, 715, 765, 775, 779, 780, 827, 831, 860, 861, 876, 896, 930, 947, 1083, 1101, 1102, 1104, 1105, 1108, 1195, 1220, 1253, 1259, 1267, 1268, 1269, 1271, 1273, 1297, 1321, 1342, 1347], "IF": 1363, "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 68, 124, 125, 126, 127, 128, 129, 130, 135, 136, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 170, 171, 172, 183, 197, 201, 213, 218, 221, 228, 230, 232, 240, 241, 242, 244, 245, 248, 249, 253, 260, 264, 268, 272, 274, 275, 276, 280, 283, 285, 287, 290, 291, 294, 295, 297, 298, 304, 305, 307, 308, 309, 340, 343, 352, 354, 377, 384, 389, 397, 411, 437, 441, 442, 456, 457, 466, 469, 495, 510, 516, 520, 528, 549, 558, 563, 564, 570, 578, 579, 586, 587, 593, 595, 620, 625, 627, 630, 632, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 664, 666, 670, 671, 676, 686, 687, 689, 691, 692, 693, 704, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 721, 724, 742, 746, 748, 751, 755, 756, 760, 761, 765, 770, 771, 773, 774, 775, 778, 779, 785, 786, 787, 789, 790, 791, 793, 797, 803, 806, 807, 808, 813, 815, 818, 819, 821, 822, 831, 852, 853, 861, 863, 867, 871, 875, 876, 881, 885, 890, 892, 893, 894, 896, 900, 902, 903, 904, 906, 911, 913, 914, 922, 930, 940, 947, 952, 953, 960, 961, 984, 991, 996, 1003, 1016, 1029, 1047, 1051, 1052, 1070, 1071, 1080, 1083, 1108, 1124, 1125, 1130, 1135, 1144, 1145, 1149, 1166, 1175, 1180, 1181, 1187, 1195, 1214, 1216, 1218, 1220, 1222, 1223, 1224, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1242, 1244, 1246, 1249, 1253, 1254, 1258, 1268, 1269, 1271, 1273, 1274, 1275, 1282, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1296, 1297, 1298, 1299, 1303, 1306, 1314, 1317, 1321, 1323, 1331, 1342, 1347, 1351, 1352, 1354, 1362, 1365, 1370], "In": [52, 59, 141, 143, 154, 155, 158, 169, 173, 193, 198, 216, 218, 221, 230, 245, 246, 249, 260, 264, 272, 298, 307, 340, 343, 578, 579, 620, 640, 700, 701, 831, 853, 871, 876, 877, 896, 913, 947, 1101, 1108, 1214, 1219, 1283, 1342, 1347], "It": [31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 51, 58, 59, 68, 70, 74, 92, 134, 135, 143, 149, 151, 153, 154, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 195, 208, 246, 256, 263, 287, 297, 302, 309, 317, 326, 340, 343, 344, 429, 430, 510, 570, 579, 590, 627, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 758, 789, 790, 827, 831, 848, 852, 853, 857, 877, 881, 886, 906, 914, 921, 930, 947, 955, 1024, 1040, 1041, 1125, 1216, 1228, 1231, 1233, 1234, 1241, 1243, 1321, 1326, 1342, 1347], "Its": [231, 340, 508, 831, 1123, 1342], "NO": 953, "NOT": [127, 241, 281, 340, 570, 589, 663, 831, 901, 947, 1370], "No": [20, 244, 256, 340, 875, 886, 947], "Not": [219, 244, 340, 493, 523, 524, 831, 852, 863, 865, 875, 890, 903, 947, 1110, 1342], "ON": 1370, "OR": [748, 749, 867, 947, 953, 1361], "ORs": [405, 831, 1011, 1342], "On": [738, 831, 879, 947], "One": [52, 208, 260, 297, 302, 340, 353, 619, 750, 762, 778, 784, 787, 796, 798, 801, 802, 811, 831, 857, 947, 953, 1042, 1342], "Or": [229, 230, 245, 272, 286, 310, 319, 340, 343, 486, 640, 673, 770, 771, 773, 774, 818, 819, 821, 827, 831, 870, 871, 876, 896, 905, 923, 947, 1103, 1342], "That": [145, 881, 947], "The": [20, 33, 37, 38, 39, 40, 42, 46, 47, 48, 49, 50, 51, 52, 57, 58, 60, 61, 66, 67, 69, 70, 71, 79, 83, 84, 92, 93, 95, 124, 126, 127, 128, 130, 134, 136, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 169, 170, 171, 173, 175, 183, 200, 208, 209, 211, 212, 213, 214, 217, 218, 221, 228, 229, 230, 231, 236, 242, 244, 245, 246, 249, 256, 262, 264, 268, 272, 273, 274, 275, 278, 279, 280, 287, 297, 298, 303, 306, 310, 314, 315, 317, 318, 319, 326, 340, 351, 392, 393, 394, 395, 409, 410, 430, 432, 435, 436, 437, 445, 455, 459, 460, 464, 466, 469, 477, 478, 489, 492, 495, 499, 500, 508, 541, 545, 578, 579, 593, 620, 627, 630, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 667, 670, 676, 680, 681, 685, 690, 691, 692, 693, 698, 699, 700, 701, 709, 710, 711, 712, 713, 714, 715, 725, 729, 735, 736, 737, 756, 759, 777, 781, 790, 791, 793, 807, 808, 809, 810, 813, 821, 823, 824, 826, 827, 831, 832, 833, 836, 838, 839, 840, 847, 852, 853, 857, 858, 860, 861, 863, 864, 867, 870, 871, 874, 875, 876, 877, 881, 886, 890, 893, 896, 898, 899, 900, 903, 906, 910, 912, 917, 918, 921, 923, 930, 947, 951, 952, 953, 959, 962, 999, 1000, 1001, 1015, 1028, 1041, 1042, 1045, 1046, 1047, 1055, 1069, 1073, 1074, 1078, 1080, 1083, 1091, 1092, 1108, 1109, 1112, 1123, 1158, 1162, 1195, 1214, 1216, 1218, 1222, 1223, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1250, 1253, 1258, 1262, 1263, 1272, 1273, 1274, 1275, 1280, 1281, 1282, 1283, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1323, 1325, 1327, 1334, 1336, 1338, 1342, 1343, 1348, 1349, 1350, 1351, 1356, 1370, 1371, 1373], "Then": 158, "There": 1370, "These": [1, 32, 40, 133, 136, 141, 142, 193, 304, 340, 477, 830, 831, 1078, 1091], "To": [39, 59, 219, 340, 419, 435, 436, 493, 494, 677, 684, 685, 686, 689, 700, 701, 710, 711, 712, 713, 722, 831, 865, 947, 1029, 1045, 1046, 1110, 1259, 1266, 1267, 1268, 1271, 1282, 1283, 1304, 1323, 1342, 1370], "Will": [58, 59, 852, 853, 863, 890, 903, 947, 1342], "With": [148, 240, 283, 340, 384, 563, 664, 831, 852, 902, 947, 991, 1144, 1180, 1246, 1342], "_": [1, 52, 56, 193, 264, 295, 299, 340, 377, 414, 415, 549, 678, 686, 688, 690, 695, 696, 702, 705, 706, 1020, 1021, 1023, 1260, 1268, 1272, 1277, 1278, 1284, 1288, 1318, 1342], "__array_ufunc__": 955, "__call__": 827, "__enter__": 1370, "__exit__": 1370, "__getattr__": 827, "__getitem__": 725, "__init__": [1, 31, 32, 33, 34, 51, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 166, 178, 184, 185, 187, 188, 922, 1370], "__name__": [243, 340], "_bar_": 780, "_btm_by_a": [410, 831], "_btm_by_b": [410, 831], "_by_ca": [410, 737, 831], "_by_cb": [410, 737, 831], "_check_ord": [58, 59, 852, 853, 863, 890, 903, 947], "_df": [1, 53], "_diff": [314, 340, 917, 947], "_eager": [570, 852, 947], "_expr": [1, 54], "_foo": 584, "_geventdataframeresult": [59, 853, 947], "_is_not_nan": [524, 831], "_is_odd": [278, 340, 898, 947], "_isnan": [523, 831], "_isnul": [526, 831], "_kwarg": [852, 890, 947], "_ldf": 1, "_lf": 55, "_lower_boundari": [230, 340, 871, 947], "_mean_squar": [319, 923], "_not_nul": [525, 831], "_o": [414, 415, 695, 696, 1020, 1021, 1277, 1278], "_revers": [604, 608, 637, 831], "_right": [244, 245, 246, 340, 875, 876, 877, 947], "_storage_account": 33, "_suffix": 609, "_sum": [319, 923], "_top_by_a": [737, 831], "_top_by_b": [737, 831], "_train": [919, 947], "_type": [892, 947], "_type_check": [47, 48, 49, 50, 58, 59, 852, 853, 863, 890, 903, 947], "_upper_boundari": [230, 340, 871, 947], "_world": 780, "a1": [40, 53, 55, 340], "a101": 1373, "a123": [40, 340], "a2": [40, 53, 55, 340], "a_1": [706, 1288, 1318, 1342], "a_2": [1318, 1342], "a_3": [1318, 1342], "a_a": 811, "a_agg_list": [230, 340, 871, 947], "a_b_doubl": 776, "a_btm_by_a": [410, 831], "a_btm_by_b": [410, 831], "a_by_ca": [410, 737, 831], "a_by_cb": [410, 737, 831], "a_div_2": 1364, "a_div_5": 1364, "a_interpol": [515, 831], "a_is_even": [287, 340, 810, 906, 947], "a_isnul": [526, 831], "a_lag_": 759, "a_log2": 1364, "a_mod_2": 1364, "a_not_nul": [525, 831], "a_revers": [604, 608, 637, 831], "a_rol": 759, "a_suffix": 609, "a_times_2": [579, 831], "a_times_b": [578, 831], "a_top_by_a": [737, 831], "a_top_by_b": [737, 831], "a_txt": 811, "aa": [489, 677, 689, 777, 831, 953, 1042, 1259, 1271, 1342, 1365], "aaa": [1, 40, 340, 677, 689, 725, 727, 728, 953, 1259, 1271], "aaaa": [1000, 1001], "aabcdef": 711, "aad": [1000, 1001], "aag": 26, "aazz": 1365, "ab": [232, 248, 291, 314, 340, 701, 725, 727, 728, 831, 917, 947, 953, 1124, 1149, 1314, 1342, 1363, 1365], "ab12": 701, "ab12cd34ef": 701, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 349, 683, 686, 700, 710, 831, 953, 1265, 1268, 1282, 1283], "abc123": 1365, "abc456": [700, 1282, 1283, 1365], "abcabc": 701, "abcd": 1365, "abcdeff": 710, "abf": [143, 154, 155], "abl": [99, 141, 570], "about": [99, 134, 136, 141, 670, 677, 685, 686, 689, 700, 701, 831, 1253, 1259, 1267, 1268, 1271, 1282, 1283, 1342, 1373], "abov": [40, 245, 264, 340, 343, 821, 876, 947], "abs_a": 1364, "absolut": [143, 154, 155, 162, 163, 164, 165, 348, 485, 487, 488, 831, 958, 1102, 1104, 1105, 1342, 1364], "acc": [765, 766, 779, 805], "accent": 953, "accept": [37, 42, 46, 47, 48, 49, 50, 134, 136, 137, 139, 140, 143, 145, 147, 149, 151, 153, 156, 157, 158, 169, 183, 200, 210, 229, 278, 279, 283, 286, 303, 314, 315, 319, 340, 349, 410, 419, 489, 516, 620, 634, 635, 673, 702, 729, 737, 745, 747, 749, 754, 757, 758, 759, 760, 768, 777, 795, 797, 800, 809, 813, 815, 821, 827, 831, 847, 859, 870, 898, 899, 902, 905, 910, 917, 918, 923, 947, 952, 1029, 1130, 1214, 1222, 1223, 1246, 1284, 1342], "access": [37, 42, 46, 47, 48, 49, 50, 53, 54, 55, 56, 145, 149, 151, 153, 155, 156, 157, 158, 183, 197, 204, 242, 273, 274, 287, 340, 687, 725, 854, 906, 919, 947, 952, 1269, 1373], "accord": [273, 340, 627, 770, 771, 773, 774, 818, 819, 831, 1060, 1216, 1342], "accordingli": [134, 137, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152], "account": [40, 131, 142, 155, 340, 459, 485, 487, 488, 831, 1073, 1102, 1104, 1105, 1342], "accumul": [765, 766, 779, 805], "acg": 26, "achiev": [249, 264, 326, 340, 415, 579, 696, 831, 1021, 1195, 1278, 1342], "aco": 1363, "acosd": 1363, "across": [40, 52, 142, 144, 209, 231, 244, 251, 253, 258, 280, 290, 340, 432, 508, 593, 747, 749, 765, 766, 768, 795, 797, 800, 815, 831, 858, 875, 900, 947, 1123, 1342], "action": [39, 340], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 542, 686, 1159, 1268], "actual": [40, 127, 169, 173, 275, 340, 1248, 1342, 1365, 1372], "ad": [38, 40, 127, 144, 230, 287, 297, 302, 304, 309, 314, 315, 340, 355, 469, 492, 586, 587, 729, 765, 766, 810, 831, 871, 906, 914, 917, 918, 947, 953, 1083, 1109, 1321, 1326, 1342], "adbc": [38, 141, 142, 340], "adbc_driver_manag": 161, "adbc_ingest": [38, 340], "add": [39, 40, 41, 140, 218, 230, 249, 314, 315, 316, 317, 340, 343, 430, 606, 607, 608, 609, 627, 729, 775, 779, 821, 831, 871, 875, 917, 918, 919, 920, 921, 947, 1108, 1342, 1347], "add_calendar_dai": 775, "add_calendar_month": 775, "add_calendar_year": 775, "add_chart": [40, 340], "add_dai": 775, "add_format": [40, 340], "add_hour": 775, "add_milli": 775, "add_second": 775, "add_seri": [40, 340], "add_week": 775, "add_worksheet": [40, 340], "addit": [29, 36, 38, 39, 40, 127, 138, 143, 144, 154, 155, 167, 169, 171, 173, 183, 213, 217, 229, 247, 262, 278, 279, 286, 299, 306, 314, 315, 319, 340, 349, 446, 489, 492, 620, 673, 677, 685, 686, 689, 700, 701, 725, 729, 754, 757, 758, 759, 760, 777, 809, 810, 813, 827, 831, 864, 870, 898, 899, 905, 912, 917, 918, 923, 947, 953, 1048, 1056, 1109, 1259, 1267, 1268, 1271, 1282, 1283, 1324, 1342, 1352, 1370], "addition": [60, 144, 273, 340, 953], "address": 686, "adjac": [40, 340], "adjust": [485, 487, 488, 670, 831, 1102, 1104, 1105, 1253, 1342], "adl": [143, 154, 155], "adlf": 155, "advanc": [40, 264, 340, 389, 570, 603, 606, 608, 610, 611, 996, 1187, 1373], "advantag": [40, 193, 263, 340], "advis": [40, 51, 92, 340], "aedt": 772, "aeiuo": [689, 1271], "af1": 52, "af2": 52, "af3": 52, "affect": [38, 162, 163, 164, 165, 340], "afm": 155, "afoo": [919, 947], "after": [40, 127, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 200, 201, 218, 303, 306, 340, 409, 410, 411, 489, 620, 630, 724, 736, 737, 831, 847, 910, 912, 947, 1015, 1108, 1218, 1306, 1327, 1342, 1357], "afterward": [51, 821], "ag": [256, 340, 886, 947, 1371], "again": [579, 831], "against": [38, 101, 139, 141, 221, 268, 287, 340, 542, 689, 810, 867, 893, 906, 947, 1159, 1271, 1351, 1370, 1372, 1373], "agg": [229, 230, 264, 272, 340, 350, 400, 405, 408, 410, 495, 497, 502, 505, 578, 579, 620, 672, 673, 737, 744, 770, 773, 793, 831, 852, 853, 863, 870, 871, 890, 892, 896, 903, 947, 953], "agg_group": [782, 831], "agg_list": [578, 831], "aggreg": [136, 139, 140, 143, 151, 154, 223, 229, 230, 250, 252, 254, 257, 260, 264, 265, 266, 272, 288, 289, 308, 311, 319, 320, 322, 324, 340, 350, 400, 405, 408, 495, 511, 578, 579, 620, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 746, 747, 748, 749, 765, 766, 767, 768, 779, 784, 794, 795, 797, 799, 800, 805, 814, 815, 831, 871, 881, 882, 883, 884, 887, 888, 891, 896, 907, 908, 915, 923, 924, 926, 928, 947, 1006, 1011, 1014, 1126, 1228, 1229, 1230, 1232, 1235, 1236, 1237, 1342, 1358, 1360, 1363, 1369], "aggregate_funct": [264, 340, 953], "aho": [678, 688, 690, 702, 1260, 1270, 1272, 1284], "aiosqlit": 141, "alchemy_conn": 141, "algorithm": [199, 340, 356, 678, 688, 690, 702, 750, 831, 846, 947, 963, 1260, 1270, 1272, 1284, 1342], "alia": [1, 12, 52, 54, 56, 60, 90, 186, 190, 204, 230, 248, 264, 272, 306, 314, 317, 340, 343, 349, 353, 393, 394, 395, 396, 399, 409, 412, 414, 415, 416, 424, 425, 426, 427, 428, 430, 433, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 483, 484, 497, 499, 504, 506, 512, 513, 516, 519, 522, 530, 532, 554, 566, 572, 577, 579, 583, 586, 587, 589, 591, 596, 599, 601, 603, 614, 615, 619, 621, 625, 627, 630, 632, 660, 662, 677, 678, 679, 680, 682, 683, 685, 686, 688, 689, 690, 691, 695, 696, 702, 703, 704, 705, 706, 707, 708, 712, 713, 715, 725, 726, 727, 728, 730, 735, 736, 738, 744, 745, 751, 752, 753, 757, 758, 759, 760, 770, 773, 775, 776, 779, 780, 785, 788, 789, 792, 793, 805, 809, 813, 818, 821, 831, 871, 873, 880, 896, 912, 917, 921, 947, 1041, 1048, 1049, 1052, 1055, 1056, 1057, 1058, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1149, 1216, 1221, 1267, 1268, 1272, 1283, 1288, 1289, 1342], "alias": [287, 340, 586, 587, 906, 947], "alic": [139, 1371], "align": [10, 15, 16, 40, 52, 60, 340, 1371], "align_fram": 60, "align_ful": 60, "align_inn": 60, "align_left": 60, "align_right": 60, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 37, 39, 40, 46, 47, 48, 49, 50, 52, 58, 65, 110, 112, 124, 125, 129, 135, 139, 140, 143, 144, 145, 147, 149, 150, 151, 153, 154, 156, 157, 166, 167, 170, 173, 193, 198, 199, 201, 208, 210, 212, 213, 220, 232, 237, 239, 241, 242, 243, 244, 246, 247, 248, 253, 255, 259, 260, 264, 267, 269, 273, 274, 275, 279, 285, 286, 290, 291, 295, 297, 298, 302, 305, 307, 308, 309, 310, 315, 317, 340, 343, 353, 355, 377, 392, 410, 423, 429, 435, 436, 437, 438, 469, 489, 494, 500, 507, 508, 511, 514, 518, 521, 525, 526, 531, 541, 542, 549, 567, 570, 578, 600, 603, 604, 606, 607, 608, 609, 610, 611, 618, 620, 630, 635, 637, 641, 665, 671, 673, 679, 683, 686, 687, 691, 694, 697, 701, 709, 710, 711, 715, 737, 747, 756, 758, 765, 766, 767, 768, 777, 779, 784, 785, 788, 797, 805, 813, 814, 815, 821, 827, 831, 837, 843, 846, 849, 852, 853, 857, 859, 860, 861, 863, 866, 875, 877, 881, 885, 890, 894, 899, 903, 904, 905, 911, 913, 914, 918, 919, 921, 947, 953, 984, 1040, 1042, 1045, 1046, 1047, 1048, 1083, 1124, 1131, 1143, 1149, 1158, 1159, 1166, 1184, 1187, 1218, 1223, 1228, 1254, 1261, 1265, 1268, 1269, 1272, 1273, 1276, 1283, 1291, 1292, 1293, 1297, 1314, 1323, 1342, 1346, 1347, 1352, 1354, 1359, 1360, 1365, 1369, 1370, 1372, 1373], "all_compat": 1354, "all_data": 1370, "all_horizont": [212, 213, 340, 746, 860, 861, 947], "all_stat": 30, "alloc": [136, 139, 140, 216, 267, 340, 831, 922, 1101, 1342], "allow": [1, 8, 39, 40, 47, 48, 49, 50, 51, 60, 92, 101, 125, 141, 144, 153, 156, 157, 158, 159, 166, 169, 170, 173, 193, 197, 242, 245, 247, 273, 274, 276, 298, 299, 302, 305, 318, 340, 412, 416, 459, 466, 469, 558, 578, 579, 586, 587, 632, 661, 714, 716, 717, 831, 875, 876, 881, 885, 892, 911, 919, 947, 951, 953, 1073, 1080, 1083, 1175, 1195, 1220, 1240, 1296, 1298, 1299, 1323, 1324, 1342, 1365, 1373], "allow_alias": [586, 587], "allow_chunk": [169, 173], "allow_copi": [125, 197, 298, 340, 1323, 1342], "allow_dupl": [627, 831, 1216, 1342], "allow_exact_match": [245, 340, 876, 947], "allow_infin": [169, 173], "allow_masked_out": [169, 173], "allow_missing_column": [151, 158], "allow_nul": [166, 169, 173, 1373], "allow_object": 791, "allow_parallel": [245, 340, 875, 876, 947], "allow_pyarrow_filt": 159, "allow_time_zon": [169, 170, 173], "allowed_dtyp": [169, 170, 173, 1373], "almost": [59, 249, 326, 340, 714, 716, 717, 853, 947, 951, 1195, 1296, 1298, 1299, 1342], "along": [37, 39, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 156, 157, 158, 183, 340, 947], "alpha": [485, 487, 488, 831, 890, 947, 953, 1102, 1104, 1105, 1342], "alpha_i": [486, 831, 1103, 1342], "alphabet": [953, 1373], "alphanumer": [722, 953, 1304], "alreadi": [38, 39, 100, 297, 340, 429, 542, 594, 742, 831, 903, 947, 1040, 1159, 1331, 1342], "also": [27, 37, 40, 47, 51, 127, 141, 144, 145, 150, 151, 153, 158, 168, 169, 172, 173, 178, 187, 193, 214, 229, 230, 256, 260, 264, 272, 274, 278, 286, 297, 309, 314, 317, 340, 425, 428, 437, 459, 463, 469, 495, 516, 579, 586, 587, 620, 630, 634, 635, 673, 700, 701, 702, 709, 710, 725, 756, 765, 766, 769, 772, 779, 781, 805, 821, 830, 831, 837, 870, 871, 886, 896, 898, 905, 914, 917, 919, 921, 947, 953, 1047, 1077, 1130, 1218, 1222, 1223, 1261, 1282, 1283, 1284, 1291, 1342, 1346, 1352, 1354, 1357, 1361, 1365, 1368, 1370, 1371], "alt": [340, 343, 1342, 1347], "altair": [161, 340, 343, 1342, 1347], "altern": [40, 178, 340, 827, 1362], "although": [287, 340, 906, 947], "alwai": [13, 37, 39, 47, 68, 70, 74, 139, 145, 149, 151, 200, 229, 244, 245, 249, 303, 326, 340, 409, 410, 578, 590, 714, 736, 737, 821, 831, 847, 875, 876, 881, 910, 947, 953, 1015, 1195, 1296, 1327, 1342, 1351, 1352, 1370, 1373], "am": [703, 1285], "amarillo": 1365, "amaz": [340, 343, 1342, 1347], "amazonaw": 32, "ambigu": [462, 463, 464, 477, 714, 717, 772, 1076, 1077, 1078, 1091, 1296, 1299], "america": 773, "amount": [51, 69, 92, 149, 153, 156, 157, 579, 775, 831, 1359], "amsterdam": [463, 1077], "an": [1, 30, 33, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 53, 55, 56, 60, 68, 69, 70, 97, 101, 104, 107, 114, 116, 124, 126, 127, 130, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 167, 169, 173, 183, 202, 203, 204, 210, 216, 219, 223, 225, 230, 241, 242, 243, 245, 246, 249, 260, 264, 269, 270, 272, 273, 277, 287, 292, 298, 302, 304, 308, 309, 314, 317, 326, 340, 343, 351, 373, 376, 388, 394, 400, 403, 405, 406, 408, 425, 426, 427, 428, 429, 430, 437, 441, 442, 459, 463, 466, 480, 486, 494, 495, 501, 502, 505, 539, 542, 545, 547, 569, 570, 578, 579, 591, 593, 603, 604, 625, 626, 627, 635, 636, 640, 641, 642, 644, 646, 648, 650, 653, 655, 657, 676, 677, 680, 686, 689, 693, 714, 716, 717, 719, 721, 735, 738, 746, 751, 755, 770, 771, 773, 774, 776, 778, 781, 785, 786, 787, 788, 789, 790, 791, 803, 805, 806, 809, 813, 818, 819, 821, 822, 827, 831, 849, 850, 851, 853, 857, 859, 863, 867, 871, 876, 877, 881, 890, 894, 896, 897, 906, 914, 917, 919, 921, 922, 930, 944, 947, 951, 952, 953, 980, 983, 995, 1000, 1006, 1009, 1011, 1012, 1014, 1028, 1030, 1036, 1037, 1038, 1039, 1040, 1047, 1051, 1080, 1094, 1101, 1103, 1144, 1156, 1159, 1162, 1164, 1186, 1195, 1223, 1224, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1241, 1243, 1258, 1259, 1262, 1268, 1271, 1275, 1296, 1298, 1299, 1301, 1303, 1323, 1325, 1342, 1360, 1362, 1365, 1369, 1370, 1372], "ana": [703, 1285], "anan": [703, 1285], "ananab": 1365, "and_": 831, "ang": 1365, "angl": [752, 753], "ani": [4, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 57, 58, 59, 67, 68, 70, 74, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 193, 195, 198, 200, 206, 210, 212, 213, 218, 220, 221, 223, 225, 240, 242, 243, 244, 245, 246, 249, 253, 263, 268, 269, 273, 274, 275, 287, 290, 293, 294, 297, 298, 299, 302, 303, 305, 308, 309, 317, 340, 343, 344, 349, 352, 353, 377, 409, 410, 411, 429, 430, 465, 483, 484, 494, 495, 499, 502, 504, 506, 510, 520, 530, 537, 542, 549, 577, 578, 579, 586, 596, 599, 601, 603, 604, 606, 608, 610, 611, 614, 615, 619, 624, 627, 634, 635, 636, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 662, 666, 676, 678, 692, 710, 711, 712, 713, 714, 716, 717, 719, 721, 730, 736, 737, 738, 745, 746, 747, 749, 758, 760, 761, 762, 789, 790, 791, 793, 797, 815, 821, 831, 847, 852, 853, 859, 860, 861, 866, 867, 875, 876, 877, 889, 890, 893, 894, 906, 910, 911, 914, 921, 922, 947, 951, 953, 955, 957, 960, 984, 1015, 1024, 1040, 1041, 1079, 1098, 1099, 1108, 1111, 1116, 1118, 1120, 1125, 1135, 1144, 1147, 1154, 1159, 1166, 1194, 1195, 1206, 1207, 1216, 1222, 1223, 1224, 1228, 1231, 1233, 1234, 1241, 1242, 1258, 1260, 1274, 1296, 1298, 1299, 1301, 1303, 1321, 1322, 1323, 1324, 1326, 1327, 1342, 1347, 1370, 1373], "anna": [256, 340, 886, 947], "annex": [697, 1279], "announc": [892, 947], "anoth": [94, 168, 201, 209, 215, 229, 245, 280, 340, 429, 432, 439, 515, 545, 583, 589, 593, 634, 643, 645, 647, 649, 651, 654, 656, 658, 689, 831, 849, 858, 870, 876, 900, 919, 947, 1040, 1049, 1100, 1108, 1129, 1162, 1222, 1223, 1271, 1342, 1364, 1365], "anti": [244, 340, 875, 930, 947, 1241, 1243, 1342, 1358], "antipattern": [139, 145, 149, 151], "any_horizont": 748, "anyth": [39, 273, 340], "anywher": [396, 399, 714, 716, 717, 1296, 1298, 1299], "ap": 1365, "apach": [35, 42, 43, 46, 125, 137, 141, 142, 145, 147, 155, 196, 340, 956], "apaya": [715, 1297], "api": [0, 32, 37, 42, 46, 47, 48, 49, 50, 125, 149, 151, 153, 156, 157, 158, 159, 178, 183, 197, 249, 326, 340, 579, 793, 831, 930, 947, 1195, 1342, 1369], "apia": [438, 1048], "app": [416, 708, 1022, 1290], "appear": [40, 64, 127, 164, 165, 340, 701, 740, 831, 953, 1329, 1342, 1371], "append": [38, 39, 41, 169, 218, 244, 245, 246, 340, 631, 821, 831, 875, 876, 877, 947, 1108, 1342], "appl": [205, 234, 244, 269, 270, 293, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 340, 410, 412, 416, 637, 682, 708, 737, 831, 875, 894, 925, 926, 928, 929, 931, 932, 933, 934, 935, 936, 937, 947, 1017, 1022, 1264, 1290, 1358, 1365], "appli": [10, 20, 37, 40, 47, 60, 134, 141, 153, 166, 169, 173, 193, 208, 223, 246, 249, 263, 286, 287, 297, 326, 340, 365, 440, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 465, 467, 478, 479, 481, 487, 488, 578, 579, 624, 642, 643, 644, 645, 648, 649, 655, 656, 673, 700, 701, 714, 716, 717, 721, 754, 765, 766, 779, 792, 793, 805, 810, 821, 831, 857, 877, 881, 889, 905, 906, 930, 947, 1029, 1050, 1053, 1054, 1055, 1058, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1072, 1074, 1075, 1079, 1081, 1092, 1093, 1095, 1104, 1105, 1195, 1229, 1230, 1232, 1236, 1282, 1283, 1296, 1298, 1299, 1303, 1342, 1351], "applic": [298, 340, 579, 831], "apply_on_context_ent": 193, "appropri": [40, 159, 221, 268, 298, 340, 469, 630, 831, 867, 893, 947, 1083, 1218, 1342], "approx": [356, 831], "approx_n_uniqu": [340, 831, 947, 1342], "approxim": [46, 199, 340, 356, 486, 750, 831, 846, 947, 963, 1103, 1342, 1364, 1373], "april": [466, 1080, 1365, 1366], "ar": [1, 10, 11, 17, 20, 30, 32, 34, 37, 39, 40, 42, 46, 47, 48, 49, 50, 51, 52, 59, 60, 91, 92, 99, 105, 121, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 169, 170, 171, 173, 183, 193, 197, 200, 201, 206, 208, 212, 213, 216, 219, 221, 222, 223, 228, 229, 230, 242, 244, 245, 246, 247, 249, 255, 256, 262, 264, 268, 272, 273, 274, 275, 278, 279, 283, 286, 293, 297, 298, 299, 302, 303, 307, 309, 310, 314, 315, 318, 319, 340, 352, 354, 368, 384, 389, 409, 410, 411, 419, 425, 427, 428, 437, 464, 469, 477, 482, 484, 485, 486, 487, 488, 493, 495, 516, 518, 520, 521, 523, 524, 525, 526, 528, 533, 563, 570, 578, 615, 620, 627, 630, 633, 634, 635, 636, 640, 643, 645, 647, 649, 651, 652, 654, 656, 658, 664, 667, 670, 672, 673, 678, 687, 691, 693, 694, 698, 699, 700, 701, 702, 704, 715, 717, 719, 724, 729, 731, 735, 736, 737, 746, 747, 749, 754, 757, 758, 759, 760, 761, 768, 770, 771, 773, 774, 789, 790, 795, 797, 800, 809, 813, 815, 818, 819, 821, 823, 824, 826, 830, 831, 832, 833, 836, 837, 838, 839, 840, 843, 847, 852, 853, 857, 860, 861, 865, 867, 870, 871, 875, 876, 877, 881, 885, 886, 890, 892, 893, 894, 896, 898, 899, 902, 905, 910, 913, 914, 917, 918, 919, 923, 947, 951, 953, 960, 961, 975, 991, 996, 1015, 1019, 1029, 1038, 1039, 1047, 1078, 1083, 1091, 1097, 1099, 1101, 1102, 1103, 1104, 1105, 1110, 1112, 1114, 1130, 1133, 1135, 1136, 1138, 1139, 1140, 1141, 1145, 1150, 1180, 1187, 1207, 1216, 1218, 1222, 1223, 1224, 1234, 1246, 1250, 1253, 1260, 1269, 1273, 1275, 1280, 1281, 1282, 1283, 1286, 1297, 1299, 1301, 1306, 1313, 1321, 1323, 1324, 1325, 1327, 1334, 1336, 1338, 1342, 1343, 1346, 1348, 1349, 1350, 1352, 1354, 1357, 1362, 1370, 1373], "arbitrari": [81, 225, 340, 432, 831, 858, 947, 953], "arbitrarili": [249, 340], "arcco": [831, 1342], "arccosh": [831, 1342], "arcsin": [831, 1342], "arcsinh": [831, 1342], "arctan": [752, 753, 831, 1342], "arctan2": 753, "arctanh": [831, 1342], "aren": [37, 47, 340, 947], "arg": [31, 51, 62, 63, 65, 66, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 136, 186, 190, 221, 263, 268, 340, 365, 624, 754, 780, 831, 867, 889, 893, 947, 1195, 1342, 1355], "arg_max": [831, 1342], "arg_min": [831, 1342], "arg_sort": [831, 1342], "arg_tru": [755, 831, 1342], "arg_uniqu": [831, 1342], "arg_wher": [366, 831], "argmax": [578, 831], "argument": [36, 39, 46, 134, 136, 138, 139, 143, 151, 153, 154, 169, 171, 173, 183, 206, 210, 217, 229, 230, 245, 262, 263, 272, 278, 279, 286, 299, 306, 310, 314, 315, 319, 340, 464, 477, 489, 495, 516, 578, 620, 624, 640, 673, 709, 710, 711, 729, 746, 752, 753, 754, 757, 758, 759, 760, 762, 777, 809, 813, 821, 827, 831, 859, 864, 870, 871, 876, 889, 896, 898, 899, 905, 912, 917, 918, 923, 944, 947, 953, 1078, 1091, 1130, 1291, 1292, 1293, 1324, 1342, 1364, 1365], "aris": 141, "arithmet": [223, 340], "arm": 161, "arm64": 161, "around": [37, 47, 340, 947], "arr": [298, 340, 823, 1323, 1334, 1342], "arr_bar": 1360, "arr_foo": 1360, "arrai": [124, 128, 139, 140, 143, 151, 154, 195, 216, 217, 292, 297, 298, 299, 340, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 397, 425, 426, 427, 428, 537, 552, 553, 554, 555, 557, 566, 567, 569, 572, 574, 578, 636, 642, 644, 646, 648, 650, 653, 655, 657, 663, 735, 758, 776, 790, 810, 831, 864, 947, 952, 955, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1036, 1037, 1038, 1039, 1044, 1101, 1154, 1169, 1170, 1171, 1172, 1174, 1182, 1183, 1184, 1186, 1189, 1191, 1192, 1224, 1229, 1230, 1232, 1235, 1236, 1237, 1244, 1248, 1317, 1321, 1323, 1324, 1325, 1342, 1363, 1369, 1372], "array_agg": 1363, "array_contain": 1363, "array_get": 1363, "array_length": 1363, "array_low": 1363, "array_mean": 1363, "array_revers": 1363, "array_sum": 1363, "array_to_str": 1363, "array_uniqu": 1363, "array_upp": 1363, "arraylik": [1044, 1342], "arrow": [42, 43, 48, 124, 125, 141, 142, 145, 147, 156, 196, 242, 274, 275, 292, 294, 298, 340, 947, 956, 1317, 1323, 1342], "arrowarrayexport": [124, 125], "arrowinvaliderror": [39, 340], "arrowstreamexport": [124, 125], "as_": [1342, 1347], "as_arrai": 790, "as_dict": [140, 262, 340], "as_expr": 953, "as_seri": [201, 293, 340, 849, 947, 953], "asarrai": [195, 955], "ascend": [230, 256, 272, 340, 620, 640, 831, 871, 886, 896, 947], "ascii": [7, 20, 414, 415, 678, 688, 690, 691, 695, 696, 702, 704, 715, 724, 953, 1020, 1021, 1260, 1270, 1272, 1273, 1277, 1278, 1284, 1286, 1297, 1306], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [678, 688, 690, 702, 1260, 1270, 1272, 1284], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1373, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 953, "ascii_t": 193, "ascii_uppercas": [308, 340], "asd": [679, 686, 1261, 1268], "asia": [131, 953, 1053, 1054, 1081], "asid": 469, "asin": 1363, "asind": 1363, "asof": [245, 340, 876, 947], "asofjoinstrategi": [245, 340, 876, 947], "assert": [162, 163, 164, 165, 169, 173, 272, 340, 843, 953], "assert_frame_equ": [163, 164, 215, 340, 1373], "assert_frame_not_equ": [162, 165], "assert_series_equ": [162, 165, 1100, 1342, 1373], "assert_series_not_equ": [163, 164], "assert_someth": 167, "assertionerror": [162, 163, 164, 165], "assign": [167, 230, 325, 340, 389, 570, 620, 630, 706, 707, 831, 871, 929, 947, 996, 1187, 1218, 1288, 1289, 1342], "associ": [38, 40, 52, 142, 144, 168, 171, 275, 340, 952, 1353, 1355, 1359], "assum": [32, 275, 340, 881, 930, 947, 1365], "assume_rol": 32, "assumpt": [578, 831], "async": [141, 853, 947], "async_engin": 141, "asynchron": [59, 141, 853, 947], "asyncio": [59, 141, 853, 947], "asyncresult": [59, 853, 947], "asyncsurrealdb": 141, "ata": 26, "atan": 1363, "atan2": [752, 753, 1363], "atan2_ab": 1367, "atan2d": [753, 1363], "atan2d_ab": 1367, "atand": 1363, "atg": 26, "atgataaaggag": 26, "atol": [162, 163, 164, 165], "attain": [673, 831], "attempt": [1, 432, 831, 858, 947], "attr": [340, 343, 1342, 1347], "attribut": [61, 64, 67, 68, 69, 70, 71, 79, 83, 166, 184, 185, 187, 188, 340, 343, 823, 824, 826, 827, 832, 833, 836, 838, 839, 840, 922, 947, 1334, 1336, 1338, 1342, 1343, 1347, 1348, 1349, 1350], "attributeerror": 1, "audi": [293, 340, 637, 831], "august": 469, "australia": 772, "auth": 34, "authent": [39, 143, 151, 153, 154, 155, 156, 158, 178, 340], "author": 1, "auto": [37, 39, 42, 46, 47, 48, 49, 50, 60, 124, 126, 127, 128, 130, 143, 148, 149, 151, 153, 154, 156, 157, 158, 178, 183, 304, 340, 852, 853, 863, 890, 903, 947, 1373], "auto_structifi": [278, 314, 340, 898, 917, 947], "autofilt": [40, 340], "autofit": [40, 340], "autogener": [139, 140, 144, 150, 153], "automat": [8, 37, 47, 60, 124, 126, 127, 128, 130, 131, 136, 139, 140, 141, 142, 148, 149, 151, 153, 156, 157, 169, 173, 175, 178, 278, 287, 314, 340, 578, 635, 709, 710, 711, 810, 831, 898, 906, 917, 947, 1222, 1223, 1291, 1292, 1293, 1326, 1342, 1352, 1354, 1357, 1370], "autumn": [700, 701], "avail": [40, 46, 50, 133, 141, 142, 143, 154, 155, 167, 180, 181, 182, 193, 264, 287, 339, 340, 469, 630, 810, 823, 824, 826, 830, 831, 832, 833, 836, 837, 838, 839, 840, 843, 906, 945, 946, 947, 953, 1042, 1218, 1334, 1336, 1338, 1342, 1343, 1346, 1348, 1349, 1350, 1361], "available_timezon": [67, 953], "averag": [40, 340, 485, 486, 487, 488, 630, 831, 1102, 1103, 1104, 1105, 1218, 1342, 1359], "avg": 1363, "avocado": 1365, "avoid": [169, 173, 221, 268, 274, 340, 351, 831, 867, 893, 947], "avro": [35, 137, 186, 340, 843], "avrocompress": [35, 340], "aw": [32, 37, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 156, 157, 158, 183, 340, 947], "awai": 1364, "await": [59, 141, 853, 941, 947], "await_result": [892, 947], "awar": [10, 141, 242, 274, 275, 294, 340, 486, 678, 688, 690, 702, 717, 831, 947, 1103, 1260, 1270, 1272, 1284, 1299, 1342], "aws_access_key_id": [39, 143, 154, 158, 340], "aws_region": [39, 154, 158, 340], "aws_secret_access_kei": [39, 143, 154, 158, 340], "awsassumerolekwarg": 32, "axi": [255, 307, 340, 343, 752, 753, 885, 913, 947, 1342, 1347], "aya": [704, 1286, 1297], "az": [143, 154, 155], "azur": [33, 37, 39, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 155, 156, 157, 158, 183, 340, 947], "azure_storage_account_kei": [143, 154, 155], "azure_storage_account_nam": [143, 154, 155], "b": [1, 10, 35, 37, 39, 42, 43, 46, 55, 60, 83, 96, 99, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 141, 144, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 242, 243, 244, 247, 248, 250, 252, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 349, 351, 352, 354, 355, 365, 367, 372, 377, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 408, 410, 411, 423, 430, 434, 466, 469, 489, 491, 493, 494, 495, 497, 500, 507, 508, 511, 514, 515, 516, 518, 521, 523, 524, 525, 526, 531, 537, 542, 549, 559, 560, 561, 562, 578, 579, 584, 600, 603, 604, 605, 606, 607, 608, 609, 617, 618, 620, 624, 627, 630, 634, 635, 637, 639, 665, 671, 673, 680, 684, 689, 693, 700, 701, 725, 726, 737, 740, 744, 746, 747, 748, 749, 750, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 810, 812, 813, 814, 815, 816, 820, 827, 831, 846, 847, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 893, 894, 895, 897, 898, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 947, 953, 959, 962, 984, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1019, 1023, 1024, 1041, 1044, 1080, 1083, 1097, 1100, 1101, 1108, 1111, 1130, 1135, 1154, 1176, 1177, 1178, 1179, 1216, 1221, 1262, 1266, 1271, 1275, 1282, 1283, 1307, 1309, 1310, 1312, 1324, 1329, 1342, 1352, 1354, 1355, 1357, 1358, 1359, 1360, 1365, 1366, 1367, 1370], "b1": [53, 55], "b2": [53, 55], "b345": [40, 340], "b4": [40, 340], "b_b": [287, 340], "b_btm_by_a": [410, 831], "b_btm_by_b": [410, 831], "b_by_ca": [410, 737, 831], "b_by_cb": [410, 737, 831], "b_is_not_nan": [524, 831], "b_isnan": [523, 831], "b_isnul": [526, 831], "b_not_nul": [525, 831], "b_revers": [604, 608, 637, 831], "b_suffix": 609, "b_sum": [319, 923], "b_top_by_a": [737, 831], "b_top_by_b": [737, 831], "ba": [432, 489, 593, 708, 777, 831, 953], "back": [4, 52, 158, 218, 230, 280, 298, 299, 340, 593, 620, 701, 831, 852, 863, 871, 890, 900, 903, 922, 947, 1108, 1324, 1342], "backend": [39, 141, 142, 143, 154, 155, 340, 343, 1342, 1347], "background": [340, 344, 852, 853, 946, 947], "backward": [46, 50, 220, 245, 340, 392, 437, 457, 494, 831, 866, 876, 947, 1047, 1071, 1111, 1342], "backward_fil": [500, 664, 831], "bad": [700, 701, 1282, 1283], "balanc": [172, 174, 1373], "ballon_dor": [685, 687, 1267, 1269], "banana": [205, 293, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 410, 637, 682, 708, 737, 831, 926, 928, 931, 932, 933, 934, 935, 936, 937, 1365], "banded_column": [40, 340], "banded_row": [40, 340], "bar": [35, 37, 39, 42, 43, 44, 45, 46, 135, 148, 149, 201, 204, 205, 206, 210, 211, 212, 213, 214, 215, 218, 221, 223, 225, 226, 227, 232, 234, 235, 236, 238, 244, 248, 249, 250, 251, 252, 253, 254, 257, 258, 261, 264, 266, 268, 269, 270, 273, 276, 277, 278, 280, 285, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 305, 306, 311, 312, 313, 318, 340, 343, 413, 432, 513, 583, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 670, 679, 681, 684, 686, 687, 703, 705, 707, 712, 713, 750, 761, 762, 763, 778, 783, 784, 787, 788, 794, 796, 798, 799, 801, 802, 809, 812, 816, 820, 821, 827, 831, 849, 854, 855, 859, 860, 861, 862, 867, 873, 874, 875, 888, 893, 894, 897, 898, 911, 912, 916, 947, 952, 953, 1018, 1166, 1253, 1261, 1263, 1266, 1268, 1269, 1285, 1289, 1294, 1295, 1342, 1356, 1358, 1359, 1360, 1362, 1365, 1368], "bar2": 1365, "bar22": [223, 340], "bar_": 705, "bar_3": [295, 340], "bar_4": [295, 340], "bar_a": [264, 340], "bar_at_2": 1360, "bar_avg": 1359, "bar_b": [264, 340], "bar_color": [40, 340], "bar_max": 1359, "bar_median": 1359, "bar_min": 1359, "bar_negative_border_color_sam": [40, 340], "bar_negative_color_sam": [40, 340], "bar_std": 1359, "bar_sum": 1359, "bar_var": 1359, "bare": [586, 587, 953], "base": [31, 40, 65, 110, 112, 144, 171, 213, 221, 230, 246, 268, 272, 340, 438, 446, 482, 485, 486, 487, 488, 495, 510, 515, 573, 574, 578, 579, 625, 627, 635, 640, 643, 645, 647, 649, 651, 654, 656, 658, 719, 831, 867, 871, 877, 893, 896, 947, 953, 1048, 1056, 1097, 1102, 1103, 1104, 1105, 1125, 1129, 1190, 1191, 1195, 1214, 1216, 1222, 1223, 1301, 1333, 1342, 1358, 1364, 1373], "base64": [394, 395, 680, 681, 1000, 1001, 1262, 1263], "base_nam": [304, 340], "base_utc_offset": [446, 1056], "baseexcept": 1370, "basi": [40, 144, 169, 340], "basic": [40, 195, 340, 585, 955, 1373], "basic_chart": [40, 340], "batch": [43, 58, 59, 133, 134, 140, 141, 147, 149, 157, 159, 274, 302, 340, 852, 881, 947], "batch_siz": [37, 47, 134, 139, 140, 141, 149, 157, 159, 302, 340, 947], "batchedcsvread": 140, "baz": [225, 235, 236, 306, 340, 687, 705, 707, 778, 787, 802, 827, 874, 912, 947, 952, 953, 1269, 1289, 1356, 1362, 1365], "bb": [953, 1042, 1342, 1365, 1370], "bbb": [1, 40, 340, 725, 727, 728, 953], "bc": [689, 701, 814, 1271], "bcbc45": 1365, "bea": 12, "bear": 953, "bearer": 178, "bearer_token": 178, "beauti": 12, "becaus": [149, 157, 216, 230, 247, 249, 308, 326, 340, 499, 542, 570, 831, 871, 930, 947, 1101, 1159, 1195, 1342], "becom": [171, 245, 339, 340, 876, 945, 946, 947], "bed3": [40, 340], "been": [5, 30, 40, 176, 197, 321, 340, 501, 579, 597, 630, 831, 925, 1218, 1342], "beetl": [293, 340, 637, 831], "befor": [40, 47, 48, 49, 50, 66, 67, 134, 136, 139, 141, 144, 153, 159, 162, 163, 164, 165, 175, 193, 218, 230, 245, 287, 297, 302, 306, 340, 403, 404, 406, 407, 427, 428, 429, 578, 620, 621, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 684, 724, 731, 759, 807, 808, 831, 871, 873, 876, 912, 947, 1009, 1010, 1012, 1013, 1038, 1039, 1040, 1108, 1211, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1266, 1306, 1313, 1342, 1358], "beforehand": [714, 716, 717, 1296, 1298, 1299], "begin": [12, 40, 340, 485, 487, 488, 685, 715, 831, 1102, 1104, 1105, 1267, 1297, 1342], "behav": [221, 268, 340, 495, 579, 710, 711, 831, 867, 893, 947], "behavior": [46, 50, 151, 158, 212, 213, 221, 244, 245, 340, 376, 501, 545, 547, 684, 778, 787, 831, 860, 861, 875, 876, 944, 947, 983, 1162, 1164, 1266], "behaviour": [10, 52, 212, 213, 221, 268, 287, 340, 677, 685, 686, 689, 700, 701, 738, 810, 831, 860, 861, 867, 893, 906, 947, 1259, 1267, 1268, 1271, 1282, 1283], "behind": 175, "being": [13, 31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 68, 70, 74, 134, 135, 139, 140, 141, 143, 144, 149, 150, 151, 153, 154, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 201, 217, 246, 287, 295, 297, 302, 309, 340, 343, 344, 429, 430, 510, 579, 627, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 684, 756, 758, 776, 789, 790, 831, 849, 852, 853, 864, 877, 906, 914, 947, 1024, 1040, 1041, 1125, 1216, 1228, 1231, 1233, 1234, 1266, 1318, 1321, 1326, 1342, 1347, 1373], "belong": [1, 230, 340, 871, 947], "below": [19, 39, 143, 144, 154, 155, 213, 221, 264, 268, 340, 469, 494, 691, 700, 701, 715, 770, 771, 773, 774, 818, 819, 821, 827, 831, 867, 893, 947, 1083, 1273, 1282, 1283, 1297], "best": [249, 326, 340, 579, 831, 1195, 1342], "better": [249, 297, 298, 326, 340, 415, 579, 696, 831, 848, 930, 947, 1021, 1241, 1243, 1278, 1342], "between": [24, 60, 95, 166, 167, 169, 173, 198, 206, 244, 256, 266, 274, 332, 340, 377, 411, 433, 434, 469, 516, 540, 549, 559, 560, 561, 562, 621, 627, 628, 650, 651, 676, 692, 752, 753, 756, 761, 763, 790, 804, 807, 808, 831, 875, 886, 891, 936, 947, 984, 1016, 1023, 1043, 1044, 1083, 1130, 1157, 1166, 1176, 1177, 1178, 1179, 1211, 1216, 1217, 1233, 1258, 1274, 1342, 1359, 1367], "between_ab": [516, 831], "beyond": [722, 1304], "bia": [487, 488, 528, 652, 670, 831, 1104, 1105, 1145, 1234, 1253, 1342], "bias": [528, 670, 831, 1145, 1253, 1342], "big": [140, 397, 1003], "big_fil": 140, "bigidx": 132, "bigqueri": 142, "bigquery_format": 186, "bin": [430, 510, 627, 719, 745, 824, 831, 1041, 1125, 1216, 1301, 1336, 1342, 1347], "bin2int": 397, "bin_count": [510, 831, 1125, 1342], "bin_i": [745, 831], "bin_x": [745, 831], "bin_xor_xi": [745, 831], "binari": [40, 42, 135, 141, 209, 280, 340, 393, 394, 395, 396, 397, 398, 399, 432, 593, 680, 831, 858, 900, 947, 953, 999, 1000, 1002, 1003, 1004, 1005, 1262, 1361], "binary_str": [745, 831], "bind": 144, "birthdai": 139, "bit": [66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 401, 402, 403, 404, 406, 407, 632, 677, 831, 1007, 1009, 1010, 1012, 1013, 1220, 1259, 1342, 1361, 1365], "bit_and": 1363, "bit_count": 1363, "bit_length": 1363, "bit_or": 1363, "bit_xor": 1363, "bitmap": [216, 340, 1101, 1342], "bitwis": [353, 400, 405, 408, 619, 745, 746, 747, 748, 749, 831, 1006, 1011, 1014, 1342, 1363, 1369], "bitwise_and": [831, 1342], "bitwise_count_on": [831, 1342], "bitwise_count_zero": [831, 1342], "bitwise_leading_on": [831, 1342], "bitwise_leading_zero": [831, 1342], "bitwise_or": [831, 1342], "bitwise_trailing_on": [831, 1342], "bitwise_trailing_zero": [831, 1342], "bitwise_xor": [831, 1342], "bla": [679, 686, 1261, 1268], "black": [249, 340, 393, 394, 395, 396, 399], "blindli": [542, 1159], "block": [20, 59, 229, 305, 340, 821, 853, 870, 894, 911, 920, 921, 930, 947, 1241, 1243, 1342], "blue": [51, 91, 92, 393, 394, 395, 396, 399, 742, 831, 1331, 1342], "bob": [139, 256, 340, 886, 947, 1371], "bodi": [40, 340, 344], "bold": [40, 340], "bom": [37, 47, 340, 947], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 39, 40, 46, 47, 48, 49, 50, 52, 58, 59, 60, 91, 124, 125, 126, 127, 129, 130, 131, 135, 136, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 195, 197, 200, 201, 202, 203, 208, 210, 215, 220, 221, 222, 223, 227, 228, 229, 230, 234, 235, 237, 238, 239, 242, 244, 245, 253, 262, 264, 268, 269, 273, 274, 275, 276, 281, 284, 286, 287, 290, 293, 295, 298, 299, 303, 304, 305, 306, 309, 310, 312, 314, 322, 324, 327, 330, 340, 351, 352, 353, 354, 355, 365, 368, 369, 372, 376, 377, 385, 390, 393, 394, 396, 399, 410, 411, 412, 416, 424, 425, 426, 427, 428, 429, 430, 437, 449, 465, 482, 483, 484, 485, 487, 488, 504, 506, 507, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 538, 542, 545, 547, 549, 558, 565, 570, 571, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 594, 595, 614, 615, 617, 619, 620, 622, 623, 627, 630, 632, 641, 642, 644, 646, 648, 650, 652, 653, 655, 657, 661, 663, 665, 670, 672, 673, 676, 677, 678, 679, 680, 682, 688, 689, 690, 692, 700, 701, 702, 705, 706, 708, 714, 716, 717, 719, 721, 725, 727, 728, 737, 739, 742, 745, 746, 747, 748, 749, 751, 754, 755, 756, 760, 761, 764, 765, 770, 771, 773, 774, 785, 786, 789, 790, 791, 793, 797, 803, 806, 809, 810, 813, 815, 818, 819, 821, 822, 831, 847, 849, 850, 852, 853, 857, 859, 863, 866, 867, 870, 871, 875, 876, 881, 885, 890, 893, 894, 901, 903, 905, 906, 910, 911, 912, 913, 914, 917, 922, 926, 928, 931, 934, 947, 952, 953, 955, 960, 961, 972, 975, 976, 979, 983, 984, 992, 997, 999, 1000, 1002, 1005, 1016, 1017, 1019, 1022, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1047, 1059, 1079, 1097, 1099, 1100, 1102, 1104, 1105, 1112, 1114, 1121, 1122, 1125, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1150, 1151, 1155, 1159, 1162, 1164, 1166, 1175, 1182, 1188, 1195, 1207, 1209, 1212, 1213, 1216, 1218, 1219, 1220, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1243, 1244, 1248, 1253, 1255, 1258, 1259, 1260, 1261, 1262, 1264, 1270, 1271, 1272, 1274, 1282, 1283, 1284, 1287, 1288, 1290, 1296, 1298, 1299, 1301, 1303, 1318, 1323, 1324, 1328, 1331, 1342, 1351, 1352, 1354, 1360, 1365, 1370], "boolean": [52, 169, 200, 221, 223, 268, 286, 303, 340, 352, 353, 354, 368, 369, 372, 393, 396, 399, 410, 449, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 533, 534, 538, 617, 619, 622, 623, 673, 693, 737, 744, 745, 754, 755, 813, 821, 831, 847, 867, 893, 905, 910, 947, 953, 960, 961, 973, 975, 976, 979, 999, 1059, 1112, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1150, 1151, 1155, 1209, 1212, 1213, 1243, 1259, 1333, 1342, 1362], "border": 20, "both": [10, 25, 37, 47, 51, 91, 92, 141, 144, 158, 204, 230, 244, 245, 246, 256, 272, 273, 299, 309, 340, 355, 419, 430, 469, 489, 516, 627, 640, 643, 645, 647, 649, 651, 654, 656, 658, 704, 770, 771, 773, 774, 789, 790, 818, 819, 827, 831, 842, 871, 875, 876, 877, 886, 896, 914, 947, 953, 1029, 1083, 1130, 1286, 1324, 1342, 1370, 1371], "boto3": 32, "bottom": [200, 340, 410, 831, 847, 947], "bottom_k": [303, 340, 410, 736, 737, 831, 910, 947, 1327, 1342], "bottom_k_bi": [409, 736, 737, 831], "bound": [106, 139, 140, 216, 230, 340, 376, 419, 516, 545, 547, 570, 576, 741, 751, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 947, 983, 1029, 1101, 1130, 1162, 1164, 1193, 1330, 1342, 1360], "boundari": [230, 340, 419, 510, 722, 831, 871, 947, 1029, 1125, 1304, 1342], "box": [20, 249, 340], "box_draw": 20, "branch": [58, 59, 852, 853, 863, 890, 903, 947], "break": [31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 68, 70, 74, 134, 135, 143, 149, 151, 153, 154, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 244, 246, 287, 297, 302, 309, 340, 343, 344, 429, 430, 510, 579, 627, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 758, 789, 790, 831, 852, 853, 875, 877, 906, 914, 947, 1024, 1040, 1041, 1125, 1216, 1228, 1231, 1233, 1234, 1321, 1326, 1342, 1347], "breakpoint": [430, 510, 627, 831, 1041, 1125, 1216, 1342], "breezah": 153, "breviti": 193, "broadcast": [702, 758, 953, 1284], "broader": 953, "brotli": [46, 50, 340, 947], "brussel": [463, 1077], "bst": [442, 446, 463, 1052, 1056, 1077], "bucket": [39, 143, 154, 155, 158, 340, 464, 477, 510, 831, 1078, 1091, 1125, 1342], "bud": [700, 701, 1282, 1283], "budget": 1351, "buffer": [139, 140, 141, 216, 242, 340, 397, 1003, 1101, 1342], "buffer_s": [242, 340], "bug": [578, 579, 831, 881, 930, 947, 1195, 1342], "build": [57, 125, 953, 1373], "built": 95, "builtin": [137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 209, 340, 432, 831, 858, 947], "bundl": 193, "busi": [437, 756, 1047], "business_day_count": [437, 1047], "by_alternate_row": 1, "by_dtyp": 953, "by_first_letter_of_column_nam": 53, "by_first_letter_of_column_valu": 53, "by_index": 953, "by_left": [245, 340, 876, 947], "by_nam": 953, "by_pred": [273, 340], "by_right": [245, 340, 876, 947], "bye": 1, "byi": 1365, "bys": [230, 340, 871, 947], "byte": [35, 37, 40, 42, 43, 46, 47, 50, 135, 137, 138, 139, 140, 145, 146, 147, 148, 149, 152, 153, 156, 157, 209, 216, 280, 340, 397, 414, 415, 432, 593, 689, 690, 691, 695, 696, 704, 715, 831, 858, 900, 947, 1003, 1020, 1021, 1101, 1271, 1272, 1273, 1277, 1278, 1286, 1297, 1342, 1365], "bytesio": [40, 42, 43, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 209, 280, 340, 432, 593, 831, 858, 900, 947], "c": [1, 10, 35, 37, 39, 42, 43, 46, 53, 55, 60, 99, 125, 127, 129, 131, 136, 144, 153, 197, 198, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 217, 221, 223, 226, 227, 228, 229, 230, 232, 234, 235, 243, 244, 247, 248, 250, 252, 254, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 273, 276, 277, 278, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 298, 299, 300, 303, 307, 308, 309, 311, 312, 314, 319, 322, 323, 324, 327, 328, 330, 333, 334, 340, 344, 349, 351, 352, 354, 372, 392, 410, 430, 469, 507, 516, 537, 549, 579, 586, 603, 604, 618, 620, 624, 627, 665, 706, 714, 737, 740, 747, 749, 750, 752, 753, 754, 757, 758, 760, 761, 762, 763, 765, 766, 768, 778, 779, 780, 783, 784, 787, 788, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 812, 814, 815, 816, 820, 827, 831, 847, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 870, 871, 875, 879, 888, 890, 893, 894, 895, 897, 898, 903, 904, 905, 906, 910, 913, 914, 917, 919, 923, 926, 927, 928, 931, 932, 934, 937, 938, 947, 953, 1023, 1041, 1130, 1154, 1216, 1288, 1296, 1310, 1329, 1342, 1352, 1354, 1355, 1357, 1358, 1359, 1360, 1365, 1370], "c00": 953, "c01": 953, "c02": 953, "c03": 953, "c05": 953, "c1": 389, "c123": 1365, "c2": 389, "c20": 953, "c25": 953, "c3": 389, "c40": 953, "c45": 1365, "c4d79b": [40, 340], "c50": 953, "c567": [40, 340], "c60": 953, "c75": 953, "c80": 953, "c8ae6d2b276": [40, 340], "c93": 953, "c95": 953, "c96": 953, "c97": 953, "c98": 953, "c99": 953, "c_btm_by_a": [410, 831], "c_btm_by_b": [410, 831], "c_by_ca": [410, 737, 831], "c_by_cb": [410, 737, 831], "c_c_c": [810, 906, 947], "c_contigu": [298, 340], "c_max": [620, 831], "c_mean_squar": [319, 923], "c_min": [620, 831], "c_top_by_a": [737, 831], "c_top_by_b": [737, 831], "c_total": 1370, "cach": [51, 58, 59, 91, 92, 119, 145, 153, 156, 158, 162, 163, 164, 165, 177, 634, 635, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 714, 716, 717, 721, 831, 842, 852, 853, 863, 890, 903, 947, 1019, 1222, 1223, 1296, 1298, 1299, 1303, 1342], "cadi": [264, 340], "cafe": [719, 1301], "caf\u00e9": [414, 415, 695, 696, 953, 1020, 1021, 1277, 1278], "calamin": 144, "calcul": [40, 46, 50, 52, 208, 230, 288, 311, 340, 433, 485, 486, 487, 488, 528, 540, 559, 566, 572, 576, 652, 670, 675, 741, 743, 763, 807, 808, 812, 820, 831, 857, 871, 907, 915, 947, 1042, 1043, 1102, 1103, 1104, 1105, 1145, 1157, 1176, 1234, 1253, 1257, 1332, 1342], "calendar": [66, 67, 230, 245, 272, 310, 340, 440, 450, 452, 459, 464, 477, 481, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 1050, 1060, 1065, 1073, 1078, 1091, 1095, 1103, 1342], "calendar_year": [450, 481], "call": [37, 39, 40, 42, 46, 47, 48, 49, 50, 51, 58, 59, 129, 134, 136, 139, 140, 141, 143, 144, 145, 149, 151, 153, 154, 156, 157, 158, 162, 163, 164, 165, 169, 173, 183, 193, 200, 229, 230, 247, 249, 272, 287, 298, 303, 339, 340, 409, 410, 425, 428, 437, 578, 579, 603, 604, 606, 608, 610, 611, 634, 635, 666, 736, 737, 756, 762, 827, 831, 847, 852, 853, 863, 870, 871, 890, 896, 903, 906, 910, 944, 945, 946, 947, 953, 1015, 1047, 1195, 1223, 1249, 1323, 1327, 1342, 1352, 1356, 1370], "callabl": [53, 54, 55, 56, 134, 153, 223, 249, 263, 269, 326, 340, 389, 570, 578, 579, 604, 605, 624, 641, 765, 766, 779, 792, 793, 805, 831, 881, 889, 894, 930, 947, 996, 1187, 1195, 1228, 1342], "caller": [142, 256, 340, 570, 881, 886, 930, 947], "cam": [269, 340, 894, 947], "can": [1, 14, 27, 37, 39, 40, 42, 46, 47, 48, 49, 50, 51, 52, 58, 59, 66, 67, 69, 83, 91, 92, 127, 134, 139, 140, 141, 143, 144, 145, 149, 150, 151, 153, 154, 156, 157, 158, 159, 167, 168, 169, 173, 175, 178, 183, 193, 195, 200, 202, 212, 213, 214, 223, 225, 229, 230, 237, 239, 241, 244, 245, 249, 260, 264, 272, 274, 275, 278, 280, 281, 286, 297, 298, 302, 303, 304, 308, 314, 317, 326, 340, 343, 352, 389, 410, 425, 428, 429, 432, 437, 456, 457, 459, 463, 466, 469, 477, 486, 492, 495, 516, 542, 570, 578, 579, 586, 590, 593, 594, 600, 603, 604, 606, 608, 610, 611, 620, 625, 627, 632, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 663, 665, 670, 673, 678, 687, 694, 700, 701, 702, 709, 710, 711, 714, 725, 737, 754, 756, 769, 772, 779, 781, 785, 786, 789, 793, 810, 821, 827, 830, 831, 842, 847, 848, 852, 853, 858, 860, 861, 863, 871, 875, 876, 896, 898, 900, 901, 903, 905, 906, 910, 917, 920, 921, 947, 953, 955, 996, 1040, 1047, 1070, 1071, 1073, 1077, 1078, 1080, 1083, 1091, 1103, 1109, 1130, 1159, 1187, 1195, 1200, 1214, 1216, 1220, 1223, 1241, 1243, 1244, 1247, 1253, 1260, 1261, 1269, 1276, 1282, 1283, 1284, 1291, 1292, 1293, 1296, 1321, 1323, 1342, 1347, 1357, 1370], "cancel": [852, 947], "candid": [685, 687, 1267, 1269], "cannot": [1, 46, 50, 101, 104, 139, 140, 144, 145, 147, 149, 150, 151, 158, 175, 193, 249, 275, 276, 298, 317, 326, 340, 394, 469, 489, 558, 579, 594, 661, 680, 706, 727, 793, 831, 903, 921, 922, 930, 947, 953, 1000, 1083, 1175, 1195, 1240, 1262, 1288, 1323, 1342], "capabl": [1, 40, 340], "capac": [216, 284, 340, 1101, 1248, 1342], "capit": [722, 1304, 1365], "captur": [685, 687, 700, 701, 1267, 1269, 1282, 1283], "car": [269, 293, 340, 637, 831, 894, 947], "cardin": [199, 340, 356, 750, 831, 846, 947, 963, 1342], "care": [40, 281, 340, 579, 620, 663, 831, 901, 947, 1244, 1342], "cars_revers": [637, 831], "cartesian": [244, 340, 875, 947], "case": [40, 51, 52, 59, 99, 124, 126, 127, 128, 130, 136, 141, 148, 149, 157, 158, 175, 218, 230, 242, 245, 249, 264, 272, 274, 275, 294, 297, 298, 340, 438, 486, 578, 590, 591, 604, 620, 640, 677, 678, 686, 688, 689, 690, 700, 701, 702, 722, 831, 853, 871, 876, 893, 896, 947, 953, 1048, 1103, 1108, 1259, 1260, 1268, 1270, 1271, 1272, 1282, 1283, 1284, 1304, 1321, 1342], "cast": [1, 39, 54, 55, 124, 126, 127, 130, 136, 162, 163, 164, 165, 223, 230, 263, 272, 297, 298, 302, 314, 340, 355, 427, 428, 439, 466, 469, 480, 619, 624, 625, 632, 634, 640, 693, 694, 724, 731, 735, 759, 760, 811, 831, 871, 889, 896, 917, 947, 953, 1024, 1038, 1039, 1049, 1080, 1083, 1094, 1214, 1220, 1275, 1276, 1306, 1313, 1319, 1323, 1325, 1326, 1342, 1363], "cast_str_to_int": [263, 340, 889, 947], "cast_to_supertyp": [136, 831], "cat": [26, 51, 91, 92, 430, 627, 677, 679, 720, 723, 735, 760, 826, 831, 953, 1041, 1125, 1216, 1259, 1261, 1302, 1305, 1338, 1342], "catalog": [0, 843], "catalog_nam": [179, 181, 182, 183], "cataloginfo": [180, 191], "categor": [39, 51, 70, 91, 92, 94, 162, 163, 164, 165, 244, 295, 340, 412, 413, 414, 415, 416, 430, 627, 634, 635, 735, 831, 953, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1041, 1216, 1222, 1223, 1325, 1342], "categori": [40, 51, 70, 92, 295, 340, 413, 430, 510, 627, 831, 1018, 1041, 1125, 1216, 1318, 1342], "categorical_as_str": [162, 163, 164, 165], "categoricalord": 64, "categoricaltyp": [292, 340], "caus": [107, 116, 125, 139, 140, 141, 153, 197, 218, 298, 340, 578, 831, 1108, 1323, 1342], "cba": 711, "cbrt": [831, 1342, 1363], "cbrt_a": 1364, "cc": [489, 777, 831, 953, 1042, 1342, 1365], "ccc": [1, 40, 340, 725, 727, 728, 953, 1365], "ccy": 1373, "cd": [701, 725, 727, 728, 953], "cd34": 701, "cdatainterfac": [125, 196, 956], "cde": [953, 1365], "cdt": [464, 477, 1078, 1091], "ceil": [54, 831, 1342, 1363], "ceil_a": 1364, "cell": [15, 16, 40, 264, 340], "cent": [440, 1282], "center": [15, 16, 40, 340, 485, 487, 488, 641, 642, 644, 646, 648, 650, 653, 655, 657, 831, 1102, 1104, 1105, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1342], "central": [154, 155, 193, 528, 670, 831, 1145, 1253, 1342], "centuri": 1366, "certain": [47, 48, 49, 50, 59, 235, 310, 340, 710, 711, 827, 852, 853, 890, 947, 1342], "certainli": [714, 716, 717, 1296, 1298, 1299], "cest": [463, 1077], "cet": [463, 1077], "cfg": [2, 4, 17, 193], "cfg_ascii_fram": 193, "cfg_markdown": 193, "cfg_verbos": 193, "cfoo": [919, 947], "chain": [603, 604, 606, 608, 610, 611, 821], "chanc": [166, 169, 173, 1373], "chang": [30, 31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 52, 58, 59, 68, 70, 74, 125, 134, 135, 136, 139, 140, 141, 143, 144, 149, 151, 153, 154, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 246, 287, 297, 302, 309, 316, 340, 343, 344, 429, 430, 433, 469, 510, 579, 620, 621, 627, 634, 639, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 758, 789, 790, 831, 852, 853, 877, 906, 914, 920, 947, 953, 1023, 1024, 1040, 1041, 1083, 1125, 1211, 1216, 1222, 1227, 1228, 1231, 1233, 1234, 1248, 1321, 1326, 1342, 1347], "changes_length": [136, 831], "char": [27, 139, 153, 686, 1268], "char_length": 1365, "charact": [7, 9, 12, 20, 26, 27, 28, 37, 38, 47, 93, 138, 139, 140, 142, 153, 340, 414, 415, 459, 683, 684, 686, 691, 695, 696, 698, 699, 700, 701, 704, 705, 706, 709, 710, 711, 712, 713, 715, 722, 724, 890, 947, 953, 1020, 1021, 1073, 1265, 1266, 1268, 1273, 1277, 1278, 1280, 1281, 1282, 1283, 1286, 1287, 1288, 1291, 1292, 1293, 1297, 1304, 1306, 1365], "character_length": 1365, "characterist": [169, 173], "charli": [139, 1371], "chart": [40, 340, 343, 890, 947, 1342, 1347], "cheap": [202, 203, 279, 315, 340, 850, 851, 899, 918, 947, 1028, 1030, 1342], "cheaper": [545, 1162], "check": [39, 67, 101, 139, 140, 153, 162, 163, 164, 165, 177, 215, 240, 244, 245, 340, 372, 393, 396, 399, 412, 416, 507, 516, 520, 538, 677, 682, 689, 708, 831, 875, 876, 881, 947, 979, 999, 1002, 1005, 1017, 1022, 1100, 1121, 1122, 1132, 1135, 1142, 1144, 1155, 1259, 1264, 1271, 1290, 1342], "check_column_ord": [162, 163], "check_dtyp": [162, 163, 164, 165, 952, 1100, 1342], "check_exact": [162, 163, 164, 165], "check_nam": [164, 165, 1100, 1342], "check_ord": [164, 165], "check_row_ord": [162, 163], "check_sorted": [245, 340, 876, 947], "choos": [46, 48, 50, 230, 264, 340, 469, 871, 947, 1083], "chrono": [37, 47, 95, 340, 466, 469, 714, 716, 717, 721, 947, 1080, 1083, 1296, 1298, 1299, 1303, 1365, 1366], "chunk": [14, 50, 133, 139, 140, 143, 149, 151, 153, 154, 156, 157, 158, 169, 173, 218, 243, 259, 298, 340, 355, 631, 831, 947, 962, 1027, 1108, 1119, 1201, 1219, 1317, 1323, 1342], "chunk_length": 1342, "chunkedarrai": [124, 259, 340], "citi": [700, 701], "clang": 161, "clariti": [273, 340], "class": [1, 17, 31, 32, 33, 34, 51, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 110, 112, 166, 167, 178, 184, 185, 187, 188, 275, 280, 340, 593, 789, 818, 827, 831, 837, 843, 855, 862, 897, 916, 922, 947, 952, 1322, 1342, 1346, 1354, 1370], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 209, 340, 432, 501, 831, 858, 947, 1352, 1370], "claus": [843, 1360, 1369], "clean": [714, 716, 717, 1296, 1298, 1299], "cleaner": 193, "cleanli": [10, 228, 340, 1370], "clear": [51, 91, 203, 340, 851, 947, 1030, 1342], "clearer": 127, "clickhous": 142, "client": [32, 141, 178], "clip": [831, 1342], "clipboard": [36, 138, 340, 843], "clone": [126, 127, 128, 129, 130, 202, 298, 340, 850, 947, 1028, 1342], "close": [40, 47, 48, 49, 50, 141, 230, 272, 287, 340, 430, 516, 575, 627, 640, 643, 645, 647, 649, 651, 654, 656, 658, 670, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 896, 906, 947, 1041, 1130, 1216, 1253, 1342], "closedinterv": [230, 272, 340, 516, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 896, 947, 1130, 1342], "closest": [124, 245, 340, 876, 947, 1359, 1364], "closur": [643, 645, 654, 656, 658, 831], "cloud": [34, 37, 39, 42, 46, 47, 48, 49, 50, 141, 143, 149, 151, 153, 154, 155, 156, 157, 158, 159, 183, 340, 843, 892, 947], "cloudi": [700, 701], "cloudpickl": 161, "cluster": 158, "cluster_with_column": [58, 59, 852, 853, 863, 890, 903, 947], "co": [686, 831, 1268, 1342, 1363], "coalesc": [60, 244, 245, 309, 340, 514, 688, 690, 714, 831, 875, 876, 914, 947, 1272, 1296, 1358, 1363], "code": [193, 204, 244, 340, 393, 394, 395, 396, 399, 432, 579, 663, 831, 858, 875, 879, 947, 1244, 1342, 1352], "codebas": 193, "coeffici": [206, 340, 670, 831, 1253, 1342], "coerc": [60, 633, 831], "coercion": [47, 48, 49, 50, 58, 59, 633, 831, 852, 853, 863, 890, 903, 947], "col": [1, 12, 37, 40, 47, 52, 53, 54, 55, 128, 130, 153, 167, 169, 221, 229, 230, 238, 240, 244, 245, 246, 249, 260, 263, 264, 268, 272, 273, 278, 286, 297, 302, 306, 308, 314, 319, 340, 344, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 509, 510, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 601, 602, 603, 605, 607, 609, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 754, 755, 757, 758, 759, 760, 762, 764, 767, 769, 770, 772, 773, 775, 779, 780, 781, 782, 783, 784, 794, 796, 798, 799, 801, 804, 805, 809, 810, 812, 814, 816, 817, 820, 821, 831, 867, 870, 871, 873, 875, 876, 877, 889, 893, 896, 898, 905, 906, 912, 917, 919, 923, 947, 953, 1073, 1077, 1159, 1241, 1243, 1272, 1276, 1296, 1342, 1373], "col0": [169, 1373], "col1": [169, 264, 340, 947, 1373], "col2": [169, 264, 340, 947, 1373], "col3": [264, 340, 1373], "col4": 1373, "col_nam": [263, 340, 579, 821, 831, 889, 947], "cole": 135, "coli": [40, 340, 610, 611, 953, 1373], "collaps": [47, 48, 49, 50, 58, 59, 852, 853, 863, 890, 903, 947], "collapse_join": [47, 48, 49, 50, 58, 59, 852, 853, 863, 890, 903, 947], "collect": [55, 58, 59, 153, 154, 155, 159, 169, 170, 173, 212, 213, 247, 264, 287, 292, 305, 306, 340, 489, 520, 579, 759, 777, 781, 809, 810, 813, 831, 846, 847, 849, 850, 853, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 898, 900, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 944, 946, 947, 953, 1135, 1342, 1352, 1353, 1354, 1357, 1358, 1370, 1371, 1373], "collect_al": [55, 59, 852, 853, 947], "collect_all_async": [853, 947], "collect_async": [59, 947], "collect_schema": [55, 247, 340, 855, 862, 889, 897, 916, 947], "collis": 60, "colnam": [24, 40, 153, 340], "color": [51, 91, 92, 326, 340, 343, 393, 394, 395, 396, 399, 680, 742, 831, 930, 999, 1000, 1001, 1002, 1005, 1262, 1331, 1342, 1365], "column": [10, 16, 17, 18, 21, 22, 24, 39, 40, 46, 50, 51, 52, 53, 60, 67, 83, 92, 96, 100, 124, 126, 127, 128, 129, 130, 131, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 169, 185, 188, 198, 200, 201, 204, 206, 207, 210, 211, 212, 213, 214, 217, 221, 222, 225, 226, 228, 229, 230, 234, 235, 240, 241, 242, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 286, 288, 289, 290, 293, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 325, 340, 343, 344, 351, 352, 354, 365, 374, 383, 385, 388, 397, 410, 419, 423, 424, 430, 440, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 462, 465, 466, 467, 469, 478, 479, 481, 489, 491, 495, 497, 510, 515, 516, 531, 537, 543, 545, 565, 569, 570, 579, 585, 586, 588, 590, 592, 603, 605, 606, 607, 608, 609, 610, 611, 620, 627, 631, 633, 634, 635, 636, 638, 639, 640, 643, 645, 647, 649, 651, 654, 656, 658, 665, 666, 672, 673, 676, 684, 689, 691, 692, 702, 706, 707, 714, 715, 716, 717, 718, 719, 721, 726, 729, 737, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 847, 849, 856, 859, 860, 861, 862, 864, 867, 870, 871, 875, 876, 877, 881, 882, 883, 884, 885, 887, 888, 891, 893, 894, 896, 897, 898, 899, 901, 905, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 929, 930, 947, 952, 953, 960, 961, 981, 990, 992, 995, 1003, 1019, 1023, 1029, 1034, 1035, 1041, 1050, 1053, 1054, 1055, 1058, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1072, 1074, 1075, 1079, 1080, 1081, 1083, 1092, 1093, 1095, 1107, 1125, 1129, 1154, 1160, 1162, 1182, 1186, 1216, 1223, 1224, 1227, 1247, 1258, 1266, 1271, 1274, 1288, 1289, 1296, 1298, 1299, 1300, 1301, 1303, 1309, 1312, 1318, 1319, 1331, 1342, 1358, 1360, 1362, 1364, 1365, 1367, 1368, 1371, 1372, 1373], "column_0": [1, 249, 304, 340, 892, 947], "column_1": [249, 304, 340, 1367], "column_2": [304, 340, 1367], "column_abc": 15, "column_format": [40, 340], "column_nam": [269, 304, 340, 894, 947], "column_tot": [40, 340], "column_width": [40, 340], "column_x": [139, 140, 144, 150, 153], "column_xyz": 15, "columnar": [128, 130, 242, 274, 340], "columnformatdict": [40, 340], "columninfo": [188, 191], "columnnameorselector": [201, 210, 212, 213, 255, 262, 264, 275, 295, 305, 306, 307, 308, 340, 849, 859, 860, 861, 885, 911, 912, 913, 947], "columnnotfounderror": [225, 226, 340], "columntotalsdefinit": [40, 340], "columnwidthsdefinit": [40, 340], "colx": [40, 340, 610, 611, 953, 1357, 1373], "colz": [953, 1373], "com": [32, 40, 142, 340, 485, 487, 488, 685, 686, 687, 831, 1102, 1104, 1105, 1267, 1268, 1269, 1342], "combin": [46, 50, 58, 59, 60, 221, 230, 231, 245, 264, 268, 272, 310, 340, 353, 366, 477, 486, 499, 594, 619, 635, 640, 709, 710, 711, 770, 771, 773, 774, 818, 819, 821, 831, 852, 853, 863, 871, 876, 890, 893, 896, 903, 947, 1078, 1091, 1103, 1223, 1291, 1292, 1293, 1342, 1358, 1371], "come": [119, 142, 230, 305, 307, 340, 437, 456, 457, 528, 570, 756, 831, 871, 911, 913, 947, 1047, 1070, 1071, 1145, 1342], "comm_subexpr_elim": [58, 59, 852, 853, 863, 890, 903, 947], "comm_subplan_elim": [58, 59, 852, 853, 863, 890, 903, 947], "comma": [36, 37, 139, 140, 153, 340], "comment": [139, 140, 153, 184, 185, 187, 188], "comment_prefix": [139, 140, 153], "common": [52, 58, 59, 60, 99, 139, 140, 153, 309, 340, 604, 837, 852, 853, 863, 890, 903, 914, 947, 1346], "compact": 1368, "compani": 142, "compar": [158, 162, 163, 164, 165, 215, 221, 268, 340, 483, 484, 504, 506, 516, 530, 577, 614, 615, 831, 867, 893, 947, 1023, 1099, 1100, 1207, 1342], "comparison": [159, 221, 268, 340, 867, 893, 947], "compat": [20, 40, 42, 43, 46, 48, 50, 94, 292, 340, 677, 679, 685, 686, 687, 689, 700, 701, 947, 953, 1083, 1259, 1261, 1267, 1268, 1269, 1271, 1282, 1283, 1317, 1342, 1352, 1365, 1366, 1370], "compat_level": [42, 43, 48, 292, 340, 947, 1317, 1342], "compatibleframetyp": [1353, 1355, 1370], "compatlevel": [42, 43, 48, 292, 340, 947, 1317, 1342], "competit": [630, 831, 1218, 1342], "compil": [57, 370, 371, 535, 536, 951, 977, 978, 1152, 1153], "complement": 953, "complet": [139, 141, 153, 1371], "complex": [170, 409, 410, 429, 736, 737, 831, 1015, 1040, 1327, 1342], "compliant": [40, 340, 469, 1083], "compon": [441, 465, 469, 714, 717, 775, 1051, 1079, 1083, 1296, 1299], "compos": 1371, "composit": [83, 1373], "compound": [131, 275, 340, 953], "comprehens": 167, "compress": [35, 39, 42, 43, 46, 48, 50, 340, 638, 831, 947, 1226, 1342], "compression_level": [46, 50, 340, 947], "comput": [58, 60, 97, 216, 229, 245, 264, 299, 305, 319, 332, 340, 348, 357, 358, 359, 360, 361, 362, 379, 380, 381, 386, 387, 391, 417, 420, 421, 422, 425, 426, 427, 428, 434, 482, 485, 486, 487, 488, 490, 528, 552, 553, 554, 555, 559, 560, 561, 562, 566, 572, 573, 574, 575, 600, 620, 621, 626, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 667, 668, 669, 670, 674, 733, 734, 742, 747, 749, 752, 753, 754, 761, 763, 776, 797, 807, 808, 821, 831, 852, 870, 873, 875, 876, 892, 911, 919, 923, 936, 947, 958, 964, 965, 966, 967, 968, 969, 986, 987, 988, 993, 994, 998, 1025, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1044, 1097, 1101, 1102, 1103, 1104, 1105, 1106, 1145, 1169, 1170, 1171, 1172, 1176, 1177, 1178, 1179, 1183, 1189, 1190, 1191, 1192, 1200, 1211, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1250, 1251, 1252, 1253, 1256, 1315, 1316, 1324, 1331, 1342, 1364, 1367], "computecontext": [892, 947], "computeerror": [590, 719, 1301], "concat": [51, 91, 92, 100, 140, 245, 340, 876, 919, 947, 1027, 1119, 1201, 1219, 1342, 1363], "concat_list": [542, 776], "concat_w": [287, 340, 810, 906, 947, 1363, 1370], "concaten": [51, 60, 91, 92, 223, 263, 340, 624, 676, 692, 758, 759, 760, 831, 889, 947, 1027, 1201, 1258, 1274, 1342, 1365], "concatmethod": 60, "conclus": [128, 130, 340, 947], "concret": [169, 173], "condit": [40, 213, 221, 246, 268, 273, 340, 412, 416, 495, 516, 682, 708, 755, 779, 821, 831, 867, 877, 893, 947, 1130, 1342, 1358, 1363, 1369], "conditional_format": [40, 340], "conditionalformatdict": [40, 340], "config": [0, 52, 208, 278, 297, 314, 340, 678, 688, 690, 702, 770, 771, 773, 774, 775, 843, 852, 857, 898, 917, 947, 1260, 1272, 1284], "configur": [5, 32, 39, 143, 154, 155, 193, 340, 343, 844, 852, 863, 890, 903, 922, 947, 1342, 1347], "configure_axisx": [340, 343, 1342, 1347], "configure_point": [340, 343, 1342, 1347], "conflat": [516, 831], "conform": 1373, "confus": [99, 352, 523, 524, 702, 831], "conjunct": [40, 91, 141, 144, 150, 167, 340, 785, 788, 947], "conn": 141, "connect": [37, 38, 42, 46, 47, 48, 49, 50, 70, 139, 141, 142, 145, 147, 149, 151, 153, 156, 157, 158, 159, 183, 340, 844, 947], "connectionorcursor": [38, 141, 340], "connector": 142, "connectorx": [141, 142, 161], "consecut": [220, 340, 392, 494, 500, 676, 692, 700, 831, 866, 947, 1111, 1258, 1274, 1283, 1342], "consid": [31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 68, 70, 74, 91, 92, 134, 135, 139, 140, 141, 143, 149, 151, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 200, 212, 213, 215, 241, 246, 249, 255, 274, 287, 297, 302, 303, 305, 307, 309, 340, 343, 344, 410, 419, 429, 430, 499, 510, 578, 579, 586, 602, 603, 606, 608, 610, 611, 627, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 737, 758, 765, 779, 789, 790, 827, 831, 847, 852, 853, 860, 861, 863, 877, 885, 890, 903, 906, 910, 911, 913, 914, 930, 947, 953, 1019, 1024, 1029, 1040, 1041, 1100, 1125, 1195, 1216, 1228, 1231, 1233, 1234, 1241, 1243, 1321, 1326, 1342, 1347, 1352], "consider": 135, "consist": [229, 262, 298, 340, 714, 770, 771, 789, 870, 947, 953, 962, 1108, 1296, 1323, 1342], "consola": [40, 340], "const": 10, "constant": [216, 272, 340, 438, 486, 492, 790, 831, 896, 947, 1048, 1101, 1103, 1109, 1342], "constrain": [52, 153, 212, 213, 340, 860, 861, 947, 953], "constraint": [221, 268, 340, 495, 603, 604, 606, 608, 610, 611, 821, 831, 867, 893, 947, 953, 1372], "construct": [51, 91, 92, 99, 124, 126, 127, 128, 129, 130, 131, 135, 141, 340, 501, 803, 806, 822, 827, 831, 858, 947, 1019, 1342, 1357], "construct_categor": 51, "constructor": [135, 144, 173], "contain": [5, 37, 38, 39, 40, 47, 52, 57, 95, 126, 129, 131, 136, 141, 142, 143, 151, 154, 155, 158, 168, 169, 171, 173, 200, 205, 212, 213, 214, 230, 238, 243, 260, 297, 298, 302, 303, 309, 321, 340, 352, 354, 377, 396, 399, 412, 416, 432, 507, 520, 549, 579, 676, 678, 682, 685, 687, 689, 692, 694, 707, 708, 724, 746, 747, 748, 749, 760, 793, 831, 847, 855, 858, 860, 861, 862, 871, 890, 910, 914, 925, 947, 953, 960, 961, 984, 1017, 1022, 1121, 1122, 1166, 1201, 1258, 1260, 1264, 1267, 1269, 1271, 1274, 1276, 1289, 1290, 1306, 1317, 1323, 1342, 1360], "contains_with_expr": 393, "contains_with_lit": 393, "content": [13, 47, 48, 49, 50, 666, 831, 947, 951, 1249, 1342], "context": [51, 91, 92, 175, 260, 287, 340, 350, 495, 542, 578, 579, 590, 672, 673, 742, 762, 778, 781, 787, 788, 793, 802, 806, 809, 830, 831, 842, 843, 892, 906, 919, 947, 1159, 1331, 1342, 1357, 1370, 1372], "contigu": [60, 124, 125, 129, 139, 140, 143, 145, 147, 149, 151, 153, 154, 156, 157, 158, 267, 298, 340], "continu": [430, 627, 670, 831, 1041, 1216, 1253, 1342, 1359], "contrast": 775, "control": [10, 11, 40, 59, 60, 144, 167, 169, 286, 287, 297, 340, 635, 673, 810, 831, 852, 853, 863, 890, 903, 905, 906, 922, 944, 947, 1223, 1321, 1342, 1354, 1357, 1370], "conveni": [218, 302, 340, 939, 962, 1108, 1342, 1352], "convers": [125, 197, 242, 243, 274, 275, 294, 298, 299, 340, 442, 714, 716, 717, 721, 843, 1052, 1296, 1298, 1299, 1303, 1323, 1324, 1342, 1368, 1370], "convert": [39, 95, 125, 129, 136, 143, 144, 150, 154, 197, 275, 293, 294, 295, 296, 297, 298, 299, 301, 302, 340, 388, 389, 431, 442, 466, 469, 569, 570, 578, 604, 629, 687, 714, 716, 717, 718, 719, 721, 726, 831, 947, 995, 996, 1023, 1052, 1080, 1083, 1186, 1187, 1269, 1296, 1298, 1299, 1300, 1301, 1303, 1309, 1312, 1320, 1321, 1322, 1323, 1324, 1326, 1342, 1365, 1367, 1368, 1370], "convert_time_zon": [463, 1077], "coo": [269, 340, 894, 947], "coord": 729, "coordin": [40, 340], "copi": [36, 124, 125, 138, 195, 197, 202, 203, 243, 292, 298, 299, 314, 340, 492, 831, 850, 851, 917, 947, 955, 1028, 1030, 1109, 1317, 1322, 1323, 1324, 1342, 1370], "corasick": [678, 688, 690, 702, 1260, 1270, 1272, 1284], "core": [1, 246, 340, 877, 947, 1370, 1373], "cores_right": [246, 340, 877, 947], "corner": [20, 40, 131, 340], "corr": 340, "corrcoef": [206, 340], "correct": [136, 144, 150, 487, 488, 528, 570, 652, 670, 831, 881, 947, 1104, 1105, 1145, 1234, 1253, 1342], "correctli": [40, 340, 578, 831], "correl": [206, 340, 761, 807], "correlationmethod": 761, "correspond": [230, 245, 272, 298, 310, 340, 410, 450, 459, 464, 477, 579, 630, 640, 643, 645, 647, 649, 651, 654, 656, 658, 737, 770, 771, 773, 774, 818, 819, 831, 852, 871, 876, 896, 947, 1060, 1073, 1078, 1091, 1218, 1342, 1359], "cosd": 1363, "cosh": [831, 1342], "cosin": [357, 358, 420, 421, 578, 831, 964, 965, 1031, 1032, 1342, 1367], "cost": [246, 275, 340, 700, 877, 947, 1283], "cost_usd": [700, 1283], "cot": [831, 1342, 1363], "cotang": [422, 831, 1033, 1342, 1367], "cotd": 1363, "could": [39, 89, 97, 340, 667, 765, 775, 779, 831, 849, 857, 947, 1250, 1342], "count": [40, 159, 199, 208, 230, 260, 261, 272, 304, 310, 316, 331, 340, 356, 373, 382, 424, 437, 486, 510, 531, 539, 551, 556, 579, 602, 618, 640, 643, 645, 647, 649, 651, 654, 656, 658, 679, 740, 742, 750, 756, 764, 788, 801, 831, 846, 857, 871, 888, 896, 920, 935, 947, 953, 963, 980, 989, 1035, 1042, 1047, 1103, 1125, 1148, 1156, 1168, 1173, 1202, 1210, 1261, 1329, 1331, 1342, 1347, 1351, 1363], "count_digit": 679, "count_num": [40, 340], "counterpart": 135, "countri": [245, 340, 438, 876, 947, 1048], "country_holidai": [437, 756, 1047], "covari": [136, 763, 808, 831], "cover": 10, "cow": [698, 699, 1280, 1281], "cpu": [139, 140, 161, 297, 340, 922, 1321, 1342], "crab": [677, 689, 1259, 1271], "crate": [37, 47, 95, 340, 677, 679, 685, 686, 687, 689, 700, 701, 714, 716, 717, 721, 947, 953, 1259, 1261, 1267, 1268, 1269, 1271, 1282, 1283, 1296, 1298, 1299, 1303], "creat": [38, 40, 51, 92, 124, 128, 130, 139, 140, 141, 142, 145, 147, 151, 154, 155, 167, 168, 169, 170, 171, 172, 173, 174, 193, 202, 203, 230, 261, 264, 272, 297, 298, 310, 314, 317, 340, 343, 344, 441, 464, 477, 486, 570, 578, 631, 640, 643, 645, 647, 649, 651, 654, 656, 658, 759, 769, 770, 771, 772, 773, 774, 775, 789, 817, 818, 819, 827, 831, 850, 851, 857, 863, 871, 896, 917, 921, 947, 951, 952, 1028, 1030, 1041, 1051, 1078, 1091, 1103, 1208, 1216, 1219, 1321, 1323, 1342, 1347, 1369, 1370, 1373], "create_async_engin": 141, "create_engin": [38, 340], "created_at": [184, 187, 188], "created_bi": [184, 187, 188], "creation": 140, "credenti": [31, 32, 33, 34, 37, 39, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 156, 157, 158, 183, 340, 843, 947], "credential_provid": [37, 39, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 156, 157, 158, 183, 340, 947], "credentialproviderfunct": [37, 39, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 156, 157, 158, 183, 340, 947], "cross": [244, 340, 875, 947, 1358], "crustacean": [689, 1271], "cst": [464, 477, 1078, 1091], "csv": [36, 37, 47, 48, 49, 50, 138, 139, 140, 144, 145, 153, 186, 340, 843, 947], "csvencod": [139, 140, 153], "csvquotestyl": [37, 47, 340, 947], "ctx": [1351, 1353, 1354, 1355, 1356, 1357, 1370], "cube": [1, 56, 417, 625, 831, 1025, 1342, 1364], "cuda": 922, "cum_count": [831, 1342], "cum_count_revers": [424, 831], "cum_max": [831, 1342], "cum_max_all_fil": [425, 831], "cum_max_revers": [425, 831], "cum_min": [831, 1342], "cum_min_revers": [426, 831], "cum_prod": [349, 831, 1342], "cum_prod_revers": [427, 831], "cum_reduc": 765, "cum_sum": [513, 620, 730, 768, 831, 873, 947, 1144, 1342], "cum_sum_revers": [428, 831], "cumsum_horizont": 767, "cumul": [424, 425, 426, 427, 428, 764, 765, 766, 767, 768, 831, 1035, 1036, 1037, 1038, 1039, 1342], "cumulative_ev": [831, 1342], "cumulative_sal": [620, 831], "current": [2, 3, 5, 6, 30, 37, 38, 41, 42, 46, 47, 48, 49, 50, 131, 141, 142, 149, 151, 153, 156, 157, 158, 166, 167, 169, 170, 171, 172, 173, 174, 183, 202, 203, 210, 244, 245, 269, 287, 297, 302, 340, 343, 344, 446, 570, 621, 831, 850, 851, 859, 875, 876, 894, 906, 922, 947, 953, 1028, 1030, 1048, 1056, 1211, 1321, 1326, 1342, 1347, 1354, 1370], "cursor": [38, 141, 340], "custom": [1, 27, 39, 40, 53, 54, 55, 56, 98, 135, 172, 174, 208, 249, 264, 326, 340, 389, 437, 466, 469, 570, 578, 579, 641, 742, 756, 792, 793, 831, 857, 881, 930, 947, 996, 1047, 1080, 1083, 1187, 1195, 1228, 1331, 1342, 1373], "customis": [40, 340], "cut": [627, 831, 1216, 1342], "cxx": 1365, "cypher": 141, "d": [28, 35, 37, 39, 40, 42, 43, 46, 127, 159, 198, 221, 228, 230, 231, 232, 235, 244, 248, 268, 291, 292, 302, 308, 312, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 349, 351, 424, 447, 466, 469, 516, 585, 624, 665, 679, 686, 700, 701, 706, 714, 716, 717, 757, 758, 775, 781, 810, 831, 867, 871, 875, 893, 906, 926, 928, 931, 932, 933, 934, 935, 936, 937, 947, 953, 1023, 1035, 1057, 1080, 1083, 1130, 1154, 1261, 1268, 1282, 1283, 1288, 1296, 1298, 1299, 1310, 1342, 1358, 1360, 1362, 1365, 1366], "d1": [40, 340, 441], "d2": 441, "d3": 441, "d789": [40, 340], "d_4": [706, 1288], "dai": [66, 67, 84, 230, 243, 245, 272, 310, 340, 343, 437, 456, 457, 459, 460, 462, 464, 466, 469, 470, 477, 479, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 756, 769, 770, 771, 772, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 953, 1047, 1070, 1071, 1073, 1074, 1076, 1078, 1080, 1083, 1084, 1091, 1093, 1103, 1342, 1366], "dark": 1351, "data": [0, 1, 10, 18, 19, 21, 24, 28, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 55, 58, 59, 60, 65, 66, 67, 69, 80, 81, 83, 84, 92, 95, 99, 101, 104, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 191, 195, 197, 203, 204, 214, 216, 217, 218, 228, 229, 230, 242, 243, 244, 247, 249, 262, 263, 267, 273, 274, 275, 277, 281, 284, 292, 297, 298, 299, 302, 304, 314, 318, 338, 340, 344, 352, 353, 354, 357, 358, 359, 360, 361, 362, 365, 368, 369, 370, 371, 372, 374, 377, 379, 380, 381, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 411, 413, 414, 415, 419, 420, 421, 422, 423, 430, 431, 432, 437, 438, 439, 440, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 491, 502, 504, 505, 506, 510, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 530, 531, 535, 536, 538, 543, 549, 551, 558, 569, 571, 577, 579, 614, 615, 619, 620, 627, 629, 630, 633, 634, 635, 636, 638, 639, 643, 645, 647, 649, 651, 654, 656, 658, 659, 661, 663, 668, 669, 670, 676, 679, 680, 681, 684, 685, 686, 687, 691, 692, 693, 694, 695, 696, 704, 705, 706, 707, 714, 715, 716, 717, 719, 721, 724, 733, 734, 735, 738, 739, 742, 745, 751, 759, 762, 769, 770, 771, 772, 773, 774, 775, 785, 786, 788, 789, 790, 791, 792, 793, 803, 806, 817, 818, 819, 822, 827, 831, 843, 850, 851, 852, 858, 862, 864, 870, 871, 897, 901, 917, 947, 952, 955, 960, 961, 973, 975, 976, 977, 978, 979, 981, 983, 984, 995, 997, 999, 1000, 1001, 1003, 1004, 1016, 1018, 1020, 1021, 1028, 1029, 1030, 1041, 1042, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1100, 1101, 1103, 1107, 1108, 1125, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1150, 1151, 1152, 1153, 1155, 1160, 1166, 1168, 1175, 1186, 1188, 1195, 1209, 1216, 1218, 1222, 1223, 1224, 1226, 1227, 1238, 1240, 1248, 1253, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1273, 1274, 1275, 1276, 1277, 1278, 1286, 1287, 1288, 1289, 1296, 1297, 1298, 1299, 1301, 1303, 1306, 1317, 1322, 1323, 1324, 1325, 1328, 1341, 1342, 1351, 1358, 1365, 1370, 1372], "data_bar": [40, 340], "data_bar_2010": [40, 340], "data_label": [40, 340], "data_page_s": [46, 50, 340, 947], "data_source_format": 188, "databas": [38, 123, 141, 142, 340, 843], "databrick": 178, "databricks_format": 186, "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 79, 96, 99, 100, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 158, 162, 163, 166, 167, 193, 338, 339, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 827, 831, 843, 852, 853, 855, 857, 859, 862, 864, 868, 871, 875, 876, 877, 878, 879, 881, 885, 886, 890, 895, 897, 904, 906, 911, 912, 913, 914, 916, 919, 923, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 947, 952, 953, 1041, 1042, 1077, 1103, 1125, 1195, 1216, 1272, 1276, 1288, 1289, 1312, 1318, 1319, 1331, 1342, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1373], "dataframeplot": [340, 343], "dataload": [302, 340], "datapoint": [230, 340, 871, 947], "dataset": [14, 46, 70, 139, 140, 143, 144, 150, 153, 154, 159, 244, 302, 340, 528, 831, 843, 875, 881, 947, 1145, 1342, 1371], "datasourceformat": [188, 191], "datat": [40, 340], "datatyp": [37, 47, 124, 126, 127, 128, 130, 132, 146, 148, 149, 151, 152, 157, 158, 170, 171, 173, 214, 223, 340, 411, 489, 665, 735, 758, 777, 791, 827, 831, 843, 862, 947, 952, 953, 1016, 1042, 1096, 1195, 1247, 1325, 1342, 1368], "date": [16, 40, 52, 67, 139, 140, 142, 144, 150, 151, 153, 156, 158, 159, 201, 208, 228, 230, 243, 245, 272, 287, 340, 343, 372, 437, 439, 440, 441, 442, 445, 447, 449, 450, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 538, 620, 640, 643, 645, 647, 649, 651, 654, 656, 658, 714, 716, 735, 756, 770, 771, 773, 774, 781, 789, 791, 817, 831, 849, 857, 871, 876, 896, 947, 953, 979, 1047, 1049, 1050, 1051, 1052, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1103, 1155, 1204, 1205, 1296, 1298, 1325, 1342, 1363, 1366, 1368], "date32": [243, 340], "date_format": [37, 47, 340, 947], "date_min": 459, "date_minus_1y_2mon": 1073, "date_part": 1363, "date_plus_1i": [459, 1073], "date_rang": [245, 310, 340, 445, 447, 460, 468, 479, 773, 774, 876, 947, 1055, 1069, 1074, 1075, 1092, 1093], "date_right": [245, 340, 876, 947], "datetim": [16, 37, 40, 47, 52, 95, 131, 143, 151, 154, 156, 158, 169, 170, 171, 173, 183, 184, 187, 188, 201, 208, 228, 230, 243, 245, 272, 287, 310, 340, 343, 372, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 538, 587, 620, 640, 643, 645, 647, 649, 651, 654, 656, 658, 714, 717, 735, 756, 769, 770, 771, 773, 774, 775, 781, 789, 791, 818, 819, 831, 849, 857, 871, 876, 896, 947, 952, 953, 979, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1103, 1155, 1204, 1205, 1296, 1299, 1323, 1325, 1342, 1365, 1366], "datetime_format": [37, 47, 340, 947], "datetime_rang": [230, 340, 439, 442, 456, 457, 459, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 480, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 831, 871, 947, 1048, 1049, 1052, 1056, 1057, 1058, 1063, 1064, 1066, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091], "datetime_str": 466, "datetimeindex": 129, "david": 1371, "day_nam": [466, 469], "day_of_month": [445, 460, 479], "day_of_year": [445, 460, 479], "daylight": [230, 245, 272, 310, 340, 438, 446, 459, 464, 477, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 1056, 1073, 1078, 1091], "dayofweek": 1366, "dayofyear": 1366, "days_diff": 470, "db": [38, 141, 142, 340], "dbapi2": 141, "dbc": [679, 1261], "dbreadengin": 142, "dbwriteengin": [38, 340], "dbwritemod": [38, 340], "dd": [40, 340, 1365], "ddd": [1, 40, 340, 725, 727, 728], "dddd": 1365, "ddof": [288, 311, 340, 386, 391, 566, 572, 653, 654, 657, 658, 675, 743, 761, 763, 807, 808, 812, 820, 831, 907, 915, 947, 993, 998, 1183, 1189, 1235, 1237, 1257, 1332, 1342], "ddww": 1365, "de": 1365, "deal": [46, 50, 242, 340, 352, 354, 462, 463, 630, 714, 717, 746, 747, 748, 749, 772, 831, 947, 960, 961, 1076, 1077, 1218, 1296, 1299, 1342], "debug": [29, 881, 947, 1373], "decad": [1351, 1366], "decai": [485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342], "decemb": [469, 1083], "decim": [9, 10, 11, 27, 28, 37, 40, 47, 139, 140, 153, 340, 344, 659, 718, 831, 947, 953, 1238, 1300, 1342, 1364], "decimal_comma": [139, 140, 153], "decimal_separ": [9, 27], "declar": [124, 126, 127, 128, 130, 141, 148, 149, 157, 297, 302, 340, 947, 953, 1351], "decod": [139, 140, 693], "decompos": [306, 340, 912, 947], "decompress": [46, 48, 50, 340, 947], "decor": [51, 53, 54, 55, 56, 169, 173, 249, 340, 579, 831, 842, 843, 1195, 1342], "dedic": [1, 125, 242, 274, 340, 953, 1370], "deem": [208, 340, 857, 947], "deepcopi": [202, 340, 850, 947, 1028, 1342], "def": [1, 51, 53, 54, 55, 56, 141, 167, 169, 173, 193, 263, 304, 340, 349, 624, 683, 686, 711, 745, 792, 831, 853, 889, 947, 953, 1265, 1268, 1373], "default": [4, 5, 9, 10, 14, 27, 30, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 58, 59, 60, 64, 67, 68, 69, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 158, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 193, 208, 209, 212, 213, 216, 225, 229, 230, 231, 242, 244, 245, 253, 255, 262, 264, 272, 273, 274, 275, 276, 280, 283, 287, 288, 290, 295, 297, 298, 302, 305, 307, 308, 309, 311, 316, 325, 340, 351, 352, 354, 377, 384, 389, 397, 430, 432, 437, 462, 463, 469, 482, 484, 485, 487, 488, 508, 520, 545, 549, 558, 563, 564, 566, 570, 572, 573, 578, 586, 587, 590, 593, 612, 613, 615, 620, 621, 627, 630, 634, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 664, 666, 675, 676, 685, 692, 704, 709, 710, 711, 714, 716, 717, 719, 721, 742, 743, 746, 748, 751, 755, 756, 760, 761, 763, 770, 771, 772, 773, 774, 775, 778, 781, 785, 786, 787, 789, 790, 791, 797, 803, 806, 809, 812, 813, 815, 818, 819, 820, 822, 831, 852, 853, 857, 858, 860, 861, 863, 870, 871, 875, 876, 885, 890, 892, 896, 900, 902, 903, 906, 907, 911, 913, 914, 915, 920, 922, 929, 947, 951, 953, 960, 961, 984, 991, 996, 1003, 1029, 1041, 1042, 1047, 1076, 1077, 1083, 1097, 1101, 1102, 1104, 1105, 1123, 1135, 1162, 1166, 1175, 1180, 1181, 1187, 1204, 1205, 1211, 1216, 1218, 1222, 1223, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1240, 1246, 1249, 1257, 1258, 1259, 1267, 1271, 1274, 1286, 1291, 1292, 1293, 1296, 1298, 1299, 1301, 1303, 1321, 1323, 1331, 1332, 1342, 1364, 1365, 1373], "default_match": [677, 689], "default_scop": 34, "defaultazurecredenti": 33, "defaultdict": [275, 340], "defer": [193, 340, 343, 344, 1342, 1347], "defin": [37, 40, 47, 67, 70, 141, 148, 166, 167, 169, 201, 212, 213, 217, 230, 249, 260, 263, 272, 309, 326, 340, 415, 516, 545, 579, 624, 627, 639, 640, 643, 645, 647, 649, 651, 654, 656, 658, 691, 696, 704, 715, 722, 770, 771, 773, 774, 789, 790, 793, 813, 818, 819, 831, 849, 860, 861, 864, 871, 889, 896, 914, 930, 947, 951, 952, 953, 1021, 1130, 1162, 1195, 1216, 1227, 1273, 1278, 1286, 1297, 1304, 1342], "definit": [40, 71, 340, 528, 831, 952, 953, 1145, 1342], "deflat": [35, 340], "deg": 1367, "degre": [288, 311, 340, 566, 572, 629, 653, 654, 657, 658, 675, 743, 753, 763, 807, 808, 812, 820, 831, 907, 915, 947, 1235, 1237, 1257, 1332, 1342, 1363], "delet": [70, 1358, 1369], "delimit": [45, 47, 149, 157, 264, 295, 340, 676, 692, 947, 1258, 1274, 1318, 1342], "delta": [39, 143, 154, 186, 288, 311, 340, 566, 572, 653, 654, 657, 658, 675, 743, 763, 807, 808, 812, 820, 831, 843, 907, 915, 947, 1235, 1237, 1257, 1332, 1342], "delta_merge_opt": [39, 340], "delta_table_opt": [143, 154, 183], "delta_table_vers": 183, "delta_write_opt": [39, 340], "deltalak": [39, 143, 154, 161, 183, 340], "deltashar": 186, "deltat": [39, 143, 154, 340], "demo": [40, 340], "demonstr": [139, 499, 831, 953], "dens": [20, 228, 340, 630, 831, 1218, 1342], "densiti": [1342, 1347], "depend": [46, 51, 57, 92, 141, 144, 150, 161, 198, 340, 370, 371, 535, 536, 579, 590, 627, 630, 775, 778, 781, 787, 831, 957, 977, 978, 1152, 1153, 1216, 1218, 1342, 1373], "deploi": [169, 173], "deprec": [39, 61, 139, 140, 166, 167, 168, 169, 173, 176, 199, 255, 298, 316, 321, 340, 444, 480, 501, 597, 634, 676, 684, 744, 753, 761, 762, 831, 846, 863, 885, 900, 913, 919, 920, 925, 947, 1054, 1062, 1063, 1094, 1122, 1222, 1258, 1266, 1323, 1342], "depth": 135, "desc": [953, 1351, 1354, 1358, 1360], "descend": [52, 281, 286, 340, 365, 385, 565, 620, 630, 663, 672, 673, 742, 754, 831, 901, 905, 947, 972, 992, 1142, 1182, 1218, 1244, 1255, 1331, 1342], "describ": [169, 228, 340, 697, 947, 1279, 1342], "descript": [230, 340, 871, 947, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1368, 1371, 1372], "deseri": [135, 280, 340, 501, 593, 831, 900, 947], "deserializ": [209, 280, 340, 432, 593, 831, 858, 900, 947], "design": [297, 302, 340], "desir": [169, 244, 340, 389, 480, 570, 875, 947, 996, 1094, 1187], "destin": 142, "detail": [57, 125, 141, 142, 162, 164, 197, 230, 340, 469, 735, 831, 871, 922, 947, 1083, 1325, 1342, 1373], "determin": [14, 37, 40, 47, 52, 60, 89, 135, 139, 140, 141, 144, 150, 151, 153, 158, 160, 200, 204, 223, 230, 242, 243, 249, 272, 303, 304, 310, 340, 410, 449, 462, 463, 510, 570, 590, 627, 633, 635, 670, 678, 691, 714, 715, 717, 718, 737, 772, 790, 803, 806, 822, 831, 847, 854, 855, 862, 871, 896, 910, 916, 947, 1059, 1076, 1077, 1125, 1187, 1216, 1222, 1223, 1253, 1260, 1296, 1299, 1300, 1342], "dev": [196, 956, 1235, 1342], "develop": [142, 169, 173], "deviat": [288, 340, 487, 653, 654, 675, 812, 831, 907, 947, 1104, 1257, 1342, 1359], "devic": [297, 340, 852, 863, 890, 903, 922, 947, 1321, 1342], "devicememoryresourc": 922, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 53, 54, 79, 96, 100, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 153, 166, 167, 169, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 397, 398, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 648, 650, 652, 653, 655, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 827, 831, 871, 896, 912, 914, 927, 930, 938, 947, 953, 1077, 1103, 1272, 1276, 1288, 1289, 1319, 1342, 1347, 1351, 1352, 1353, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1373], "df0": [256, 340, 886, 947, 1357], "df1": [52, 60, 162, 163, 215, 218, 256, 287, 312, 340, 886, 947, 1354, 1356, 1357, 1358, 1370], "df2": [52, 60, 162, 163, 215, 218, 312, 340, 1354, 1356, 1357, 1358, 1370], "df3": [52, 340], "df4": 340, "df5": 340, "df6": 340, "df_a": 1370, "df_a1": 60, "df_a2": 60, "df_a3": 60, "df_agg_nuniqu": [260, 340], "df_b": 1370, "df_current_batch": 140, "df_d1": 60, "df_d2": 60, "df_from_str_repr": [296, 340], "df_h1": 60, "df_h2": 60, "df_new_grid": [514, 831], "df_nuniqu": [260, 340], "df_original_grid": [514, 831], "df_panda": 1352, "df_pd": 125, "df_tempor": [643, 645, 647, 649, 651, 654, 656, 658, 831], "dfi": 197, "diagon": [60, 304, 340], "diagonal_relax": 60, "diagram": [892, 947], "dict": [30, 37, 38, 39, 40, 42, 46, 47, 48, 49, 50, 53, 55, 57, 124, 126, 127, 128, 129, 130, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 169, 183, 184, 187, 188, 222, 242, 262, 269, 273, 274, 275, 293, 294, 297, 302, 304, 340, 831, 894, 947, 952, 953, 1114, 1342, 1355], "dictat": [136, 459, 831, 1073], "dictionari": [30, 37, 39, 40, 42, 46, 47, 48, 49, 50, 57, 83, 124, 126, 127, 128, 130, 135, 139, 140, 141, 142, 143, 146, 148, 149, 151, 152, 153, 154, 156, 157, 158, 183, 242, 262, 273, 274, 275, 293, 294, 297, 302, 340, 947, 952], "did": [438, 1048], "diff": [314, 340, 470, 471, 472, 473, 474, 475, 476, 559, 831, 917, 947, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1176, 1342], "differ": [40, 46, 95, 98, 119, 139, 144, 159, 162, 164, 193, 212, 218, 230, 231, 242, 244, 264, 272, 274, 275, 294, 297, 298, 304, 340, 433, 445, 459, 460, 463, 469, 478, 484, 499, 508, 540, 559, 561, 570, 579, 612, 613, 615, 620, 634, 635, 714, 740, 778, 781, 787, 831, 860, 861, 863, 871, 875, 896, 947, 951, 953, 1023, 1043, 1055, 1073, 1074, 1077, 1083, 1092, 1099, 1108, 1123, 1157, 1176, 1178, 1195, 1204, 1205, 1207, 1222, 1223, 1296, 1342, 1366, 1368, 1370], "digit": [68, 624, 659, 660, 686, 831, 953, 1238, 1239, 1261, 1268, 1342, 1373], "dimens": [124, 126, 128, 130, 148, 149, 157, 340, 636, 831, 947, 1224, 1323, 1342], "dimension": [126, 128, 130, 298, 340, 947, 1342], "direct": [40, 142, 151, 155, 158, 283, 297, 308, 340, 384, 563, 664, 831, 902, 947, 991, 1180, 1246, 1342], "directli": [6, 30, 40, 59, 60, 141, 169, 173, 193, 275, 297, 340, 485, 487, 488, 635, 806, 831, 853, 947, 1102, 1104, 1105, 1223, 1321, 1342, 1354, 1370, 1373], "directori": [40, 46, 136, 151, 153, 156, 158, 340], "dirpath": [35, 37, 42, 43, 46, 153, 340], "disabl": [46, 50, 51, 91, 92, 151, 156, 170, 242, 340, 852, 947], "disable_string_cach": 92, "disallow": 169, "discard": [221, 268, 340, 495, 831, 867, 893, 947, 1112, 1342], "disco": [688, 690, 1270, 1272], "discont": [688, 690, 1270, 1272], "discourag": [579, 831], "discoveri": [264, 340], "discret": [430, 433, 482, 510, 540, 559, 627, 831, 1041, 1043, 1097, 1125, 1157, 1176, 1216, 1342], "disk": [46, 47, 48, 49, 50, 145, 340, 594, 903, 947], "dispatch": 953, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 26, 40, 208, 228, 340, 857, 863, 947], "distanc": [245, 340, 510, 831, 876, 947, 1125, 1342], "distinct": [40, 173, 262, 264, 318, 340, 390, 519, 520, 522, 571, 630, 639, 775, 831, 997, 1134, 1135, 1137, 1188, 1218, 1227, 1342, 1359, 1369, 1371, 1373], "distinct_count": [46, 50, 340, 947], "distinguish": [469, 1083], "distribut": [528, 670, 831, 892, 947, 1145, 1253, 1342], "div": 1363, "divid": [20, 430, 464, 477, 485, 487, 488, 499, 528, 627, 831, 1041, 1078, 1091, 1102, 1104, 1105, 1145, 1216, 1342, 1359, 1364], "divis": [499, 738, 831, 1364], "divisor": [288, 311, 340, 566, 572, 653, 654, 657, 658, 675, 743, 763, 807, 808, 812, 820, 831, 907, 915, 947, 1235, 1237, 1257, 1332, 1342], "dl": [302, 340], "do": [1, 40, 47, 48, 49, 50, 52, 58, 59, 126, 127, 130, 139, 151, 153, 158, 162, 163, 164, 165, 198, 208, 210, 218, 241, 244, 245, 264, 269, 292, 304, 308, 340, 343, 429, 437, 542, 578, 700, 701, 709, 710, 711, 761, 803, 806, 822, 831, 848, 852, 853, 857, 859, 863, 875, 876, 881, 890, 892, 894, 903, 922, 947, 953, 1040, 1047, 1108, 1159, 1282, 1283, 1291, 1292, 1293, 1326, 1342, 1347], "do_polars_oper": 29, "do_someth": 141, "do_various_th": 193, "doc": [39, 42, 43, 125, 142, 145, 147, 162, 164, 195, 196, 206, 340, 955, 956], "document": [32, 95, 142, 195, 340, 344, 466, 469, 694, 714, 716, 717, 721, 827, 922, 955, 1023, 1080, 1083, 1276, 1296, 1298, 1299, 1303], "doe": [10, 37, 39, 47, 48, 49, 50, 52, 113, 124, 126, 127, 128, 130, 131, 139, 140, 141, 142, 143, 144, 148, 149, 153, 154, 157, 159, 203, 218, 225, 230, 231, 243, 244, 268, 273, 274, 275, 305, 314, 317, 340, 343, 344, 480, 495, 499, 508, 570, 579, 678, 688, 690, 702, 710, 711, 740, 827, 831, 851, 852, 853, 857, 863, 867, 871, 875, 881, 890, 893, 903, 911, 917, 921, 947, 1030, 1094, 1108, 1112, 1123, 1248, 1260, 1270, 1272, 1284, 1342, 1347, 1365], "doesn": [39, 139, 153, 230, 245, 340, 482, 831, 871, 876, 947, 1097, 1342], "dog": [677, 720, 723, 760, 1259, 1302, 1305], "doi": 1366, "dollar": [700, 701, 1282, 1283], "domain": [1, 686, 1268], "don": [60, 230, 245, 249, 305, 308, 340, 429, 542, 579, 620, 831, 871, 876, 911, 947, 953, 1040, 1159, 1195, 1342], "done": [140, 159, 193, 199, 245, 340, 355, 356, 620, 831, 846, 849, 876, 947, 963, 1342], "dot": [52, 594, 827, 831, 892, 903, 947, 1342], "doubl": [299, 340, 700, 701, 1282, 1283], "dow": 1366, "down": [153, 156, 157, 158, 159, 201, 340, 411, 498, 831, 1115, 1342], "download": [149, 153, 156, 157, 594, 903, 947], "downstream": [298, 340, 663, 831, 1244, 1342], "dr": 155, "drago": [691, 1273], "dragon": 691, "dragonfr": 1273, "dragonfruit": [691, 704, 715, 1273, 1286, 1297], "dramat": 144, "draw": [20, 25, 169, 173, 1373], "drawback": 827, "drawfn": 1373, "drawing_charact": 20, "dremio": 141, "driver": [38, 141, 142, 340], "drop": [1, 127, 211, 212, 213, 249, 268, 305, 314, 340, 433, 435, 436, 540, 541, 627, 831, 860, 861, 893, 911, 917, 947, 1043, 1045, 1046, 1157, 1158, 1216, 1342, 1369], "drop_dupl": [305, 340, 911, 947], "drop_empty_col": [144, 150], "drop_empty_row": [144, 150], "drop_first": [295, 340, 1318, 1342], "drop_in_plac": 340, "drop_nan": [340, 436, 831, 947, 1046, 1342], "drop_nul": [340, 435, 831, 947, 1045, 1342], "dset": 159, "dst": [464, 477, 1078, 1091], "dst_offset": [438, 1048], "dt": [1, 40, 52, 144, 150, 272, 340, 640, 775, 831, 840, 896, 947, 953, 1350, 1365, 1366], "dt1": 1365, "dt2": 1365, "dtm": [40, 340, 441, 469, 953, 1051, 1083, 1365], "dtm_iso": 469, "dtm_iso_strict": 469, "dtype": [10, 40, 51, 55, 61, 67, 71, 83, 91, 92, 102, 124, 126, 128, 130, 131, 139, 140, 141, 142, 144, 148, 149, 150, 153, 157, 166, 167, 168, 169, 173, 195, 197, 201, 204, 216, 230, 245, 272, 296, 297, 298, 299, 302, 308, 317, 340, 397, 411, 412, 413, 414, 415, 416, 427, 428, 469, 480, 489, 502, 537, 545, 576, 578, 579, 586, 625, 632, 633, 640, 665, 667, 693, 714, 731, 735, 741, 751, 758, 777, 781, 785, 786, 788, 789, 790, 791, 792, 793, 803, 806, 813, 822, 831, 849, 854, 871, 876, 896, 921, 947, 952, 953, 955, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1028, 1038, 1039, 1042, 1043, 1083, 1094, 1101, 1132, 1150, 1151, 1154, 1162, 1186, 1193, 1195, 1214, 1225, 1247, 1250, 1275, 1296, 1313, 1320, 1321, 1323, 1324, 1325, 1326, 1330, 1342, 1370, 1373], "dtype_format": [40, 340], "dtypekind": 197, "dtypelik": [195, 955], "dtypeoper": [1, 55], "dubiou": 95, "due": [230, 245, 272, 275, 310, 340, 351, 446, 459, 464, 477, 603, 604, 606, 608, 610, 611, 640, 643, 645, 647, 649, 651, 654, 656, 658, 756, 770, 771, 773, 774, 818, 819, 831, 849, 871, 876, 896, 947, 1056, 1073, 1078, 1091], "dummi": [295, 340, 1318, 1342], "dump": 135, "duplic": [52, 100, 237, 244, 245, 246, 305, 309, 340, 351, 517, 603, 627, 831, 875, 876, 877, 911, 914, 947, 1131, 1216, 1342, 1371], "duplicateerror": [627, 831, 1216, 1342], "dur": [246, 340, 877, 947], "durat": [193, 245, 310, 340, 438, 446, 469, 470, 471, 472, 473, 474, 475, 476, 480, 486, 735, 770, 771, 773, 774, 818, 819, 831, 876, 947, 952, 953, 1048, 1056, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1094, 1103, 1323, 1325, 1342], "dure": [51, 99, 139, 140, 153, 193, 218, 340, 1108, 1342], "dutch": [437, 756, 1047], "dynam": [136, 230, 340, 389, 570, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 831, 871, 947, 951, 996, 1187], "dynamicgroupbi": [230, 340], "e": [10, 33, 35, 37, 39, 42, 43, 46, 47, 135, 139, 145, 147, 151, 156, 158, 159, 171, 209, 221, 228, 232, 241, 245, 248, 291, 292, 298, 308, 340, 349, 432, 482, 486, 489, 516, 573, 579, 584, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 665, 670, 689, 710, 711, 722, 777, 793, 810, 821, 831, 858, 867, 876, 879, 894, 947, 951, 953, 1097, 1103, 1130, 1253, 1271, 1304, 1342, 1360, 1365, 1373], "e101": [40, 340], "e_filt": [590, 592], "e_sum_ov": [590, 592], "e_sum_slic": [590, 592], "each": [37, 40, 47, 52, 61, 68, 79, 140, 141, 144, 149, 157, 162, 163, 164, 165, 167, 205, 207, 214, 221, 228, 229, 230, 243, 245, 249, 262, 264, 268, 272, 274, 276, 297, 302, 306, 309, 310, 318, 319, 321, 323, 325, 326, 334, 340, 365, 410, 414, 415, 430, 464, 477, 495, 519, 522, 548, 551, 558, 568, 575, 579, 627, 630, 638, 639, 646, 650, 661, 666, 673, 686, 690, 691, 695, 696, 704, 706, 707, 715, 722, 737, 751, 754, 760, 785, 786, 790, 813, 821, 831, 852, 855, 856, 862, 867, 871, 876, 890, 893, 896, 912, 914, 923, 925, 927, 929, 930, 938, 947, 972, 1020, 1021, 1027, 1041, 1078, 1091, 1134, 1137, 1165, 1168, 1175, 1185, 1216, 1218, 1226, 1227, 1240, 1249, 1268, 1272, 1273, 1277, 1278, 1286, 1288, 1289, 1297, 1304, 1312, 1342, 1359, 1370, 1371, 1373], "eager": [230, 245, 264, 308, 340, 439, 442, 445, 447, 456, 457, 459, 460, 463, 464, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 643, 645, 647, 649, 651, 654, 656, 658, 751, 755, 770, 771, 773, 774, 781, 785, 786, 789, 790, 803, 806, 809, 810, 813, 818, 819, 822, 830, 831, 871, 876, 881, 947, 952, 1048, 1049, 1052, 1055, 1056, 1057, 1058, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1370], "eagerli": [570, 1351], "ear": [704, 715, 1286], "earlier": [245, 340, 876, 947], "earliest": [230, 340, 462, 463, 714, 717, 772, 871, 939, 947, 1076, 1077, 1296, 1299], "easi": 193, "easiest": 198, "easili": [52, 278, 302, 314, 319, 340, 813, 827, 898, 917, 923, 947], "east": [70, 158, 246, 340, 877, 947], "ebf1d": [40, 340], "eee": [1, 40, 340, 953], "ef": 701, "effect": [40, 223, 230, 340, 446, 499, 579, 605, 607, 609, 761, 831, 871, 920, 921, 947, 1048, 1056], "effici": [125, 141, 241, 243, 340, 578, 831], "efgh": 1365, "eg": [17, 25, 26, 40, 60, 142, 193, 297, 340, 464, 714, 717, 738, 831, 953, 1296, 1299], "egnaro": 1365, "either": [83, 136, 169, 240, 244, 245, 246, 262, 272, 273, 297, 298, 340, 486, 578, 625, 627, 640, 714, 746, 754, 758, 813, 831, 852, 853, 875, 876, 877, 879, 896, 947, 951, 953, 1103, 1214, 1216, 1296, 1342, 1355, 1373], "element": [13, 14, 25, 164, 165, 168, 169, 171, 173, 198, 200, 207, 240, 264, 273, 286, 288, 303, 311, 340, 357, 358, 359, 360, 361, 362, 373, 374, 409, 410, 417, 420, 421, 422, 423, 425, 426, 427, 428, 429, 435, 436, 490, 491, 495, 508, 512, 520, 531, 539, 541, 542, 543, 546, 551, 559, 560, 561, 562, 566, 572, 574, 575, 578, 579, 620, 621, 630, 633, 641, 642, 644, 646, 648, 650, 652, 653, 655, 657, 662, 667, 668, 669, 673, 674, 675, 706, 707, 718, 733, 734, 736, 737, 743, 754, 763, 789, 807, 808, 812, 820, 831, 847, 856, 905, 907, 910, 915, 947, 964, 965, 966, 967, 968, 969, 980, 981, 1015, 1025, 1028, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1045, 1046, 1106, 1107, 1112, 1113, 1124, 1127, 1135, 1144, 1146, 1148, 1149, 1156, 1158, 1159, 1160, 1163, 1168, 1176, 1177, 1178, 1179, 1191, 1192, 1195, 1211, 1218, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1242, 1250, 1251, 1252, 1256, 1257, 1288, 1289, 1300, 1314, 1315, 1316, 1320, 1327, 1328, 1332, 1342, 1359, 1360], "elementwis": [578, 620, 641, 642, 644, 646, 648, 650, 653, 655, 657, 831, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1342], "elif": 821, "elig": [881, 947], "elimin": [528, 831, 1145, 1342], "elis": [256, 340, 886, 947], "ellips": 20, "ellipsi": [228, 340], "elppa": 1365, "els": [140, 821], "email": [686, 1268], "email_part": [686, 1268], "emphas": [340, 344], "emploi": 953, "empti": [13, 35, 37, 47, 104, 127, 139, 140, 144, 150, 153, 202, 203, 230, 255, 307, 340, 676, 684, 791, 809, 850, 851, 871, 885, 913, 947, 952, 953, 1028, 1030, 1113, 1132, 1146, 1258, 1266, 1342], "en": [20, 40, 340], "enabl": [28, 29, 46, 50, 51, 91, 92, 143, 151, 154, 156, 158, 162, 163, 164, 165, 177, 195, 278, 299, 314, 340, 352, 354, 634, 635, 663, 678, 688, 690, 702, 742, 827, 831, 852, 853, 863, 890, 898, 903, 917, 947, 955, 960, 961, 1222, 1223, 1244, 1260, 1270, 1272, 1284, 1324, 1331, 1342], "enable_string_cach": 91, "enclos": [501, 831], "encod": [64, 70, 82, 135, 139, 140, 153, 295, 340, 343, 394, 501, 638, 680, 726, 831, 1000, 1226, 1262, 1318, 1342, 1347], "encount": [115, 139, 140, 153, 230, 340, 612, 613, 693, 694, 761, 765, 779, 831, 871, 947, 1204, 1205, 1275, 1276, 1342], "end": [37, 40, 47, 139, 140, 153, 230, 264, 340, 393, 396, 399, 412, 416, 438, 464, 489, 564, 677, 682, 686, 691, 698, 704, 708, 709, 710, 713, 751, 756, 769, 770, 771, 772, 773, 774, 777, 785, 786, 789, 790, 818, 819, 821, 827, 831, 871, 890, 947, 953, 1002, 1017, 1022, 1048, 1078, 1142, 1181, 1264, 1268, 1273, 1280, 1286, 1290, 1291, 1292, 1297, 1342, 1365], "endian": [397, 1003], "endpoint": [178, 430, 627, 789, 831, 1041, 1216, 1342], "ends_a": 1365, "ends_in_digit": 1365, "ends_with": [393, 399, 416, 677, 708, 953, 1022, 1290, 1363], "ends_with_expr": 396, "ends_with_lit": 396, "engin": [14, 38, 47, 48, 49, 50, 141, 142, 144, 150, 175, 229, 244, 249, 298, 305, 326, 340, 578, 810, 831, 852, 853, 863, 870, 875, 881, 885, 890, 903, 911, 922, 930, 944, 947, 951, 1195, 1323, 1342, 1354, 1370], "engine_opt": [38, 144, 340], "enginetyp": [47, 48, 49, 50, 852, 853, 863, 890, 903, 947], "enough": [542, 670, 831, 1159, 1253, 1342], "ensur": [10, 40, 136, 142, 168, 171, 195, 221, 229, 262, 264, 268, 273, 298, 340, 516, 578, 831, 867, 870, 881, 893, 922, 947, 953, 955, 1323, 1342], "enter": 193, "entir": [40, 58, 59, 144, 150, 340, 852, 947], "entri": [193, 340, 947, 952, 1370], "entropi": [831, 1342], "enumer": [70, 129, 139, 140, 144, 150, 153, 243, 340], "env": [4, 174], "env_onli": 30, "environ": [4, 30, 37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 156, 157, 158, 172, 175, 178, 183, 297, 340, 947], "eol_char": [139, 140, 153], "eparg": 1365, "epoch": [66, 67, 781, 1366], "epoch_": [447, 1057], "epoch_n": [447, 1057], "epochtimeunit": [447, 781, 1057], "eq": [221, 268, 340, 484, 495, 831, 867, 893, 947, 1099, 1342], "eq_miss": [831, 1207, 1342], "equal": [51, 92, 139, 140, 153, 162, 163, 164, 165, 230, 245, 246, 256, 286, 340, 430, 477, 483, 484, 504, 530, 570, 615, 627, 633, 641, 642, 644, 646, 648, 650, 653, 655, 657, 673, 698, 699, 702, 724, 754, 789, 807, 808, 821, 827, 831, 867, 871, 876, 877, 886, 893, 905, 947, 1041, 1078, 1099, 1187, 1207, 1216, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1280, 1281, 1284, 1306, 1342, 1359, 1362, 1373], "equival": [40, 60, 124, 126, 127, 128, 130, 148, 149, 157, 230, 240, 260, 340, 349, 353, 415, 483, 484, 486, 499, 504, 506, 530, 577, 599, 601, 614, 615, 616, 619, 625, 696, 720, 722, 723, 730, 738, 745, 831, 871, 947, 1021, 1098, 1099, 1103, 1118, 1120, 1144, 1147, 1194, 1206, 1207, 1278, 1302, 1304, 1305, 1342, 1352, 1360, 1372], "err": 687, "error": [14, 39, 59, 60, 110, 114, 116, 126, 127, 130, 139, 140, 144, 151, 153, 158, 245, 264, 273, 298, 340, 351, 376, 377, 394, 437, 545, 547, 549, 570, 603, 635, 677, 680, 685, 687, 689, 693, 694, 714, 716, 717, 721, 831, 849, 853, 876, 922, 930, 947, 983, 984, 1000, 1047, 1162, 1164, 1166, 1223, 1259, 1262, 1267, 1269, 1271, 1275, 1276, 1296, 1298, 1299, 1303, 1323, 1342, 1368], "escap": [93, 139, 140, 142, 153, 683, 700, 701, 1265, 1282, 1283], "esp": 14, "especi": [167, 639, 831, 947, 1227, 1342], "espresso": 953, "est": 773, "establish": [141, 193], "estim": [139, 140, 199, 216, 340, 356, 487, 488, 528, 750, 831, 846, 947, 963, 1101, 1104, 1105, 1145, 1342], "estimated_s": [340, 1342], "etc": [21, 39, 40, 136, 139, 143, 144, 145, 147, 154, 155, 340, 579, 831, 953, 1241, 1243, 1342, 1366], "eu": [154, 155], "eur": [228, 340, 1373], "europ": [442, 446, 463, 1052, 1056, 1077], "eval": [296, 340, 578, 579, 776, 831, 1195, 1320, 1342], "evalu": [47, 48, 49, 50, 158, 219, 221, 245, 268, 340, 353, 366, 368, 369, 401, 402, 403, 404, 406, 407, 429, 495, 513, 533, 534, 570, 619, 620, 746, 748, 751, 755, 770, 771, 773, 774, 776, 785, 786, 789, 790, 803, 806, 809, 813, 818, 819, 821, 822, 831, 852, 867, 873, 875, 876, 893, 947, 973, 975, 976, 1007, 1008, 1009, 1010, 1012, 1013, 1040, 1112, 1150, 1151, 1333, 1342, 1362], "even": [37, 47, 139, 244, 340, 486, 624, 627, 831, 875, 947, 953, 1103, 1216, 1342], "evenli": [230, 340, 789, 790, 871, 947], "event": [59, 853, 947], "eventu": [38, 340], "ever": [620, 831], "everi": [14, 37, 47, 139, 140, 144, 150, 153, 224, 230, 294, 310, 340, 368, 369, 370, 371, 374, 376, 382, 425, 426, 427, 428, 429, 464, 477, 491, 503, 535, 536, 540, 543, 546, 547, 548, 556, 559, 564, 568, 639, 684, 765, 766, 831, 869, 871, 947, 975, 976, 977, 978, 981, 983, 989, 1036, 1037, 1038, 1039, 1040, 1078, 1091, 1107, 1117, 1152, 1153, 1157, 1160, 1163, 1164, 1165, 1173, 1176, 1181, 1185, 1227, 1266, 1342], "everybodi": [678, 702, 1260, 1284], "everyth": 953, "ew": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "ewm_mean": [831, 1342], "ewm_mean_bi": [831, 1342], "ewm_std": [831, 1342], "ewm_var": [831, 1342], "ewma": [486, 831, 1103, 1342], "exact": [164, 167, 169, 173, 245, 284, 340, 356, 499, 684, 712, 713, 714, 716, 717, 738, 831, 876, 947, 1266, 1296, 1298, 1299], "exactli": [126, 127, 130, 162, 163, 164, 165, 168, 169, 173, 340, 706, 707, 712, 713, 775, 947, 1248, 1288, 1289, 1294, 1295, 1342], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 70, 79, 83, 91, 92, 96, 99, 100, 101, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 148, 149, 150, 153, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 843, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342, 1347, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1372], "exc_tb": 1370, "exc_typ": 1370, "exc_val": 1370, "exce": [228, 340], "excel": [36, 40, 138, 144, 340, 843], "excelspreadsheetengin": 144, "except": [0, 210, 225, 232, 245, 248, 269, 291, 340, 635, 691, 715, 777, 831, 843, 859, 876, 894, 947, 953, 1016, 1124, 1149, 1223, 1273, 1297, 1314, 1323, 1342, 1369], "exclud": [169, 173, 230, 340, 410, 425, 428, 437, 516, 586, 737, 756, 827, 831, 871, 947, 953, 1047, 1130, 1342], "excluded_dtyp": [169, 170, 173], "exclus": [273, 340, 745, 751, 785, 786, 831], "execut": [39, 51, 60, 136, 141, 142, 247, 287, 340, 432, 542, 742, 810, 831, 848, 852, 853, 858, 863, 881, 890, 892, 903, 906, 922, 947, 1159, 1331, 1342, 1352, 1353, 1354, 1356, 1370, 1372], "execute_glob": 1370, "execute_opt": [141, 142], "exist": [1, 38, 39, 40, 41, 52, 70, 100, 143, 151, 154, 158, 169, 210, 225, 264, 269, 304, 309, 314, 315, 340, 351, 393, 396, 399, 441, 463, 700, 701, 759, 831, 855, 859, 862, 894, 897, 914, 916, 917, 918, 947, 953, 1051, 1077, 1282, 1283, 1372], "existing_t": 1372, "existing_table_path": [39, 340], "exit": [51, 91, 193, 1357, 1370], "exp": [485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342, 1363], "exp_a": 1364, "expand": [136, 139, 151, 153, 158, 491, 584, 588, 633, 728, 831, 953, 1107, 1342], "expand_selector": 953, "expans": 725, "expect": [37, 39, 42, 46, 47, 48, 49, 50, 68, 70, 74, 105, 113, 121, 139, 141, 143, 149, 151, 153, 154, 156, 157, 158, 163, 165, 183, 340, 570, 579, 791, 831, 879, 881, 947], "expens": [139, 140, 149, 151, 153, 157, 158, 172, 174, 242, 249, 273, 274, 275, 304, 305, 340, 579, 831, 855, 857, 862, 897, 911, 916, 947, 1108, 1195, 1342, 1373], "experiment": [246, 302, 340, 789, 790, 877, 917, 947], "expiri": [37, 39, 42, 46, 47, 48, 49, 50, 143, 149, 151, 153, 154, 156, 157, 158, 183, 340, 947], "explain": [58, 59, 198, 247, 340, 852, 947, 1369], "explainformat": [863, 947], "explicit": [40, 99, 141, 153, 167, 287, 309, 340, 469, 805, 906, 914, 947, 1083], "explicitli": [70, 99, 142, 167, 169, 193, 225, 244, 340, 634, 813, 831, 842, 875, 947, 1370], "explod": [136, 340, 410, 497, 620, 636, 737, 831, 947, 1224, 1342, 1360], "explor": [208, 340, 857, 947], "expon": [625, 831, 1214, 1342, 1364], "exponenti": [485, 486, 487, 488, 490, 625, 831, 1102, 1103, 1104, 1105, 1106, 1342, 1364], "export": [40, 42, 43, 48, 196, 242, 243, 274, 275, 292, 294, 297, 340, 827, 947, 953, 956, 1317, 1342], "expos": 843, "expr": [1, 52, 53, 54, 55, 56, 134, 136, 217, 219, 220, 244, 245, 246, 260, 264, 273, 278, 279, 297, 302, 314, 315, 340, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 831, 832, 833, 836, 837, 838, 839, 840, 864, 865, 866, 875, 876, 877, 891, 898, 899, 917, 918, 947, 953, 1040, 1073, 1098, 1099, 1103, 1110, 1111, 1116, 1118, 1120, 1147, 1159, 1165, 1181, 1185, 1194, 1206, 1207, 1259, 1264, 1271, 1290, 1342, 1368], "expr1": [1362, 1370], "expr2": [1362, 1370], "expr_unique_subset": [260, 340], "express": [0, 8, 47, 48, 49, 50, 58, 59, 134, 136, 166, 169, 173, 200, 217, 219, 221, 229, 235, 244, 245, 249, 260, 264, 268, 273, 278, 279, 283, 286, 297, 302, 303, 314, 315, 317, 319, 326, 340, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 370, 371, 372, 373, 374, 377, 388, 393, 394, 395, 396, 397, 398, 399, 410, 412, 414, 415, 416, 419, 420, 421, 422, 423, 429, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 489, 491, 492, 494, 495, 499, 501, 502, 504, 505, 506, 507, 513, 516, 517, 518, 519, 520, 521, 522, 530, 531, 535, 536, 538, 539, 542, 543, 549, 551, 569, 570, 576, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 597, 599, 601, 603, 604, 606, 608, 610, 611, 614, 615, 617, 619, 620, 624, 625, 626, 627, 629, 633, 634, 635, 636, 638, 639, 661, 662, 663, 666, 668, 669, 671, 673, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 700, 701, 702, 704, 705, 706, 707, 715, 719, 729, 730, 733, 734, 737, 738, 739, 741, 742, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 800, 803, 805, 806, 807, 808, 809, 811, 813, 815, 817, 818, 819, 821, 822, 827, 830, 843, 847, 852, 853, 863, 864, 867, 870, 875, 876, 890, 893, 898, 899, 902, 903, 905, 910, 917, 918, 919, 921, 923, 930, 947, 953, 980, 1029, 1040, 1047, 1051, 1083, 1098, 1099, 1103, 1109, 1118, 1120, 1130, 1147, 1156, 1159, 1194, 1195, 1206, 1207, 1222, 1223, 1242, 1246, 1259, 1260, 1261, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1282, 1283, 1284, 1297, 1301, 1342, 1360, 1362, 1364, 1365, 1369], "exprmetanamespac": [583, 589], "ext": 141, "extend": [0, 127, 312, 340, 492, 831, 843, 951, 962, 1109, 1342], "extend_const": [831, 1342], "extens": [299, 340, 1324, 1342], "extern": [190, 919, 947], "external_shallow_clon": 190, "extra": [39, 136, 139, 140, 143, 145, 147, 151, 153, 154, 155, 158, 218, 230, 340, 831, 871, 947, 1108, 1342], "extract": [131, 198, 287, 340, 440, 443, 445, 448, 450, 451, 452, 453, 454, 455, 458, 460, 461, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 624, 686, 687, 688, 693, 694, 704, 706, 831, 1050, 1053, 1054, 1055, 1058, 1060, 1064, 1065, 1066, 1068, 1069, 1072, 1074, 1075, 1079, 1081, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1268, 1269, 1270, 1275, 1276, 1286, 1363], "extract_mani": [690, 1272], "extract_numb": [624, 831], "extracted_nr": 686, "extrem": [492, 641, 831, 1109, 1228, 1342], "extrema": [665, 831, 1247, 1342], "f": [53, 140, 141, 221, 228, 243, 292, 298, 304, 308, 340, 349, 389, 398, 570, 665, 684, 714, 717, 759, 831, 867, 947, 953, 996, 1187, 1266, 1296, 1299, 1342, 1347, 1360], "f32": [1, 55, 201, 287, 296, 302, 340, 665, 810, 831, 849, 906, 947, 953, 1193, 1342, 1368], "f4": [298, 340], "f5ed2452": [40, 340], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 52, 54, 56, 60, 79, 125, 127, 148, 159, 166, 169, 201, 202, 203, 206, 208, 209, 210, 212, 214, 219, 220, 223, 227, 228, 229, 230, 235, 236, 244, 245, 251, 252, 253, 254, 258, 264, 265, 266, 285, 286, 288, 290, 302, 311, 314, 319, 322, 324, 327, 328, 329, 330, 332, 333, 340, 348, 351, 357, 358, 359, 360, 361, 362, 380, 386, 391, 398, 411, 417, 418, 420, 421, 422, 430, 431, 435, 436, 465, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 498, 499, 504, 506, 514, 515, 523, 524, 525, 526, 528, 530, 542, 553, 554, 566, 572, 573, 574, 575, 577, 580, 581, 582, 598, 601, 603, 612, 613, 614, 615, 621, 625, 627, 628, 629, 630, 634, 635, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 667, 668, 669, 670, 674, 675, 729, 733, 734, 738, 743, 752, 753, 757, 759, 761, 763, 776, 777, 789, 790, 793, 796, 797, 798, 810, 812, 820, 827, 831, 849, 850, 857, 859, 860, 865, 866, 870, 871, 874, 875, 876, 883, 884, 891, 905, 907, 915, 917, 919, 923, 926, 928, 931, 932, 933, 934, 936, 937, 947, 953, 964, 965, 966, 967, 968, 969, 987, 993, 998, 1004, 1025, 1026, 1031, 1032, 1033, 1041, 1042, 1045, 1046, 1079, 1102, 1103, 1104, 1105, 1106, 1110, 1115, 1125, 1128, 1129, 1159, 1170, 1171, 1183, 1189, 1190, 1191, 1192, 1211, 1214, 1216, 1218, 1223, 1228, 1230, 1231, 1233, 1234, 1235, 1237, 1238, 1239, 1250, 1251, 1252, 1256, 1315, 1316, 1330, 1342, 1351, 1359, 1360, 1364, 1367, 1370, 1373], "f_string": 780, "fa1e": [719, 1301], "face": [37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 156, 157, 158, 183, 340, 947], "facil": 141, "facilit": [204, 340], "factor": [485, 487, 488, 735, 831, 1102, 1104, 1105, 1325, 1342], "fail": [37, 38, 39, 42, 46, 47, 48, 49, 50, 125, 143, 145, 149, 151, 153, 154, 156, 157, 158, 183, 197, 298, 305, 340, 366, 467, 570, 714, 716, 717, 721, 831, 911, 947, 1195, 1296, 1298, 1299, 1303, 1323, 1342, 1368], "fall": [158, 430, 627, 831, 852, 863, 890, 903, 922, 947, 1041, 1216, 1342, 1359], "fallback": [125, 144], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 37, 39, 40, 46, 47, 48, 49, 50, 52, 58, 59, 60, 125, 126, 127, 129, 130, 131, 136, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 153, 154, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 197, 200, 201, 202, 203, 208, 215, 221, 223, 227, 228, 229, 230, 234, 235, 237, 238, 239, 242, 244, 245, 247, 252, 253, 259, 260, 262, 264, 265, 268, 273, 274, 275, 276, 278, 281, 284, 286, 287, 290, 293, 295, 298, 299, 303, 304, 305, 309, 310, 312, 314, 322, 324, 327, 328, 330, 333, 340, 352, 353, 354, 365, 368, 369, 372, 376, 377, 385, 390, 393, 396, 399, 410, 411, 412, 416, 424, 425, 426, 427, 428, 429, 430, 437, 449, 465, 482, 483, 484, 485, 487, 488, 506, 507, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 538, 542, 545, 547, 549, 558, 565, 570, 571, 577, 578, 579, 583, 585, 586, 587, 589, 591, 594, 595, 614, 615, 617, 619, 620, 622, 623, 627, 630, 641, 642, 644, 646, 648, 650, 652, 653, 655, 657, 661, 663, 665, 670, 672, 673, 676, 677, 678, 679, 682, 688, 689, 690, 692, 693, 700, 701, 702, 705, 706, 708, 714, 716, 717, 719, 737, 739, 742, 745, 746, 747, 748, 749, 751, 754, 755, 756, 760, 761, 764, 765, 770, 771, 773, 774, 785, 786, 789, 790, 791, 797, 803, 806, 809, 810, 813, 815, 818, 819, 821, 822, 831, 847, 849, 850, 851, 852, 853, 857, 863, 867, 870, 871, 875, 876, 879, 881, 890, 893, 898, 901, 903, 905, 906, 910, 911, 914, 917, 922, 926, 928, 931, 932, 934, 937, 947, 952, 953, 960, 961, 972, 975, 976, 979, 983, 984, 992, 997, 999, 1000, 1002, 1005, 1016, 1017, 1019, 1022, 1024, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1047, 1059, 1079, 1099, 1100, 1102, 1104, 1105, 1112, 1114, 1119, 1121, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1150, 1151, 1155, 1159, 1162, 1164, 1166, 1175, 1182, 1188, 1201, 1207, 1209, 1212, 1213, 1216, 1218, 1219, 1220, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1244, 1248, 1253, 1255, 1258, 1259, 1260, 1261, 1264, 1270, 1271, 1272, 1274, 1275, 1282, 1283, 1284, 1287, 1288, 1290, 1296, 1298, 1299, 1301, 1318, 1323, 1324, 1328, 1331, 1333, 1342, 1352, 1354, 1360, 1365, 1370], "far": [40, 340], "fashion": [244, 340, 890, 947], "fast": [46, 48, 50, 136, 172, 174, 340, 492, 663, 831, 947, 951, 1109, 1244, 1342, 1373], "fast_executemani": [38, 340], "faster": [47, 48, 49, 50, 58, 59, 141, 144, 218, 298, 308, 340, 579, 740, 831, 852, 853, 863, 890, 903, 947, 1108, 1195, 1342], "fastexcel": [144, 161], "favor": [38, 340], "fay": 135, "feat1": [297, 302, 340], "feat2": [297, 302, 340], "feather": [42, 145, 156, 340, 843], "featur": [1, 46, 57, 68, 70, 74, 297, 302, 340], "feature_0": [919, 947], "feature_0_train": [919, 947], "feature_1": [919, 947], "feature_nam": [302, 340], "feb": [161, 1365], "februari": 1365, "fed": 710, "feel": [678, 702, 1260, 1284], "fetch": [133, 852, 947], "fetch_california_h": [302, 340], "few": [228, 340], "fewer": [691, 715, 947, 1273, 1297], "ff": 1359, "ff00": [719, 1301], "fff": 1, "ffff00": [394, 395, 680, 1000, 1001, 1262], "ffffff": [40, 340], "ffi": [216, 340, 1101, 1342], "fgg": 953, "fghi": 1365, "fh": 140, "fiction": 1351, "field": [36, 37, 39, 47, 83, 117, 120, 127, 306, 340, 389, 570, 578, 579, 605, 607, 609, 638, 686, 687, 693, 706, 707, 727, 728, 729, 735, 742, 765, 766, 792, 813, 831, 912, 947, 996, 1187, 1195, 1226, 1269, 1288, 1289, 1310, 1312, 1325, 1342, 1366], "field_0": [389, 570, 996, 1187], "field_1": [389, 570, 996, 1187], "field_2": [996, 1187], "field_n": [389, 570, 996, 1187], "field_nam": [579, 831, 1195, 1342], "fiftyf": [512, 831], "figsiz": [594, 890, 903, 947], "figur": [594, 660, 831, 903, 947, 1239, 1342], "file": [2, 3, 5, 6, 32, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 209, 218, 280, 340, 432, 501, 593, 597, 831, 858, 900, 947, 951, 1108, 1342], "file_cache_ttl": [149, 153, 156, 157], "filenam": 145, "filesourc": [144, 150, 151, 158], "filesystem": [39, 143, 154, 155, 340], "fill": [52, 60, 202, 219, 220, 283, 308, 340, 344, 392, 425, 428, 493, 494, 500, 514, 515, 642, 644, 646, 648, 650, 653, 655, 657, 664, 780, 803, 806, 822, 831, 865, 866, 902, 919, 947, 1110, 1111, 1128, 1129, 1208, 1229, 1230, 1232, 1235, 1236, 1237, 1246, 1342], "fill_char": [698, 699, 1280, 1281], "fill_nan": [220, 340, 494, 831, 866, 947, 1111, 1342], "fill_nul": [52, 219, 340, 493, 831, 865, 919, 947, 1110, 1342], "fill_valu": [283, 308, 340, 664, 831, 902, 947, 1246, 1342], "fillnullstrategi": [220, 340, 494, 831, 866, 947, 1111, 1342], "film": 1351, "filter": [1, 47, 48, 49, 50, 53, 58, 59, 134, 153, 154, 158, 159, 212, 213, 237, 238, 239, 264, 268, 326, 340, 412, 416, 590, 592, 682, 708, 744, 769, 772, 779, 809, 810, 821, 831, 852, 853, 860, 861, 863, 873, 890, 893, 903, 906, 930, 947, 953, 1243, 1342, 1358], "final": [13, 40, 52, 136, 158, 245, 247, 340, 485, 487, 488, 831, 857, 876, 947, 1102, 1104, 1105, 1342, 1371], "find": [60, 226, 340, 512, 662, 677, 678, 690, 831, 1127, 1242, 1260, 1272, 1282, 1342], "find_pat": 689, "fine": [852, 863, 890, 903, 944, 947], "finish": [218, 340, 1108, 1342], "finit": [518, 738, 761, 831, 1133, 1342], "first": [46, 52, 139, 140, 144, 145, 147, 150, 151, 153, 158, 162, 163, 164, 165, 198, 228, 230, 232, 244, 245, 248, 249, 259, 263, 264, 272, 291, 295, 296, 304, 305, 310, 317, 323, 340, 365, 367, 376, 429, 433, 457, 459, 464, 480, 499, 509, 512, 519, 532, 540, 542, 547, 548, 570, 578, 579, 591, 600, 624, 625, 640, 662, 673, 677, 684, 685, 689, 691, 693, 694, 700, 701, 715, 722, 757, 758, 765, 779, 783, 821, 827, 831, 871, 872, 875, 876, 880, 889, 896, 911, 919, 921, 927, 947, 953, 972, 983, 1040, 1042, 1043, 1071, 1073, 1078, 1094, 1124, 1127, 1134, 1149, 1157, 1159, 1164, 1165, 1187, 1195, 1242, 1255, 1266, 1267, 1269, 1271, 1273, 1275, 1276, 1282, 1283, 1297, 1304, 1314, 1318, 1320, 1323, 1342, 1362, 1363, 1365, 1371, 1373], "first_column": [40, 340], "first_non_nul": [570, 1187], "first_part": [706, 707, 1288, 1289], "fisher": [528, 670, 831, 1145, 1253, 1342], "fit": [135, 242, 284, 308, 340, 665, 806, 831, 1247, 1248, 1342], "five": [301, 340, 1373], "fix": [10, 61, 70, 167, 480, 775, 790, 1094], "flag": [57, 143, 154, 166, 281, 298, 340, 663, 677, 685, 686, 689, 700, 701, 831, 863, 881, 901, 947, 953, 1244, 1259, 1267, 1268, 1271, 1282, 1283, 1323, 1342, 1365], "flat": [135, 275, 340, 543, 636, 831, 1160, 1224, 1342], "flatten": 831, "flavour": [40, 141, 340], "flight": 141, "flight_sql": 141, "flightsql": 141, "float": [10, 11, 37, 40, 47, 72, 73, 139, 140, 153, 159, 162, 163, 164, 165, 166, 169, 173, 197, 208, 212, 216, 219, 245, 266, 276, 297, 298, 332, 340, 372, 418, 430, 435, 436, 465, 482, 483, 484, 485, 487, 488, 493, 498, 499, 504, 506, 514, 518, 521, 523, 524, 525, 526, 530, 538, 558, 573, 577, 580, 594, 598, 612, 613, 614, 615, 625, 627, 628, 641, 642, 644, 646, 648, 650, 651, 653, 655, 657, 659, 661, 667, 738, 804, 806, 831, 857, 860, 865, 876, 891, 903, 936, 947, 953, 979, 1016, 1026, 1041, 1042, 1044, 1045, 1046, 1079, 1097, 1101, 1102, 1104, 1105, 1110, 1115, 1125, 1145, 1155, 1175, 1190, 1204, 1205, 1214, 1215, 1216, 1217, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1240, 1243, 1250, 1253, 1257, 1313, 1323, 1332, 1342, 1370, 1373], "float16": [302, 340], "float32": [1, 10, 37, 47, 55, 201, 223, 296, 297, 298, 302, 340, 486, 831, 849, 947, 953, 1103, 1132, 1193, 1321, 1323, 1326, 1342], "float4": [287, 340, 810, 906, 947, 1368], "float64": [10, 37, 40, 47, 127, 139, 148, 166, 169, 204, 214, 216, 223, 277, 302, 314, 340, 357, 358, 359, 360, 361, 362, 398, 411, 420, 421, 422, 431, 465, 486, 489, 523, 524, 629, 668, 669, 733, 734, 777, 793, 803, 806, 822, 827, 831, 854, 862, 897, 917, 947, 952, 953, 1079, 1103, 1324, 1330, 1342], "float_list": 79, "float_precis": [9, 10, 27, 37, 40, 47, 340, 947], "float_scientif": [37, 47, 340, 947], "floatfmt": 11, "floor": [54, 499, 831, 1342, 1363], "floor_a": 1364, "floordiv": [738, 831], "fmt": [11, 245, 340, 513, 780, 831, 873, 876, 947], "fmt_number": [340, 344], "fmt_str_length": [12, 770, 771, 773, 774], "fmt_table_cell_list_len": 13, "fmt_titl": [40, 340], "fn": [765, 766, 779, 805], "foggi": [700, 701, 1282, 1283], "fold": [340, 591, 757, 765, 766, 805], "folder": 159, "follow": [40, 46, 57, 134, 139, 140, 141, 143, 144, 150, 153, 154, 155, 230, 245, 249, 263, 272, 298, 310, 340, 459, 464, 477, 486, 578, 624, 625, 630, 640, 643, 645, 647, 649, 651, 652, 654, 656, 658, 667, 727, 738, 753, 770, 771, 773, 774, 793, 818, 819, 821, 823, 824, 826, 831, 832, 833, 836, 838, 839, 840, 871, 876, 889, 896, 947, 953, 1073, 1078, 1091, 1103, 1214, 1218, 1241, 1243, 1250, 1323, 1334, 1336, 1338, 1342, 1343, 1348, 1349, 1350, 1368, 1373], "font": [40, 340], "font_color": [40, 340], "font_siz": [40, 340], "foo": [35, 37, 39, 42, 43, 44, 45, 46, 135, 148, 149, 201, 204, 205, 206, 210, 211, 212, 213, 214, 215, 218, 221, 223, 225, 226, 227, 231, 232, 233, 234, 235, 236, 238, 244, 248, 249, 250, 251, 252, 253, 254, 257, 258, 261, 264, 266, 268, 269, 270, 273, 276, 277, 278, 280, 282, 285, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 304, 305, 306, 311, 312, 313, 318, 340, 413, 430, 432, 459, 503, 509, 513, 532, 583, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 627, 636, 676, 679, 681, 684, 686, 687, 692, 703, 705, 707, 709, 710, 711, 712, 713, 720, 723, 732, 750, 761, 762, 763, 778, 782, 783, 784, 787, 788, 794, 796, 798, 799, 801, 802, 804, 809, 812, 816, 820, 821, 827, 831, 849, 854, 855, 859, 860, 861, 862, 867, 873, 874, 875, 888, 893, 894, 897, 898, 911, 912, 916, 919, 947, 952, 953, 1018, 1041, 1073, 1166, 1214, 1216, 1224, 1261, 1263, 1266, 1268, 1269, 1285, 1289, 1294, 1295, 1302, 1305, 1342, 1356, 1358, 1359, 1360, 1362, 1365, 1368], "foo1": 1365, "foo11": [223, 340], "foo_": [588, 705, 780], "foo_1": [295, 340], "foo_2": [295, 340], "foo_3_4": 1365, "foo_a": [264, 340], "foo_a_bar_1": 780, "foo_at_1": 1360, "foo_b": [264, 340], "foo_b_bar_2": 780, "foo_bar": [583, 589, 705, 791, 1356], "foo_bar2": [583, 589], "foo_bar_baz": 705, "foo_c_bar_3": 780, "foo_low": [720, 1365], "foo_mean": 1360, "foo_q25": 1359, "foo_q50": 1359, "foo_q75": 1359, "foo_std": 1359, "foo_strip": 709, "foo_strip_end": 710, "foo_strip_start": 711, "foo_sum": [1359, 1360], "foo_uniqu": 1360, "foo_upp": [723, 1365], "foo_var": 1359, "foobar": [712, 713, 1294, 1295, 1365], "foobarbar": [713, 1295], "foofoobar": [712, 1294], "foral": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "forc": [139, 145, 149, 151, 245, 249, 298, 326, 340, 570, 875, 876, 930, 947, 1195, 1323, 1342], "force_parallel": [245, 340, 875, 876, 947], "foreign": 190, "form": [37, 47, 124, 126, 127, 128, 130, 148, 149, 157, 242, 274, 308, 340, 469, 621, 697, 722, 831, 947, 1083, 1211, 1279, 1304, 1342, 1365], "format": [7, 11, 15, 16, 20, 36, 37, 40, 42, 43, 46, 47, 95, 125, 137, 139, 140, 141, 144, 145, 147, 150, 153, 159, 196, 209, 217, 228, 242, 255, 264, 274, 275, 280, 294, 307, 338, 340, 344, 432, 464, 466, 469, 593, 594, 595, 714, 716, 717, 721, 775, 831, 858, 863, 864, 885, 900, 913, 947, 951, 956, 1080, 1083, 1296, 1298, 1299, 1303, 1341, 1365, 1366], "formul": [212, 340, 860, 861, 947], "formula": [40, 340, 482, 831, 1097, 1342], "fortran": [297, 298, 340], "forward": [220, 245, 283, 340, 384, 437, 456, 494, 500, 563, 664, 831, 866, 876, 902, 947, 991, 1047, 1070, 1111, 1180, 1246, 1342], "forward_fil": [310, 340, 392, 425, 428, 664, 831], "found": [20, 37, 40, 47, 96, 117, 120, 127, 131, 144, 151, 158, 214, 287, 340, 512, 662, 689, 694, 712, 713, 714, 717, 831, 906, 947, 1127, 1242, 1271, 1276, 1294, 1295, 1296, 1299, 1342, 1354, 1370], "four": [301, 340, 1370], "fourth": [528, 831, 1145, 1342], "frac": [485, 486, 487, 488, 670, 831, 1102, 1103, 1104, 1105, 1253, 1342], "fraction": [37, 47, 162, 163, 164, 165, 276, 340, 465, 558, 621, 661, 714, 717, 831, 947, 1079, 1175, 1211, 1240, 1296, 1299, 1342], "fragment": 1370, "frame": [37, 38, 40, 47, 52, 59, 60, 127, 140, 144, 150, 162, 163, 201, 202, 208, 242, 243, 247, 249, 256, 260, 263, 273, 274, 275, 287, 302, 308, 309, 340, 469, 810, 849, 850, 857, 886, 889, 906, 914, 947, 953, 1028, 1083, 1342, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1369, 1373], "frame_data": [1353, 1356], "frameinittyp": [340, 947], "frametyp": [52, 1370], "framework": [264, 307, 340, 913, 947], "freedom": [288, 311, 340, 566, 572, 653, 654, 657, 658, 675, 743, 763, 807, 808, 812, 820, 831, 907, 915, 947, 1235, 1237, 1257, 1332, 1342], "freeli": [810, 906, 947, 953], "freez": [40, 340], "freeze_pan": [40, 340], "frequenc": [310, 340, 742, 831, 1331, 1342], "frequent": [1241, 1243, 1342], "fri": [340, 343], "fridai": [230, 340, 437, 466, 756, 871, 947, 1047, 1080, 1083], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 36, 37, 39, 40, 42, 46, 47, 48, 49, 50, 52, 60, 70, 83, 95, 99, 115, 119, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 178, 183, 198, 201, 208, 209, 210, 216, 218, 221, 222, 228, 230, 242, 243, 244, 245, 246, 247, 255, 264, 268, 269, 272, 273, 275, 276, 278, 279, 287, 295, 302, 304, 305, 307, 308, 309, 310, 316, 340, 343, 344, 389, 398, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 489, 499, 501, 514, 528, 546, 558, 570, 579, 587, 612, 613, 615, 620, 621, 624, 627, 629, 640, 641, 643, 645, 647, 649, 651, 654, 656, 658, 661, 673, 685, 686, 691, 693, 694, 704, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 740, 752, 753, 756, 757, 769, 770, 771, 772, 773, 774, 775, 789, 791, 806, 810, 817, 818, 819, 827, 830, 831, 849, 857, 858, 859, 867, 871, 875, 876, 877, 885, 893, 894, 896, 898, 899, 906, 911, 913, 914, 919, 920, 947, 951, 952, 953, 996, 1004, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1099, 1101, 1103, 1108, 1145, 1163, 1175, 1187, 1204, 1205, 1207, 1208, 1211, 1216, 1228, 1240, 1267, 1268, 1273, 1275, 1286, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1303, 1318, 1333, 1342, 1351, 1352, 1353, 1354, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373], "from_arrai": 810, "from_arrow": 125, "from_json": 831, "from_panda": 125, "from_repr": [296, 340, 1320, 1342], "fromkei": [53, 55], "front": [230, 340, 871, 947], "fruit": [293, 340, 412, 416, 637, 682, 708, 715, 831, 1017, 1022, 1264, 1290, 1297], "fruits_revers": [637, 831], "fsspec": [139, 140, 145, 147, 154, 155, 161], "fsspecfileio": 155, "full": [11, 26, 46, 50, 52, 67, 95, 127, 130, 139, 140, 141, 143, 145, 148, 149, 151, 153, 154, 155, 157, 158, 159, 244, 309, 340, 691, 693, 700, 701, 714, 715, 716, 717, 721, 770, 771, 875, 881, 914, 947, 951, 953, 1273, 1275, 1282, 1283, 1296, 1297, 1298, 1299, 1303, 1342, 1358, 1373], "full_sent": 760, "fulli": [171, 263, 276, 298, 340], "funcnam": [40, 340], "function": [0, 31, 32, 33, 34, 37, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 68, 70, 74, 91, 92, 122, 125, 129, 131, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 189, 193, 195, 197, 200, 206, 209, 216, 223, 246, 249, 255, 263, 264, 269, 287, 297, 298, 299, 302, 303, 304, 307, 309, 326, 340, 343, 344, 352, 389, 409, 410, 429, 430, 432, 485, 487, 488, 510, 570, 578, 579, 604, 605, 620, 624, 627, 639, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 667, 670, 690, 735, 736, 737, 746, 750, 758, 762, 764, 765, 766, 778, 779, 781, 783, 784, 787, 789, 790, 792, 793, 796, 798, 801, 803, 805, 812, 816, 820, 822, 827, 831, 843, 847, 853, 858, 877, 881, 885, 889, 894, 906, 910, 913, 914, 921, 930, 947, 951, 955, 996, 1015, 1024, 1040, 1041, 1101, 1102, 1104, 1105, 1125, 1187, 1195, 1216, 1227, 1228, 1231, 1233, 1234, 1241, 1243, 1248, 1250, 1253, 1272, 1321, 1324, 1326, 1327, 1342, 1347, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1368, 1369, 1370, 1371, 1372, 1373], "function_nam": 136, "further": 827, "futur": [59, 197, 208, 244, 245, 281, 340, 853, 857, 875, 876, 901, 947], "g": [33, 37, 47, 135, 139, 143, 145, 147, 154, 159, 171, 197, 209, 241, 298, 308, 340, 349, 432, 486, 489, 579, 665, 777, 831, 858, 894, 947, 951, 1103, 1342, 1373], "g1": [495, 744, 831], "g2": [495, 744, 831], "g_1": [670, 831, 1253, 1342], "gag": 26, "gamma": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "gantt": [890, 947], "gather": [140, 224, 340, 365, 503, 546, 754, 831, 869, 947, 972, 1117, 1163, 1342], "gather_everi": [340, 831, 947, 1342], "gb": [216, 340, 398, 1101, 1342], "gbp": 1373, "gc": [39, 143, 154, 155, 340], "gca": 26, "gcaacgcatata": 26, "gcp": [34, 37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 155, 156, 157, 158, 183, 340, 947], "gdp": [245, 340, 876, 947], "gdp2": [245, 340, 876, 947], "gdp_date": [245, 340, 876, 947], "ge": [831, 1342], "gener": [1, 134, 135, 141, 142, 160, 166, 167, 168, 169, 170, 171, 173, 197, 204, 206, 264, 276, 295, 298, 304, 340, 558, 661, 666, 751, 770, 773, 785, 786, 788, 789, 790, 806, 818, 819, 831, 947, 1016, 1175, 1240, 1249, 1318, 1342, 1373], "geq": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "germani": [245, 340, 876, 947], "get": [52, 59, 70, 136, 146, 152, 159, 189, 198, 200, 204, 205, 214, 222, 225, 227, 230, 232, 233, 237, 239, 240, 248, 251, 258, 259, 264, 272, 273, 277, 282, 285, 291, 299, 303, 313, 323, 334, 340, 350, 363, 364, 365, 367, 375, 378, 390, 398, 410, 413, 425, 426, 427, 428, 437, 447, 496, 502, 509, 512, 527, 529, 532, 544, 550, 571, 580, 581, 582, 590, 592, 598, 612, 613, 622, 623, 628, 639, 640, 671, 675, 684, 731, 732, 736, 737, 739, 743, 754, 756, 778, 783, 787, 793, 794, 795, 796, 798, 799, 800, 802, 812, 816, 820, 831, 847, 852, 853, 855, 862, 867, 868, 871, 872, 878, 880, 896, 897, 904, 909, 910, 916, 927, 938, 947, 952, 957, 970, 971, 972, 973, 974, 982, 985, 997, 1004, 1018, 1027, 1036, 1037, 1038, 1039, 1047, 1057, 1096, 1113, 1114, 1119, 1124, 1127, 1130, 1131, 1143, 1146, 1149, 1161, 1167, 1188, 1196, 1198, 1199, 1201, 1203, 1204, 1205, 1212, 1213, 1217, 1227, 1254, 1257, 1266, 1314, 1318, 1324, 1328, 1332, 1342], "get_chunk": 1342, "get_column": [197, 300, 340], "get_column_index": 340, "get_polars_schema": 191, "get_table_info": 191, "get_token": 33, "get_worksheet_by_nam": [40, 340], "gevent": [59, 161, 853, 947], "gh": 701, "gh45": 701, "gh45ij67kl": 701, "ghi": [349, 686, 831, 953, 1268], "gil": [579, 831, 951], "git": 57, "github": [142, 340], "give": [149, 156, 157, 245, 255, 305, 307, 340, 447, 499, 528, 633, 738, 742, 831, 843, 876, 885, 892, 911, 913, 947, 1057, 1145, 1331, 1342, 1369], "given": [40, 52, 101, 106, 123, 124, 126, 127, 128, 130, 135, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 158, 164, 165, 166, 167, 169, 171, 172, 173, 174, 195, 216, 217, 219, 221, 230, 240, 249, 256, 262, 263, 268, 273, 274, 275, 283, 286, 302, 309, 340, 372, 384, 389, 398, 410, 419, 438, 442, 466, 468, 469, 482, 486, 510, 516, 538, 563, 570, 573, 579, 620, 624, 630, 633, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 664, 686, 687, 698, 699, 714, 717, 724, 727, 737, 777, 778, 787, 792, 793, 806, 807, 808, 831, 864, 871, 881, 886, 889, 892, 893, 902, 905, 914, 930, 947, 952, 953, 955, 979, 991, 996, 1004, 1029, 1048, 1052, 1080, 1082, 1083, 1097, 1101, 1103, 1125, 1130, 1144, 1155, 1180, 1187, 1190, 1193, 1195, 1208, 1214, 1218, 1224, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1242, 1246, 1268, 1269, 1280, 1281, 1296, 1299, 1306, 1330, 1333, 1342, 1351, 1353, 1358, 1360, 1361, 1364, 1365, 1370, 1372, 1373], "glimps": [208, 232, 340], "glob": [139, 140, 144, 145, 149, 151, 153, 156, 157, 158], "global": [51, 91, 92, 144, 160, 169, 177, 287, 340, 634, 635, 810, 831, 906, 947, 1019, 1023, 1222, 1223, 1342, 1352, 1354, 1369], "gmt": [442, 446, 463, 1052, 1056, 1077], "go": [12, 139, 140, 153, 412, 682, 1017, 1264], "godfath": 1351, "goe": 12, "gonfruit": 1297, "good": [46, 48, 50, 242, 340, 947, 1364], "goodby": 1, "googl": [34, 143, 154, 155], "gpu": [47, 48, 49, 50, 297, 340, 852, 853, 863, 890, 903, 922, 944, 947, 1321, 1342], "gpu_devic": [297, 340], "gpudevic": [297, 340], "gpuengin": [852, 863, 890, 903, 947], "grade": [1145, 1342], "grain": [852, 863, 890, 903, 944, 947], "granular": 1370, "grape": 1365, "graph": [58, 141, 247, 340, 594, 852, 873, 919, 947], "graphviz": [247, 340, 594, 903, 947], "great": [340, 344], "great_tabl": [340, 344], "greater": [202, 245, 340, 504, 506, 516, 670, 698, 699, 707, 724, 831, 876, 947, 1130, 1253, 1280, 1281, 1289, 1306, 1342], "greatest": [1359, 1363], "greatli": [145, 156], "green": [51, 91, 92, 326, 742, 831, 930, 1331, 1342], "greenlet": [59, 853, 947], "greet": 1, "grid": [514, 831], "grid_point": [514, 831], "gridlin": [40, 340], "gross": 1351, "group": [9, 27, 46, 50, 136, 140, 158, 201, 229, 230, 243, 245, 260, 262, 264, 272, 275, 308, 310, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 350, 410, 429, 491, 497, 502, 505, 542, 578, 579, 590, 592, 620, 630, 639, 640, 672, 673, 677, 685, 686, 687, 689, 700, 701, 737, 742, 793, 831, 849, 870, 871, 876, 896, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 953, 1040, 1159, 1227, 1259, 1267, 1268, 1269, 1271, 1282, 1283, 1331, 1342, 1351, 1359, 1369, 1370], "group_bi": [230, 260, 264, 272, 310, 339, 340, 350, 400, 405, 408, 410, 495, 497, 502, 505, 578, 579, 620, 672, 673, 737, 744, 770, 773, 793, 831, 852, 853, 863, 871, 890, 892, 896, 903, 945, 947, 953], "group_by_dynam": [272, 340, 896, 947], "group_by_partit": [890, 947], "group_col": [495, 744, 831], "group_df": [326, 930], "group_dtyp": [620, 831], "group_index": [685, 1267], "group_to_row": [620, 831], "groupbi": [229, 340, 579, 793, 831], "grouper": [400, 405, 408, 831], "grow": [312, 340], "grown": [234, 340], "gt": [340, 344, 831, 1342], "gte": [495, 744, 831], "guarante": [46, 50, 139, 140, 200, 208, 231, 256, 303, 305, 340, 409, 410, 508, 735, 736, 737, 831, 847, 857, 886, 910, 911, 947, 1015, 1123, 1325, 1327, 1342], "guid": [134, 136, 831, 951, 1373], "gzip": [46, 50, 340, 947], "h": [308, 340, 349, 466, 469, 665, 700, 701, 714, 717, 721, 831, 1282, 1283, 1296, 1299, 1303, 1365, 1366], "ha": [39, 40, 52, 59, 129, 141, 153, 176, 197, 310, 316, 321, 340, 409, 410, 429, 501, 578, 591, 597, 691, 715, 725, 736, 737, 761, 778, 787, 827, 831, 853, 920, 925, 930, 947, 1015, 1028, 1040, 1042, 1273, 1297, 1327, 1342], "half": [302, 340, 464, 485, 486, 487, 488, 831, 1078, 1102, 1103, 1104, 1105, 1342], "half_lif": [485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342], "ham": [35, 37, 39, 42, 43, 46, 201, 204, 205, 206, 210, 211, 212, 213, 214, 215, 221, 226, 231, 232, 234, 244, 248, 250, 252, 254, 257, 261, 266, 268, 269, 270, 273, 276, 277, 278, 285, 288, 289, 291, 295, 296, 298, 299, 300, 305, 311, 312, 340, 413, 594, 595, 827, 849, 854, 855, 859, 860, 861, 862, 867, 875, 888, 893, 894, 897, 898, 911, 919, 947, 1018, 1358, 1359], "ham_a": [295, 340], "ham_b": [295, 340], "ham_right": [244, 340, 875, 947], "hamburg": 827, "hand": [40, 139, 140, 153, 340, 559, 560, 561, 562, 1176, 1177, 1178, 1179], "handi": [437, 756, 1047], "handl": [39, 41, 58, 59, 98, 131, 136, 139, 140, 153, 159, 221, 225, 268, 340, 433, 540, 684, 724, 831, 852, 867, 893, 947, 1043, 1157, 1266, 1306, 1342], "handler": [137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 209, 340, 432, 831, 858, 947], "happen": [141, 442, 627, 831, 1052, 1216, 1342], "hard": [153, 245, 340, 876, 881, 947], "harder": [230, 340, 871, 947], "hardwar": 1373, "has_head": [139, 140, 144, 150, 153], "has_nul": [831, 1122, 1342], "has_prefix": [416, 708], "has_suffix": [412, 682], "has_two": 1360, "has_valid": 1342, "hash": [231, 340, 831, 1342], "hash_row": 340, "hat": [700, 701, 1282, 1283], "have": [5, 14, 30, 33, 40, 51, 52, 60, 67, 92, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 198, 209, 218, 242, 244, 245, 264, 267, 272, 274, 275, 294, 302, 317, 340, 429, 432, 485, 487, 488, 579, 591, 630, 634, 635, 640, 687, 702, 758, 831, 858, 875, 876, 885, 896, 920, 921, 947, 953, 1040, 1042, 1102, 1104, 1105, 1108, 1218, 1222, 1223, 1282, 1284, 1342, 1369, 1371, 1373], "haystack": [686, 1268], "he": 710, "head": [70, 153, 228, 248, 291, 340, 355, 532, 831, 880, 947, 1149, 1314, 1342], "header": [37, 40, 46, 47, 50, 131, 139, 140, 144, 150, 153, 214, 304, 340, 947], "header_format": [40, 340], "header_nam": [304, 340], "headerless": 153, "heap": [136, 216, 340, 831, 1101, 1342], "heatmap": [40, 340], "heavili": 158, "height": [40, 135, 169, 213, 340, 343, 1342, 1347], "hell": [709, 1291], "hello": [1, 20, 709, 710, 711, 953, 1166, 1291, 1292, 1293, 1353, 1356], "hello_": 780, "hello_data": 1356, "hello_world": 1356, "help": [40, 162, 163, 164, 165, 340, 947], "helper": [340, 344, 827], "henc": [700, 1283], "here": [37, 39, 40, 42, 46, 47, 48, 49, 50, 124, 126, 127, 128, 130, 141, 142, 143, 148, 149, 151, 153, 154, 155, 156, 157, 158, 167, 169, 173, 183, 198, 264, 340, 437, 578, 579, 594, 687, 694, 756, 831, 903, 947, 953, 1047, 1276], "hex": [394, 395, 680, 681, 719, 1000, 1001, 1262, 1263, 1301], "hexadecim": [1000, 1001], "hf": [37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 156, 157, 158, 183, 340, 947], "hf_token": [37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 156, 157, 158, 183, 340, 947], "hi": [1, 1365], "hidden": [40, 340], "hidden_column": [40, 340], "hide": [21, 22, 23, 24], "hide_gridlin": [40, 340], "hide_password": 141, "high": [275, 340, 344, 627, 831, 843, 1216, 1342], "higher": [46, 50, 208, 266, 332, 340, 628, 650, 651, 804, 831, 857, 891, 936, 947, 1042, 1217, 1233, 1342], "highest": [340, 344, 630, 741, 761, 831, 947, 1218, 1342], "highli": [136, 831], "hint": 134, "hippopotamu": [698, 699, 1280, 1281], "hist": [831, 1342, 1347], "histogram": [1342, 1347], "hit": [848, 947], "hive": [151, 156, 158], "hive_custom": 186, "hive_partit": [151, 156, 158], "hive_schema": [151, 156, 158], "hive_serd": 186, "hmm": 953, "hold": [284, 298, 340, 1323, 1342], "holidai": [437, 756, 1047], "home": [722, 1304], "horizont": [20, 60, 100, 223, 234, 251, 253, 258, 290, 308, 340, 747, 749, 758, 759, 760, 765, 766, 768, 776, 779, 795, 797, 800, 805, 815, 919, 947], "host": [57, 139, 145, 147, 158], "hour": [149, 153, 156, 157, 230, 245, 272, 310, 340, 451, 453, 454, 458, 459, 462, 464, 465, 469, 471, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 772, 773, 774, 775, 789, 817, 818, 819, 831, 871, 876, 896, 947, 953, 1073, 1076, 1078, 1085, 1091, 1103, 1342, 1366], "hours_diff": 471, "hous": [302, 340], "how": [11, 37, 39, 40, 41, 42, 46, 47, 48, 49, 50, 52, 60, 100, 136, 142, 149, 151, 153, 156, 157, 158, 183, 213, 221, 244, 245, 264, 308, 309, 340, 373, 433, 462, 463, 514, 539, 540, 620, 633, 652, 714, 717, 756, 772, 821, 831, 867, 875, 876, 914, 919, 947, 980, 1043, 1076, 1077, 1156, 1157, 1234, 1296, 1299, 1342], "howev": [1, 127, 141, 151, 158, 193, 216, 249, 298, 340, 620, 831, 852, 863, 890, 903, 947, 1101, 1342], "hstack": [100, 340], "html": [32, 40, 42, 43, 125, 141, 145, 147, 195, 196, 197, 206, 340, 955, 956], "http": [20, 32, 40, 42, 43, 70, 125, 141, 142, 145, 147, 178, 195, 196, 197, 206, 340, 594, 685, 687, 697, 903, 947, 955, 956, 1267, 1269, 1279], "httpmethod": 70, "hug": [37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 156, 157, 158, 183, 340, 947], "huge": [216, 340, 1101, 1342], "hut": [700, 701, 1282, 1283], "hvplot": [340, 343, 1342, 1347], "hyperbol": [358, 360, 362, 421, 669, 734, 831, 965, 967, 969, 1032, 1252, 1316, 1342], "hyperloglog": [199, 340, 356, 750, 831, 846, 947, 963, 1342], "hyphen": [676, 1258], "hypothesi": [167, 169, 172, 173, 1373], "i": [1, 12, 14, 17, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 66, 67, 68, 69, 70, 74, 84, 92, 96, 98, 99, 100, 101, 102, 103, 105, 106, 111, 117, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 187, 189, 193, 198, 199, 200, 201, 203, 204, 208, 209, 212, 213, 215, 216, 218, 221, 225, 229, 230, 231, 232, 235, 236, 240, 242, 243, 244, 245, 246, 247, 248, 249, 255, 256, 260, 262, 263, 264, 268, 269, 270, 272, 273, 274, 275, 276, 279, 280, 281, 283, 285, 286, 287, 288, 291, 292, 297, 298, 299, 302, 303, 304, 305, 307, 309, 310, 311, 315, 317, 318, 326, 340, 343, 344, 349, 352, 354, 355, 356, 366, 369, 376, 377, 384, 389, 397, 409, 410, 411, 414, 415, 429, 430, 432, 435, 436, 437, 438, 441, 449, 456, 457, 459, 464, 466, 469, 477, 485, 486, 487, 488, 491, 495, 499, 508, 510, 513, 516, 528, 534, 541, 542, 545, 547, 549, 558, 563, 564, 566, 570, 572, 575, 578, 579, 583, 585, 586, 587, 589, 590, 591, 593, 602, 620, 625, 627, 630, 632, 633, 634, 635, 636, 639, 640, 641, 643, 645, 647, 649, 651, 652, 653, 654, 656, 657, 658, 661, 662, 663, 664, 666, 667, 670, 671, 672, 673, 675, 676, 677, 678, 679, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 707, 709, 710, 711, 714, 715, 716, 717, 719, 721, 722, 724, 729, 736, 737, 742, 743, 746, 747, 748, 749, 750, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 770, 771, 773, 774, 779, 783, 784, 785, 786, 788, 789, 790, 791, 793, 796, 798, 801, 803, 806, 807, 808, 809, 810, 812, 816, 818, 819, 820, 821, 822, 827, 831, 846, 847, 848, 851, 852, 853, 855, 857, 858, 860, 861, 862, 863, 867, 870, 871, 874, 875, 876, 877, 879, 881, 885, 886, 890, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 913, 914, 915, 916, 918, 921, 922, 930, 940, 947, 951, 953, 960, 961, 962, 963, 976, 983, 984, 991, 996, 1003, 1015, 1019, 1020, 1021, 1024, 1029, 1030, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1051, 1059, 1073, 1078, 1080, 1083, 1091, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1112, 1113, 1123, 1124, 1125, 1127, 1130, 1132, 1135, 1142, 1144, 1145, 1146, 1149, 1151, 1158, 1159, 1162, 1164, 1166, 1175, 1180, 1181, 1187, 1195, 1214, 1216, 1218, 1220, 1222, 1223, 1224, 1227, 1228, 1231, 1233, 1234, 1235, 1237, 1240, 1241, 1242, 1243, 1244, 1246, 1249, 1250, 1253, 1254, 1257, 1258, 1259, 1260, 1261, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1286, 1289, 1291, 1292, 1293, 1296, 1297, 1298, 1299, 1301, 1303, 1304, 1306, 1314, 1317, 1321, 1323, 1324, 1326, 1327, 1331, 1332, 1342, 1347, 1351, 1352, 1357, 1361, 1362, 1365, 1368, 1370, 1371, 1373], "i0e0": 1373, "i16": [1, 55, 445, 460, 479, 665, 831, 953, 1074, 1320, 1342, 1373], "i32": [1, 55, 124, 127, 131, 166, 168, 169, 278, 287, 340, 375, 376, 378, 397, 411, 440, 448, 450, 451, 452, 453, 454, 458, 481, 665, 756, 821, 831, 898, 947, 952, 982, 983, 985, 1003, 1050, 1060, 1064, 1065, 1066, 1072, 1095, 1193, 1342, 1362, 1366, 1373], "i64": [1, 10, 13, 16, 17, 21, 27, 53, 54, 55, 56, 60, 61, 79, 99, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 141, 148, 149, 153, 198, 200, 201, 202, 203, 205, 209, 210, 213, 214, 217, 218, 220, 221, 224, 225, 227, 228, 229, 230, 232, 234, 235, 237, 239, 241, 244, 245, 246, 248, 249, 250, 256, 257, 262, 263, 264, 265, 268, 269, 270, 271, 272, 276, 278, 280, 283, 285, 286, 287, 289, 291, 293, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 330, 333, 334, 340, 349, 351, 355, 365, 370, 371, 373, 374, 379, 381, 382, 383, 384, 385, 387, 390, 392, 400, 405, 408, 409, 410, 419, 425, 426, 427, 428, 429, 430, 433, 434, 447, 462, 468, 470, 471, 472, 473, 474, 475, 476, 486, 489, 491, 492, 494, 495, 496, 497, 499, 500, 502, 503, 505, 509, 511, 513, 514, 515, 516, 519, 520, 522, 523, 524, 525, 526, 529, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 576, 578, 579, 599, 600, 601, 603, 604, 606, 608, 610, 611, 616, 620, 621, 624, 625, 626, 627, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 661, 663, 664, 665, 666, 671, 672, 673, 691, 700, 701, 715, 719, 724, 725, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 741, 744, 751, 754, 757, 758, 759, 760, 765, 766, 767, 768, 769, 772, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 802, 805, 809, 810, 811, 814, 815, 816, 817, 821, 827, 831, 847, 849, 850, 852, 853, 858, 859, 861, 864, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 880, 881, 882, 886, 887, 889, 890, 892, 893, 894, 895, 896, 898, 900, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 917, 920, 921, 923, 924, 926, 927, 928, 930, 931, 934, 937, 938, 947, 953, 957, 958, 959, 962, 981, 986, 988, 990, 991, 992, 994, 997, 1015, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1057, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1107, 1108, 1109, 1111, 1112, 1116, 1117, 1119, 1124, 1126, 1135, 1149, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1169, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1195, 1200, 1208, 1214, 1216, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1229, 1232, 1236, 1240, 1241, 1243, 1246, 1247, 1249, 1254, 1255, 1301, 1307, 1312, 1314, 1319, 1327, 1328, 1333, 1342, 1351, 1352, 1354, 1358, 1359, 1360, 1361, 1362, 1364, 1367, 1368, 1370, 1371, 1373], "i8": [388, 389, 445, 448, 451, 453, 454, 455, 458, 460, 461, 465, 478, 479, 569, 665, 803, 806, 822, 831, 995, 996, 1043, 1055, 1058, 1068, 1069, 1075, 1079, 1092, 1093, 1186, 1225, 1247, 1330, 1342, 1366], "i_bitand_j": 1361, "i_bitand_op_j": 1361, "i_bitcount": 1361, "i_bitor_j": 1361, "i_bitor_op_j": 1361, "i_bitxor_j": 1361, "i_bitxor_op_j": 1361, "iceberg": [41, 155, 340, 843], "icon": [40, 340], "id": [26, 33, 40, 60, 135, 139, 144, 155, 246, 297, 304, 317, 326, 340, 639, 700, 701, 740, 831, 877, 921, 930, 947, 953, 1227, 1329, 1342, 1370, 1371, 1373], "id_char": 1373, "id_var": [255, 307, 340, 885, 913, 947], "ideal": [133, 134], "ident": [33, 131, 202, 203, 340, 466, 638, 639, 831, 850, 851, 947, 1028, 1030, 1080, 1226, 1227, 1342], "identif": [144, 150], "identifi": [131, 141, 255, 262, 305, 307, 318, 340, 885, 911, 913, 947], "idiograph": 953, "idiomat": [827, 855, 862, 897, 916, 930, 947], "idx": [153, 230, 243, 317, 340, 376, 389, 570, 871, 921, 947, 996, 1187, 1271], "idx_lit": 1271, "idx_rx": 1271, "ieee": [738, 831], "if_set": [5, 30], "if_table_exist": [38, 340], "ifnul": 1363, "ignor": [39, 141, 168, 169, 173, 253, 290, 309, 340, 352, 354, 377, 397, 433, 463, 485, 487, 488, 540, 549, 612, 613, 676, 692, 746, 748, 760, 797, 815, 831, 914, 947, 953, 960, 961, 984, 1003, 1043, 1077, 1102, 1104, 1105, 1157, 1166, 1204, 1205, 1258, 1274, 1342], "ignore_error": [139, 140, 149, 153, 157], "ignore_nul": [253, 290, 340, 352, 354, 377, 485, 487, 488, 549, 676, 692, 746, 748, 760, 797, 815, 831, 960, 961, 984, 1102, 1104, 1105, 1166, 1258, 1274, 1342], "ignore_spac": 953, "ij": 701, "ij67": 701, "ijkl": 1365, "ilmsuxu": [677, 685, 686, 689, 700, 701, 1259, 1267, 1268, 1271, 1282, 1283], "imbal": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "imdb_scor": 1351, "immedi": [193, 630, 751, 755, 770, 771, 773, 774, 785, 786, 789, 790, 803, 806, 809, 813, 818, 819, 822, 831, 1218, 1342, 1352], "immut": [298, 340, 1323, 1342], "impact": [230, 340, 871, 947, 1351, 1370], "impl": 155, "implement": [46, 141, 197, 231, 249, 326, 340, 343, 344, 508, 579, 603, 604, 606, 608, 610, 611, 725, 735, 793, 831, 930, 1123, 1195, 1241, 1243, 1325, 1342, 1347], "implic": [432, 831, 858, 947], "implicit": [309, 340, 914, 947], "implicitli": [221, 268, 340, 495, 821, 831, 867, 893, 947, 1370], "implod": [831, 1342, 1360], "import": [10, 16, 28, 35, 37, 39, 40, 42, 43, 46, 52, 67, 70, 124, 125, 128, 129, 135, 139, 141, 142, 148, 149, 153, 159, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 201, 208, 209, 210, 213, 228, 230, 243, 245, 262, 264, 280, 287, 295, 297, 302, 307, 308, 310, 340, 343, 344, 398, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 586, 587, 593, 620, 641, 643, 645, 647, 649, 651, 654, 656, 658, 756, 769, 770, 771, 772, 773, 774, 775, 789, 810, 818, 819, 827, 831, 843, 849, 853, 857, 858, 859, 861, 871, 876, 881, 900, 913, 947, 951, 1004, 1031, 1033, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1103, 1133, 1136, 1138, 1139, 1228, 1251, 1315, 1342, 1347, 1352, 1367, 1370, 1373], "improv": [38, 50, 145, 156, 244, 340, 578, 831, 875, 947], "in_plac": [234, 284, 312, 340, 1219, 1248, 1255, 1342], "in_progress": [892, 947], "includ": [7, 20, 30, 37, 39, 40, 47, 57, 129, 141, 143, 144, 149, 150, 151, 153, 154, 155, 156, 157, 158, 169, 170, 193, 204, 208, 216, 246, 262, 264, 268, 275, 286, 302, 304, 308, 309, 340, 430, 465, 495, 499, 510, 516, 586, 627, 642, 644, 646, 648, 650, 652, 653, 655, 657, 700, 701, 705, 706, 709, 710, 756, 765, 807, 808, 831, 857, 867, 877, 893, 905, 914, 947, 953, 1041, 1042, 1079, 1101, 1112, 1125, 1130, 1216, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1282, 1283, 1287, 1288, 1291, 1342, 1370], "include_bom": [37, 47, 340, 947], "include_boundari": [230, 340, 871, 947], "include_break": [430, 627, 831, 1041, 1216, 1342], "include_breakpoint": [510, 831, 1125, 1342], "include_categor": 953, "include_categori": [510, 831, 1125, 1342], "include_col": 169, "include_file_path": [144, 149, 150, 151, 153, 156, 157, 158], "include_head": [37, 40, 47, 140, 304, 340, 947], "include_index": 129, "include_init": 765, "include_kei": [262, 275, 340], "include_nul": [309, 340, 914, 947], "inclus": [198, 230, 272, 340, 469, 516, 640, 643, 645, 647, 649, 651, 654, 656, 658, 705, 706, 751, 770, 771, 773, 774, 785, 786, 789, 790, 818, 819, 831, 871, 896, 947, 1083, 1130, 1287, 1288, 1342], "incom": 141, "incompat": 118, "incomplet": [635, 831, 1223, 1342], "incorpor": 1370, "incorrect": [281, 340, 480, 578, 579, 663, 831, 901, 930, 947, 1094, 1244, 1342], "incorrectli": [139, 570], "increas": [40, 52, 139, 144, 150, 151, 158, 340, 429, 639, 831, 1040, 1227, 1342], "independ": [58, 59, 166, 169, 173, 302, 340, 666, 831, 852, 853, 863, 890, 903, 947], "index": [40, 106, 125, 129, 132, 139, 140, 145, 147, 149, 151, 153, 156, 157, 158, 161, 197, 224, 226, 230, 235, 240, 242, 264, 270, 272, 273, 274, 283, 285, 297, 298, 300, 307, 309, 310, 316, 317, 340, 350, 363, 364, 365, 367, 370, 371, 376, 384, 389, 486, 502, 503, 505, 512, 535, 536, 545, 546, 547, 563, 564, 570, 640, 643, 645, 647, 649, 651, 654, 656, 658, 662, 664, 671, 677, 685, 689, 691, 704, 715, 725, 754, 785, 788, 831, 869, 871, 896, 902, 904, 913, 914, 920, 921, 947, 953, 970, 971, 972, 973, 974, 977, 978, 983, 991, 996, 1103, 1116, 1117, 1127, 1144, 1152, 1153, 1162, 1163, 1164, 1180, 1181, 1187, 1208, 1241, 1242, 1246, 1254, 1267, 1271, 1273, 1286, 1297, 1342, 1347, 1360, 1365], "index_column": [230, 272, 340, 640, 831, 871, 896, 947], "index_of": [831, 1342], "indexord": [297, 298, 340], "indic": [37, 40, 42, 46, 47, 48, 49, 50, 66, 67, 69, 84, 99, 109, 136, 137, 139, 140, 141, 144, 145, 147, 149, 150, 151, 153, 156, 157, 158, 166, 167, 173, 183, 230, 272, 275, 283, 295, 340, 366, 384, 502, 510, 517, 518, 519, 521, 522, 523, 524, 525, 526, 545, 563, 583, 584, 585, 586, 587, 588, 589, 620, 640, 643, 645, 647, 649, 651, 654, 656, 658, 662, 664, 754, 755, 802, 831, 871, 896, 902, 947, 953, 991, 1024, 1116, 1125, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1162, 1180, 1241, 1242, 1246, 1318, 1342, 1373], "indistinguish": [37, 47, 340, 947], "individu": [40, 50, 193, 272, 297, 298, 302, 340, 579, 686, 728, 831, 852, 896, 947, 953, 1027, 1268, 1342], "inequ": [614, 831], "inexact": [162, 163, 164, 165], "inf": [166, 169, 173, 362, 430, 518, 521, 627, 738, 831, 969, 1033, 1041, 1133, 1136, 1193, 1211, 1216, 1330, 1342, 1367], "infer": [37, 42, 46, 47, 48, 49, 50, 68, 83, 99, 124, 126, 127, 128, 129, 130, 139, 140, 141, 144, 148, 149, 150, 151, 153, 156, 157, 158, 183, 249, 340, 578, 579, 636, 693, 714, 716, 717, 718, 721, 775, 791, 806, 831, 947, 1195, 1224, 1275, 1296, 1298, 1299, 1300, 1303, 1342], "infer_schema": [139, 153], "infer_schema_length": [127, 130, 135, 139, 140, 141, 144, 148, 149, 150, 153, 157, 340, 693, 947, 1275], "inference_length": [718, 1300], "inference_s": [249, 340], "infin": [722, 738, 831, 1304], "infinit": [521, 738, 831, 1136, 1342], "influenc": [144, 881, 947], "influxdb": 141, "info": [143, 154, 155, 161], "inform": [19, 23, 37, 38, 42, 46, 47, 48, 49, 50, 57, 134, 136, 143, 149, 151, 153, 154, 155, 156, 157, 158, 162, 164, 183, 184, 185, 187, 188, 195, 206, 208, 340, 344, 528, 579, 670, 677, 685, 686, 689, 700, 701, 831, 852, 857, 863, 890, 903, 947, 951, 955, 1023, 1145, 1253, 1259, 1267, 1268, 1271, 1282, 1283, 1342], "inherit": [273, 340, 432, 831, 858, 947], "init": [193, 1351], "initcap": 1363, "initi": [32, 33, 34, 40, 83, 134, 178, 193, 340, 765, 779, 821, 1370], "initialis": [70, 141, 193, 947], "inject": [40, 52, 340], "inlin": [24, 275, 340, 677, 685, 686, 689, 700, 701, 1259, 1267, 1268, 1271, 1282, 1283, 1360], "inner": [61, 79, 168, 244, 246, 309, 340, 377, 388, 434, 549, 569, 579, 633, 735, 810, 831, 875, 877, 914, 947, 984, 995, 1044, 1166, 1186, 1195, 1325, 1342, 1358, 1370], "inner_dtyp": [168, 171], "innermost": [168, 171], "innter": 983, "inprocessqueri": [852, 947], "input": [0, 52, 58, 99, 127, 129, 136, 139, 140, 200, 210, 229, 246, 249, 253, 262, 264, 269, 278, 279, 283, 286, 290, 303, 314, 315, 319, 340, 349, 410, 412, 416, 419, 486, 489, 501, 516, 574, 578, 579, 591, 620, 634, 635, 667, 673, 691, 702, 704, 710, 711, 712, 713, 715, 717, 729, 737, 745, 747, 749, 751, 754, 757, 758, 759, 760, 768, 775, 777, 785, 786, 791, 792, 793, 795, 797, 800, 809, 813, 815, 821, 827, 831, 843, 847, 859, 870, 877, 894, 898, 899, 902, 905, 910, 917, 918, 923, 947, 1029, 1103, 1130, 1191, 1192, 1195, 1214, 1222, 1223, 1246, 1250, 1273, 1286, 1297, 1299, 1342, 1364, 1365, 1367], "input_wildcard_expans": [136, 831], "insensit": [678, 686, 688, 690, 700, 701, 702, 953, 1259, 1260, 1268, 1270, 1271, 1272, 1282, 1283, 1284], "insensitive_match": [677, 689], "insert": [38, 139, 140, 145, 147, 149, 151, 153, 156, 157, 158, 235, 304, 306, 340, 662, 676, 692, 724, 831, 912, 947, 1242, 1258, 1274, 1306, 1342], "insert_aft": [40, 340], "insert_befor": [40, 340], "insert_chart": [40, 340], "insert_column": 340, "insid": [59, 578, 831, 853, 947], "inspect": [831, 947], "instal": [32, 33, 34, 103, 129, 139, 140, 142, 145, 147, 206, 299, 340, 437, 594, 756, 903, 947, 1047, 1324, 1342], "instanc": [37, 42, 46, 47, 48, 49, 50, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 169, 173, 183, 218, 223, 340, 591, 765, 779, 827, 843, 849, 881, 892, 920, 921, 947, 1108, 1342], "instanti": [33, 38, 40, 141, 171, 278, 296, 297, 314, 340, 898, 917, 947, 952, 1320, 1321, 1342], "instantli": [59, 853, 947], "instead": [37, 39, 44, 45, 52, 59, 61, 125, 126, 127, 130, 139, 140, 141, 144, 150, 151, 153, 158, 159, 166, 167, 168, 169, 173, 199, 200, 228, 241, 242, 245, 249, 255, 260, 262, 273, 274, 275, 278, 279, 280, 283, 297, 298, 299, 303, 315, 316, 340, 343, 344, 365, 384, 410, 411, 414, 415, 430, 444, 469, 486, 489, 499, 563, 593, 627, 634, 664, 676, 684, 695, 696, 709, 710, 711, 712, 713, 724, 737, 744, 751, 753, 755, 762, 770, 771, 773, 774, 775, 785, 786, 789, 790, 803, 806, 809, 810, 813, 818, 819, 822, 831, 846, 847, 853, 863, 876, 885, 898, 899, 900, 902, 910, 918, 919, 920, 922, 947, 953, 972, 991, 1000, 1016, 1020, 1021, 1041, 1054, 1062, 1063, 1083, 1103, 1122, 1180, 1216, 1222, 1241, 1243, 1246, 1255, 1258, 1266, 1277, 1278, 1291, 1292, 1293, 1306, 1323, 1324, 1342, 1347, 1351, 1352, 1356, 1370, 1371], "int": [10, 12, 13, 14, 17, 25, 26, 37, 38, 40, 42, 46, 47, 48, 49, 50, 54, 61, 68, 127, 130, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 183, 185, 200, 202, 208, 216, 219, 220, 224, 226, 228, 231, 232, 233, 235, 240, 242, 243, 245, 248, 249, 259, 260, 270, 272, 273, 276, 282, 283, 285, 288, 291, 296, 300, 303, 308, 311, 313, 316, 317, 323, 334, 340, 349, 372, 376, 384, 386, 389, 391, 392, 409, 410, 429, 433, 437, 462, 485, 487, 488, 492, 493, 494, 500, 502, 503, 505, 508, 509, 510, 532, 538, 540, 545, 546, 547, 548, 558, 563, 564, 566, 568, 569, 570, 572, 619, 621, 624, 625, 627, 630, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 671, 675, 685, 691, 693, 698, 699, 700, 704, 706, 707, 715, 718, 719, 724, 732, 736, 737, 743, 745, 751, 761, 763, 769, 772, 775, 781, 783, 785, 786, 789, 790, 802, 803, 806, 807, 808, 812, 813, 816, 817, 820, 822, 831, 847, 850, 857, 865, 866, 869, 872, 876, 880, 890, 902, 904, 907, 909, 910, 915, 916, 920, 921, 922, 927, 938, 947, 952, 953, 970, 971, 979, 983, 991, 993, 996, 998, 1015, 1016, 1027, 1028, 1034, 1040, 1043, 1044, 1047, 1076, 1101, 1102, 1104, 1105, 1109, 1110, 1111, 1116, 1117, 1123, 1124, 1125, 1127, 1144, 1148, 1149, 1155, 1157, 1162, 1163, 1164, 1165, 1175, 1180, 1181, 1183, 1185, 1186, 1187, 1189, 1201, 1202, 1204, 1205, 1208, 1210, 1211, 1214, 1215, 1216, 1218, 1224, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1249, 1254, 1257, 1267, 1273, 1275, 1280, 1281, 1282, 1286, 1288, 1289, 1297, 1300, 1301, 1306, 1313, 1314, 1320, 1327, 1332, 1342, 1354, 1357, 1370, 1373], "int16": [1, 55, 302, 340, 427, 428, 460, 731, 831, 953, 1038, 1039, 1074, 1313, 1320, 1342], "int32": [1, 40, 55, 60, 124, 127, 166, 168, 169, 230, 243, 272, 297, 340, 375, 376, 378, 397, 411, 440, 450, 451, 452, 453, 458, 481, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 735, 806, 831, 871, 896, 947, 952, 953, 979, 982, 983, 985, 1003, 1050, 1060, 1064, 1065, 1066, 1072, 1095, 1103, 1193, 1325, 1326, 1342], "int64": [1, 39, 40, 54, 55, 60, 61, 83, 101, 139, 148, 204, 214, 223, 230, 263, 272, 277, 278, 292, 299, 340, 370, 371, 373, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 427, 428, 470, 471, 472, 473, 474, 475, 476, 480, 486, 489, 578, 579, 605, 607, 609, 624, 632, 640, 643, 645, 647, 649, 651, 654, 656, 658, 693, 719, 731, 735, 751, 758, 777, 785, 786, 791, 806, 813, 827, 831, 854, 862, 871, 889, 896, 897, 898, 947, 953, 977, 978, 980, 981, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 1038, 1039, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1094, 1096, 1103, 1195, 1220, 1301, 1313, 1323, 1324, 1325, 1326, 1342], "int64arrai": [1317, 1342], "int8": [1, 55, 83, 223, 340, 388, 389, 427, 428, 445, 448, 454, 455, 461, 465, 478, 479, 569, 731, 803, 806, 822, 831, 952, 995, 996, 1038, 1039, 1043, 1055, 1058, 1068, 1069, 1075, 1079, 1092, 1093, 1186, 1225, 1313, 1323, 1330, 1342], "int_rang": [230, 308, 317, 326, 340, 751, 788, 809, 871, 881, 921, 930, 947], "integ": [37, 40, 47, 66, 67, 69, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 160, 167, 169, 172, 174, 213, 230, 272, 295, 298, 340, 353, 418, 465, 498, 499, 619, 625, 627, 632, 639, 640, 652, 691, 715, 719, 745, 751, 781, 785, 786, 806, 831, 861, 871, 896, 947, 953, 1026, 1079, 1115, 1214, 1216, 1220, 1227, 1234, 1241, 1273, 1297, 1301, 1323, 1342, 1364, 1370, 1373], "integer_list": 79, "integr": [40, 302, 340, 643, 645, 647, 649, 651, 654, 656, 658, 831, 1373], "intend": [1, 162, 163, 164, 165, 724, 1306], "intens": [249, 326, 340, 620, 831, 1195, 1342], "interact": [169, 173, 208, 340, 343, 857, 947, 1342, 1347], "interchang": [125, 197], "interest": [140, 466, 469, 1080, 1083], "interfac": [0, 114, 115, 124, 125, 191, 192, 196, 843, 956, 1370], "interfer": 951, "interleav": 1365, "intermedi": [236, 340, 874, 947, 1373], "intern": [42, 43, 48, 141, 160, 242, 292, 340, 499, 831, 947, 1317, 1342, 1352], "interoper": [195, 955], "interpol": [208, 266, 332, 340, 494, 515, 582, 628, 650, 651, 804, 831, 857, 891, 936, 947, 1042, 1129, 1217, 1233, 1342, 1359], "interpolate_bi": [831, 1342], "interpolationmethod": [514, 831, 1128, 1342], "interpret": [128, 130, 139, 140, 153, 340, 397, 947, 1003], "intersect": [40, 340, 560, 953, 1177, 1369], "interv": [230, 272, 310, 340, 430, 464, 477, 510, 516, 627, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 896, 947, 1041, 1055, 1057, 1058, 1064, 1066, 1068, 1069, 1072, 1074, 1075, 1078, 1082, 1091, 1092, 1125, 1130, 1216, 1342, 1359], "intoexpr": [136, 200, 229, 230, 272, 278, 279, 283, 286, 303, 314, 315, 319, 340, 355, 373, 393, 396, 399, 410, 437, 462, 486, 492, 502, 510, 512, 515, 516, 539, 559, 560, 561, 562, 620, 634, 635, 643, 645, 647, 649, 651, 654, 656, 658, 662, 664, 673, 678, 688, 690, 702, 705, 706, 707, 709, 710, 711, 712, 713, 729, 737, 747, 749, 754, 757, 758, 759, 760, 761, 763, 765, 768, 772, 779, 789, 795, 797, 800, 806, 809, 813, 815, 831, 847, 870, 871, 896, 898, 899, 902, 905, 910, 917, 918, 923, 947, 980, 999, 1002, 1005, 1047, 1103, 1109, 1127, 1129, 1130, 1156, 1222, 1223, 1242, 1246, 1272, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1342], "intoexprcolumn": [221, 235, 268, 340, 372, 376, 377, 384, 409, 410, 419, 464, 492, 495, 538, 546, 549, 558, 563, 621, 625, 661, 664, 685, 691, 694, 704, 715, 719, 724, 736, 737, 751, 756, 770, 771, 773, 774, 785, 786, 790, 818, 819, 821, 831, 867, 893, 902, 947, 979, 983, 984, 991, 1029, 1078, 1091, 1109, 1155, 1163, 1166, 1175, 1180, 1211, 1267, 1273, 1276, 1286, 1297, 1306, 1342], "introduc": [51, 92, 714, 716, 717, 1296, 1298, 1299], "introduct": 1369, "intuit": [499, 831, 953], "invalid": [37, 47, 115, 139, 140, 153, 201, 340, 411, 693, 694, 719, 738, 831, 947, 1000, 1016, 1275, 1276, 1301, 1342], "invalid_valu": 1000, "invalidoperationerror": [635, 831, 1223, 1342, 1368], "invari": [881, 947], "invers": [357, 358, 359, 360, 361, 362, 831, 964, 965, 966, 967, 968, 969, 1323, 1342, 1367], "invert": 953, "invok": [193, 578, 831], "involv": [221, 268, 340, 867, 893, 947], "io": [35, 37, 40, 42, 43, 46, 137, 139, 145, 146, 147, 148, 149, 152, 153, 155, 156, 157, 209, 280, 340, 432, 501, 593, 831, 858, 900, 947], "io_sourc": 134, "iobas": [44, 45, 148, 149, 209, 280, 340, 432, 593, 597, 831, 858, 900, 947], "ipc": [42, 43, 48, 145, 146, 147, 156, 159, 340, 843, 947], "ipccompress": [42, 43, 48, 340, 947], "is_between": [831, 1342], "is_dupl": [340, 831, 1342], "is_elementwis": [136, 578, 831], "is_empti": [340, 1342], "is_finit": [831, 1342], "is_first_distinct": [831, 1342], "is_in": [101, 221, 340, 831, 1342], "is_infinit": [831, 1342], "is_last_distinct": [831, 1342], "is_nan": [212, 340, 831, 860, 947, 1342], "is_not_nan": [831, 1342], "is_not_nul": [268, 340, 831, 893, 947, 1342], "is_nul": [213, 340, 831, 861, 947, 1342], "is_numer": 1373, "is_odd": [278, 340, 898, 947, 953], "is_selector": 953, "is_sort": 1342, "is_uniqu": [340, 831, 1342], "isn": 821, "iso": [450, 469, 478, 479, 1060, 1083, 1092, 1093, 1365], "iso8601": [139, 140, 153, 469, 1083], "iso_lang": 1365, "iso_year": 481, "isodow": 1366, "isoweek": 1366, "isoyear": 1366, "issu": [94, 95, 98, 99, 102, 109, 111, 122, 139, 140, 141, 153, 340, 427, 428, 731, 831, 1038, 1039, 1313, 1342, 1370], "ital": [40, 340], "item": [13, 60, 140, 228, 273, 276, 340, 372, 376, 377, 433, 491, 538, 540, 547, 549, 558, 661, 707, 831, 979, 983, 984, 1043, 1107, 1155, 1157, 1164, 1166, 1175, 1240, 1289, 1342], "iter": [52, 58, 59, 60, 70, 124, 127, 134, 136, 141, 172, 174, 200, 210, 221, 229, 230, 241, 242, 243, 246, 268, 272, 273, 274, 275, 278, 279, 286, 303, 304, 314, 315, 318, 319, 340, 410, 429, 437, 495, 620, 673, 729, 737, 747, 749, 754, 756, 757, 758, 759, 760, 768, 795, 797, 800, 809, 813, 815, 821, 827, 831, 847, 859, 867, 870, 871, 877, 893, 896, 898, 899, 905, 910, 917, 918, 923, 947, 952, 953, 1040, 1047, 1112, 1241, 1342, 1373], "iter_batch": 141, "iter_column": 340, "iter_row": [243, 273, 274, 275, 340], "iter_slic": 340, "its": [71, 131, 161, 216, 298, 340, 441, 464, 477, 486, 578, 638, 673, 728, 821, 831, 855, 862, 916, 947, 951, 1023, 1051, 1078, 1091, 1101, 1103, 1226, 1323, 1342, 1372], "itself": [167, 340, 343, 344, 579, 642, 644, 646, 648, 650, 652, 653, 655, 657, 807, 808, 831, 879, 947, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1342, 1347, 1351, 1352, 1370], "ix": [264, 340], "j": [304, 340, 1361], "jax": [297, 340, 1321, 1342], "jax_enable_x64": [297, 340], "jaxexporttyp": [297, 340], "jjk": 953, "jkl": [686, 1268], "jklmn": 1365, "job": [848, 947], "join": [47, 48, 49, 50, 51, 52, 58, 59, 60, 92, 221, 245, 246, 268, 309, 340, 495, 514, 620, 676, 810, 831, 852, 853, 863, 867, 876, 877, 890, 893, 903, 914, 919, 947, 1258, 1352, 1354, 1360, 1369, 1370], "join_asof": [244, 340, 875, 947], "join_wher": [340, 947], "joinstrategi": [52, 244, 340, 875, 947], "joinvalid": [244, 340, 875, 947], "jpy": 1373, "json": [2, 3, 5, 6, 44, 45, 135, 136, 148, 149, 155, 157, 186, 209, 280, 340, 432, 501, 593, 597, 693, 694, 726, 831, 843, 858, 900, 947, 1275, 1276, 1309], "json_path": [694, 1276], "json_path_match": [693, 1275], "json_stat": 5, "json_str": [148, 149], "json_val": [694, 1276], "jsonencod": 135, "jsonpath": [693, 694, 1275, 1276], "jst": [131, 953], "jul": [714, 1296, 1365], "juli": [1083, 1365, 1366], "just": [40, 129, 141, 153, 255, 307, 340, 885, 913, 947, 953], "k": [200, 275, 303, 304, 340, 409, 410, 424, 528, 736, 737, 831, 847, 910, 947, 1015, 1035, 1145, 1327, 1342], "k_2": [670, 831, 1253, 1342], "k_3": [670, 831, 1253, 1342], "kadokawa": [697, 1279], "kanji": 953, "karen": [264, 340], "kathmandu": [1053, 1054, 1081], "kb": [216, 340, 398, 1004, 1101, 1342], "kde": [1342, 1347], "keep": [52, 139, 140, 149, 153, 156, 157, 221, 305, 309, 310, 340, 501, 578, 596, 604, 634, 757, 831, 911, 914, 947, 1222, 1342], "kei": [37, 39, 40, 42, 46, 47, 48, 49, 50, 52, 57, 60, 143, 149, 151, 153, 154, 155, 156, 157, 158, 183, 198, 230, 242, 244, 245, 256, 262, 269, 271, 274, 275, 309, 340, 495, 579, 634, 635, 702, 770, 773, 813, 831, 871, 875, 876, 886, 892, 894, 895, 914, 947, 953, 957, 1222, 1223, 1284, 1342, 1358], "kept": [305, 340, 911, 947], "keyerror": 16, "keystrok": 827, "keyword": [39, 143, 151, 154, 169, 173, 183, 206, 229, 263, 273, 278, 279, 299, 314, 315, 319, 340, 495, 624, 729, 809, 813, 821, 831, 870, 889, 898, 899, 917, 918, 923, 947, 1324, 1342, 1355], "kl": 701, "kleen": [352, 354, 746, 747, 748, 749, 831, 960, 961, 1342], "klmnoopqrstuvwxyz": [243, 340], "knight": 1351, "know": [52, 141, 264, 307, 340, 570, 578, 831, 913, 947], "known": [145, 187, 389, 570, 930, 996, 1187], "kurtosi": [831, 1342], "kuzu_db_conn": 141, "kwarg": [31, 32, 36, 51, 62, 63, 65, 66, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 136, 138, 141, 142, 169, 171, 173, 186, 190, 206, 221, 263, 268, 299, 340, 343, 624, 831, 867, 889, 893, 922, 947, 1324, 1342, 1347, 1355, 1370], "k\u00f9zudb": 141, "l": [789, 790], "l1": 60, "l2": 60, "label": [230, 297, 302, 340, 343, 344, 430, 627, 641, 642, 644, 646, 648, 650, 653, 655, 657, 831, 871, 890, 947, 1041, 1216, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1342, 1347], "label_column": [302, 340], "labelangl": [340, 343, 1342, 1347], "lag": [283, 340, 384, 563, 664, 759, 831, 902, 947, 991, 1180, 1246, 1342], "lake": [39, 143, 154, 340, 843], "lambda": [153, 223, 249, 263, 264, 269, 326, 340, 389, 487, 488, 570, 578, 579, 604, 605, 765, 766, 779, 792, 793, 805, 831, 881, 889, 894, 930, 947, 996, 1104, 1105, 1187, 1195, 1342], "land": [437, 1047], "languag": [153, 230, 245, 272, 310, 340, 459, 464, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091, 1103, 1342], "larg": [10, 11, 14, 52, 141, 144, 150, 158], "large_str": [243, 292, 299, 340], "larger": [10, 47, 48, 49, 50, 58, 59, 499, 761, 831, 852, 947], "largest": [200, 303, 340, 410, 736, 737, 831, 847, 910, 947, 1327, 1342], "last": [39, 149, 153, 156, 157, 162, 163, 164, 165, 232, 245, 248, 264, 275, 286, 291, 298, 305, 334, 340, 365, 376, 385, 429, 445, 456, 460, 478, 500, 522, 547, 565, 568, 570, 603, 604, 606, 608, 610, 611, 620, 635, 672, 673, 691, 707, 715, 732, 754, 816, 827, 831, 876, 905, 909, 911, 938, 947, 953, 972, 983, 992, 1040, 1055, 1070, 1074, 1092, 1124, 1137, 1149, 1164, 1182, 1185, 1223, 1255, 1273, 1289, 1297, 1314, 1323, 1342, 1363, 1365], "last_column": [40, 340], "later": [245, 280, 340, 593, 876, 900, 947], "latest": [32, 125, 143, 154, 197, 462, 463, 591, 714, 717, 772, 1076, 1077, 1296, 1299], "latt": 953, "latter": [40, 125, 218, 340, 1108, 1342], "lazi": [1, 60, 139, 145, 149, 151, 153, 169, 245, 263, 264, 287, 340, 579, 781, 803, 806, 822, 831, 857, 875, 876, 919, 923, 924, 926, 928, 930, 931, 932, 933, 934, 935, 936, 937, 947, 953, 1351, 1352, 1353, 1354, 1355, 1357, 1370, 1373], "lazili": [139, 140, 145, 149, 151, 153, 154, 155, 156, 157, 158, 853, 947], "lazy_fram": [58, 59], "lazyfram": [0, 1, 52, 53, 54, 55, 56, 58, 59, 60, 134, 139, 145, 149, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 169, 183, 204, 209, 247, 263, 264, 280, 287, 340, 432, 495, 570, 593, 809, 810, 831, 843, 944, 945, 946, 952, 953, 1351, 1352, 1355, 1357, 1370, 1371, 1373], "lazyframeext": [892, 947], "lazygroupbi": [870, 871, 896, 947], "lbl": [297, 302, 340], "ldf": [1, 923, 924, 926, 928, 931, 932, 933, 934, 935, 936, 937], "ldot": [486, 831, 1103, 1342], "le": [682, 831, 1342], "lead": [14, 46, 131, 159, 253, 281, 283, 290, 340, 384, 502, 505, 563, 570, 578, 579, 663, 664, 709, 711, 761, 797, 815, 831, 881, 901, 902, 930, 947, 991, 1180, 1195, 1244, 1246, 1291, 1293, 1342], "leap": [449, 459, 1059, 1073], "leap_year": 449, "learn": [302, 340], "least": [60, 105, 264, 340, 406, 407, 621, 685, 687, 831, 1012, 1013, 1211, 1267, 1269, 1342, 1363], "leav": [6, 255, 307, 340, 570, 885, 913, 947], "left": [15, 16, 40, 52, 162, 163, 164, 165, 230, 244, 245, 272, 309, 340, 430, 485, 486, 487, 488, 514, 516, 627, 640, 643, 645, 647, 649, 651, 654, 656, 658, 662, 735, 757, 765, 766, 770, 771, 773, 774, 779, 789, 790, 805, 818, 819, 821, 831, 871, 875, 876, 896, 914, 947, 1041, 1102, 1103, 1104, 1105, 1130, 1216, 1242, 1325, 1342, 1354, 1358, 1363], "left_clos": [430, 627, 831, 1041, 1216, 1342], "left_on": [244, 245, 309, 340, 875, 876, 914, 947], "left_right": [244, 340, 875, 947], "leftmost": [662, 831, 1242, 1342, 1365], "len": [12, 169, 173, 204, 243, 264, 317, 321, 326, 340, 423, 579, 590, 592, 638, 762, 785, 789, 831, 854, 916, 921, 925, 930, 947, 952, 1034, 1226, 1342], "len_byt": [12, 415, 696, 697, 1021, 1278], "len_char": [414, 695, 1020, 1277], "length": [60, 61, 79, 136, 144, 150, 153, 167, 171, 228, 230, 272, 285, 340, 343, 414, 429, 464, 477, 564, 570, 591, 634, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 671, 691, 695, 696, 698, 699, 702, 704, 715, 724, 758, 789, 790, 803, 806, 807, 808, 822, 831, 871, 890, 896, 904, 947, 1020, 1027, 1040, 1051, 1078, 1091, 1181, 1187, 1208, 1222, 1223, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1254, 1273, 1277, 1278, 1280, 1281, 1284, 1286, 1297, 1306, 1342, 1359, 1360, 1363], "leq": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "less": [153, 245, 340, 499, 530, 577, 578, 707, 831, 876, 947, 1289, 1373], "letter": [217, 323, 334, 340, 489, 678, 686, 688, 690, 702, 722, 777, 831, 864, 927, 938, 947, 953, 1260, 1268, 1270, 1272, 1284, 1304, 1365], "level": [10, 40, 42, 43, 46, 48, 50, 135, 153, 156, 157, 158, 223, 249, 260, 287, 292, 340, 344, 495, 831, 843, 906, 947, 1317, 1342, 1370], "lexic": [64, 953, 1024], "lf": [47, 48, 49, 50, 55, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 925, 929, 947, 1359, 1370, 1373], "lf1": [810, 906, 947, 1355, 1357, 1371], "lf2": [810, 906, 947, 1355, 1357, 1371], "lf3": [947, 1355], "lf4": [947, 1355], "lf5": 947, "lf6": 947, "lf_other": [919, 947], "lib": [831, 1317, 1342], "librari": [1, 107, 136, 141, 144, 578, 831, 951, 1373], "life": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "lifetim": [193, 842, 1357], "light": [40, 340], "like": [35, 37, 39, 42, 43, 44, 45, 46, 59, 125, 136, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 209, 230, 237, 239, 244, 275, 280, 297, 298, 340, 343, 432, 438, 501, 542, 578, 596, 630, 685, 710, 711, 742, 827, 831, 848, 853, 858, 871, 947, 1048, 1159, 1218, 1267, 1331, 1342, 1347], "limit": [10, 11, 50, 141, 142, 175, 220, 340, 392, 494, 500, 831, 866, 947, 1111, 1342, 1360, 1369], "line": [10, 20, 40, 139, 140, 144, 153, 228, 237, 239, 340, 343, 685, 1267, 1342, 1347], "line_termin": [37, 47, 340, 947], "linear": [208, 236, 266, 332, 340, 514, 515, 537, 582, 628, 650, 651, 759, 760, 804, 831, 857, 874, 891, 936, 947, 1042, 1128, 1129, 1154, 1217, 1233, 1342], "linearli": 790, "lineitem": [133, 140, 142], "link": 951, "list": [1, 13, 33, 39, 40, 52, 53, 55, 58, 59, 61, 67, 83, 99, 124, 126, 127, 128, 130, 131, 133, 134, 137, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 167, 168, 169, 173, 180, 181, 182, 188, 205, 210, 214, 216, 217, 221, 227, 229, 230, 234, 242, 259, 262, 268, 272, 273, 274, 275, 278, 286, 293, 294, 302, 304, 305, 306, 308, 314, 319, 320, 340, 350, 377, 388, 389, 390, 430, 437, 491, 497, 502, 511, 520, 578, 579, 591, 592, 620, 627, 633, 636, 641, 642, 644, 646, 648, 650, 653, 655, 657, 672, 673, 684, 686, 688, 690, 705, 725, 727, 728, 735, 754, 756, 759, 770, 771, 773, 774, 776, 784, 786, 790, 791, 793, 811, 813, 819, 827, 831, 855, 862, 864, 867, 870, 871, 893, 898, 905, 911, 912, 917, 919, 923, 924, 947, 952, 953, 984, 995, 996, 997, 1027, 1041, 1047, 1101, 1107, 1116, 1119, 1125, 1126, 1135, 1195, 1216, 1224, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1260, 1266, 1268, 1270, 1272, 1284, 1287, 1322, 1325, 1342, 1351, 1356, 1360, 1362, 1372, 1373], "list_catalog": 191, "list_namespac": 191, "list_of_seri": 793, "list_tabl": 191, "listtostructwidthstrategi": [570, 1187], "lit": [1, 351, 393, 516, 587, 603, 689, 758, 759, 765, 779, 803, 806, 822, 831, 1111, 1342], "liter": [15, 16, 20, 37, 39, 41, 42, 46, 47, 48, 49, 50, 141, 143, 149, 151, 153, 154, 156, 157, 158, 172, 173, 174, 183, 186, 190, 259, 278, 279, 283, 309, 314, 315, 340, 351, 393, 412, 416, 419, 441, 462, 483, 484, 492, 499, 504, 506, 516, 530, 577, 587, 599, 601, 614, 615, 625, 634, 635, 677, 678, 679, 688, 689, 690, 700, 701, 702, 729, 730, 738, 747, 749, 751, 757, 758, 759, 760, 768, 769, 772, 785, 789, 791, 795, 797, 800, 809, 813, 815, 817, 831, 866, 898, 899, 902, 914, 917, 918, 947, 953, 999, 1029, 1051, 1076, 1099, 1109, 1130, 1207, 1222, 1223, 1241, 1243, 1246, 1259, 1260, 1261, 1270, 1271, 1272, 1282, 1283, 1284, 1342, 1365], "littl": [274, 340, 397, 1003], "lmn": 953, "ln": [485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342, 1363], "ln_a": 1364, "load": [3, 5, 6, 127, 129, 136, 141, 143, 144, 150, 154, 155, 172, 174, 340, 831, 843, 947, 1373], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 144, "load_tabl": 144, "load_workbook": 144, "loader": [302, 340], "lobster": [689, 1271], "loc": [340, 344], "local": [4, 39, 141, 143, 154, 155, 158, 340, 477, 622, 623, 831, 1019, 1023, 1053, 1054, 1078, 1081, 1091, 1212, 1213, 1342, 1352], "localhost": 141, "localis": [464, 477, 1091], "locat": [40, 151, 153, 156, 158, 218, 270, 300, 306, 340, 662, 831, 912, 947, 1108, 1116, 1241, 1242, 1342], "lock": 175, "log": [29, 54, 410, 482, 575, 601, 625, 737, 831, 1097, 1342, 1363], "log10": [831, 1342, 1363], "log10_a": 1364, "log16_a": 1364, "log1p": [831, 1342, 1363], "log1p_a": 1364, "log2": 1363, "logarithm": [573, 574, 575, 831, 1190, 1191, 1192, 1342, 1364], "logic": [60, 249, 326, 340, 343, 344, 352, 354, 432, 579, 735, 746, 747, 748, 749, 793, 831, 858, 863, 875, 892, 900, 930, 947, 960, 961, 1195, 1323, 1325, 1342, 1347], "london": [442, 446, 463, 1052, 1056, 1077], "london_timezon": [463, 1077], "london_to_amsterdam": [463, 1077], "long": [217, 255, 264, 307, 308, 340, 397, 864, 885, 913, 947, 1003], "longer": [139, 140, 153], "longest": 570, "look": [10, 230, 340, 393, 570, 871, 947, 999], "lookup": 827, "loop": [141, 579, 831], "lose": [439, 1049], "lossi": [139, 140, 153], "love": [678, 702, 1260, 1284], "low": [17, 141, 419, 627, 831, 1216, 1342], "low_memori": [139, 140, 149, 151, 153, 157, 158], "lower": [153, 208, 230, 266, 332, 340, 419, 516, 576, 604, 628, 632, 650, 651, 751, 770, 771, 773, 774, 789, 790, 804, 818, 819, 831, 857, 871, 891, 936, 947, 1029, 1042, 1130, 1193, 1217, 1220, 1233, 1330, 1342, 1360, 1363], "lower_bound": [230, 340, 419, 516, 831, 871, 947, 1029, 1130, 1330, 1342], "lowercas": [610, 720, 722, 1302, 1304, 1365], "lowest": [576, 831], "lru_cach": [249, 340, 579, 831, 1195, 1342], "lst": 168, "lt": [161, 495, 744, 831, 1342], "ltrim": 1363, "lyric": [678, 702, 1260, 1284], "lz4": [42, 43, 46, 48, 50, 340, 947], "lzo": [46, 50, 340, 947], "m": [67, 69, 244, 340, 438, 439, 441, 446, 447, 466, 468, 469, 480, 685, 714, 716, 717, 721, 772, 773, 774, 775, 781, 789, 875, 947, 953, 1048, 1049, 1051, 1056, 1057, 1080, 1082, 1083, 1094, 1267, 1296, 1298, 1299, 1303, 1355, 1365, 1366], "m_2": [670, 831, 1253, 1342], "m_3": [670, 831, 1253, 1342], "m_i": [670, 831, 1253, 1342], "machin": 1373, "maco": 161, "made": [40, 141, 340, 469, 1083], "mai": [1, 31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 60, 68, 70, 74, 124, 125, 126, 127, 128, 130, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 193, 208, 209, 216, 218, 230, 244, 245, 246, 249, 272, 280, 287, 297, 299, 302, 309, 310, 340, 343, 344, 414, 429, 430, 432, 437, 438, 439, 450, 459, 464, 466, 477, 489, 510, 545, 570, 578, 579, 590, 593, 627, 640, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 688, 690, 693, 695, 701, 756, 758, 765, 766, 770, 771, 773, 774, 779, 789, 790, 805, 818, 819, 831, 852, 853, 857, 858, 871, 875, 876, 877, 881, 896, 900, 906, 914, 920, 921, 930, 947, 1020, 1023, 1024, 1040, 1041, 1042, 1047, 1048, 1049, 1060, 1073, 1078, 1080, 1091, 1101, 1108, 1125, 1162, 1195, 1216, 1228, 1231, 1233, 1234, 1270, 1272, 1275, 1277, 1321, 1324, 1326, 1342, 1347, 1373], "main": [161, 853, 947], "maintain": [47, 48, 49, 50, 286, 340, 390, 571, 662, 673, 739, 754, 831, 857, 905, 947, 997, 1188, 1242, 1328, 1342], "maintain_ord": [47, 48, 49, 50, 229, 244, 262, 264, 286, 305, 310, 320, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 350, 390, 400, 405, 408, 410, 502, 505, 571, 579, 673, 737, 739, 754, 831, 853, 863, 870, 875, 890, 903, 905, 911, 924, 926, 928, 931, 932, 933, 934, 935, 936, 937, 947, 997, 1188, 1328, 1342], "maintainorderjoin": [244, 340, 875, 947], "major": [144, 297, 340], "make": [40, 60, 83, 124, 125, 129, 136, 139, 140, 143, 144, 145, 147, 151, 154, 256, 260, 267, 298, 310, 340, 343, 487, 488, 510, 610, 611, 620, 633, 706, 831, 886, 947, 1104, 1105, 1125, 1288, 1323, 1342], "man": [703, 1285], "manag": [51, 91, 92, 190, 842, 843, 1357, 1370], "managed_shallow_clon": 190, "mandatori": [40, 340], "mango": [412, 416, 682, 708, 1017, 1022, 1264, 1290], "mani": [141, 142, 158, 218, 340, 688, 690, 702, 1108, 1270, 1284, 1342, 1346], "manner": 141, "many_to_mani": [244, 340, 875, 947], "many_to_on": [244, 340, 875, 947], "map": [83, 126, 127, 139, 140, 141, 142, 145, 146, 151, 152, 153, 156, 169, 201, 204, 222, 242, 249, 269, 273, 274, 275, 277, 293, 340, 351, 464, 477, 578, 579, 603, 605, 606, 608, 610, 611, 634, 635, 702, 742, 792, 831, 849, 894, 897, 947, 952, 953, 1042, 1078, 1091, 1195, 1222, 1223, 1284, 1331, 1342, 1352, 1354, 1355, 1370], "map_": 111, "map_batch": [831, 947], "map_el": [102, 249, 340, 578, 745, 831, 1342], "map_field": [607, 609], "map_row": 340, "mapelementsstrategi": [579, 831], "mapping_strategi": [620, 831], "march": [466, 1080], "mariadb": 142, "mark": [40, 135, 340, 411, 831, 1016, 1342], "mark_area": [1342, 1347], "mark_attr": [340, 343, 1342, 1347], "mark_bar": [340, 343, 1342, 1347], "mark_lin": [340, 343], "mark_point": [340, 343], "markdown": [7, 20, 193], "marker": [40, 340], "mask": [158, 169, 173, 237, 239, 340, 394, 517, 519, 522, 527, 622, 623, 677, 680, 689, 831, 1000, 1112, 1130, 1131, 1134, 1137, 1143, 1212, 1213, 1243, 1259, 1262, 1271, 1333, 1342], "mass": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "massag": [255, 307, 340, 885, 913, 947], "match": [39, 40, 60, 67, 113, 124, 126, 127, 128, 130, 139, 141, 148, 149, 151, 157, 158, 162, 163, 164, 165, 201, 220, 221, 244, 245, 268, 273, 309, 340, 412, 416, 586, 587, 588, 634, 635, 652, 677, 678, 679, 682, 685, 686, 688, 689, 690, 693, 694, 700, 701, 702, 708, 714, 716, 717, 821, 827, 831, 849, 866, 875, 876, 893, 914, 947, 953, 1017, 1022, 1100, 1222, 1223, 1234, 1259, 1260, 1261, 1264, 1267, 1268, 1270, 1271, 1272, 1275, 1276, 1282, 1283, 1284, 1290, 1296, 1298, 1299, 1342, 1365], "matches_overlap": [688, 690, 1272], "matches_supertyp": [220, 340, 866, 947], "materi": [134, 139, 145, 149, 151, 249, 275, 326, 340, 852, 890, 930, 940, 947, 953, 1195, 1342], "materialis": [242, 243, 273, 274, 340], "materialized_view": 190, "math": [1, 10, 56, 264, 340, 431, 831, 1031, 1033, 1251, 1315, 1342, 1363, 1367, 1369], "mathemat": [738, 776, 831, 1363], "mathshortcut": [1, 56], "matplotlib": [161, 594, 890, 903, 947], "matter": [230, 242, 272, 274, 275, 294, 340, 640, 710, 711, 831, 871, 896, 947], "max": [25, 40, 46, 50, 135, 208, 220, 229, 251, 264, 272, 340, 344, 425, 494, 570, 578, 620, 630, 634, 635, 640, 642, 643, 663, 707, 758, 770, 773, 795, 811, 831, 857, 866, 870, 896, 947, 1036, 1042, 1111, 1187, 1218, 1229, 1244, 1289, 1342, 1351, 1360, 1363], "max_a": [272, 340, 640, 831, 896, 947], "max_binary_s": 141, "max_col": [167, 169], "max_colname_length": [228, 340], "max_color": [40, 340], "max_data_s": 173, "max_elem": 1360, "max_horizont": [340, 794], "max_items_per_column": [228, 340], "max_level": 135, "max_siz": [168, 169, 171, 173, 1373], "max_text_s": 141, "max_valu": 1373, "max_width": [570, 1187], "maxim": [327, 363, 831, 931, 970, 1342], "maximum": [10, 26, 37, 46, 47, 50, 68, 127, 130, 139, 140, 141, 144, 148, 149, 150, 153, 157, 159, 167, 168, 169, 171, 173, 228, 230, 250, 251, 340, 370, 415, 535, 580, 612, 622, 630, 691, 693, 696, 704, 715, 794, 795, 831, 871, 882, 947, 977, 1021, 1061, 1152, 1196, 1204, 1212, 1218, 1273, 1275, 1278, 1286, 1297, 1342, 1359], "mb": [216, 340, 398, 1101, 1342], "me": [678, 702, 722, 1260, 1284, 1304], "mean": [46, 50, 139, 140, 145, 151, 153, 156, 193, 208, 220, 229, 230, 245, 253, 264, 272, 310, 319, 340, 459, 464, 477, 491, 494, 499, 640, 643, 644, 645, 647, 649, 651, 654, 656, 658, 670, 676, 685, 692, 770, 771, 773, 774, 775, 797, 818, 819, 821, 831, 857, 866, 870, 871, 876, 881, 896, 923, 947, 1042, 1073, 1078, 1091, 1107, 1111, 1230, 1253, 1258, 1267, 1274, 1342, 1359, 1360], "mean_horizont": [340, 796], "measur": [255, 307, 340, 344, 885, 913, 947], "measure_a": [340, 344], "measure_b": [340, 344], "median": [208, 264, 340, 494, 646, 647, 831, 857, 919, 947, 1042, 1231, 1342, 1363], "mediat": 1370, "medium": [40, 340], "megan": [256, 340, 886, 947], "melt": [307, 340, 913, 947], "member": [230, 340, 871, 947, 1135, 1342], "membership": [372, 538, 979, 1155], "memori": [14, 46, 50, 58, 59, 60, 124, 125, 128, 129, 130, 139, 140, 141, 143, 144, 145, 149, 151, 153, 154, 156, 157, 158, 197, 218, 249, 274, 275, 284, 298, 326, 340, 620, 631, 665, 831, 852, 853, 863, 890, 903, 922, 947, 1108, 1195, 1219, 1247, 1248, 1323, 1342], "memory_map": [145, 151, 156], "memory_resourc": 922, "merg": [39, 244, 245, 256, 340, 875, 876, 886, 947], "merge_sort": [340, 947], "messi": [685, 687, 1267, 1269], "met": 821, "meta": [93, 432, 683, 831, 1265], "metadata": [0, 47, 48, 49, 50, 155, 179, 183, 843, 947], "metastor": 184, "method": [4, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 123, 125, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 166, 169, 173, 178, 184, 185, 187, 188, 193, 195, 204, 208, 209, 212, 213, 218, 225, 229, 236, 242, 249, 260, 266, 273, 274, 275, 283, 305, 314, 321, 326, 332, 340, 349, 352, 353, 384, 419, 432, 466, 469, 483, 484, 492, 499, 501, 504, 506, 514, 530, 563, 577, 579, 597, 599, 601, 603, 604, 606, 608, 610, 611, 614, 615, 616, 619, 625, 628, 630, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 664, 678, 688, 690, 702, 710, 711, 712, 713, 718, 724, 730, 738, 740, 745, 761, 793, 804, 823, 824, 826, 827, 831, 832, 833, 836, 837, 838, 839, 840, 843, 853, 857, 858, 860, 861, 874, 891, 902, 911, 917, 922, 925, 930, 936, 947, 952, 955, 962, 991, 1029, 1042, 1080, 1083, 1098, 1099, 1108, 1109, 1118, 1120, 1128, 1147, 1180, 1194, 1195, 1206, 1207, 1217, 1218, 1233, 1246, 1260, 1270, 1272, 1284, 1300, 1306, 1325, 1334, 1336, 1338, 1342, 1343, 1346, 1348, 1349, 1350, 1352, 1356], "metric": 141, "micro": [465, 1079], "microsecond": [67, 69, 230, 242, 245, 272, 274, 275, 294, 310, 340, 459, 462, 464, 469, 472, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 772, 773, 774, 775, 817, 818, 819, 831, 871, 876, 890, 896, 947, 953, 1073, 1076, 1078, 1086, 1091, 1103, 1342, 1366], "microsoft": [33, 40, 340], "mid_color": [40, 340], "midnight": 84, "midpoint": [208, 266, 332, 340, 628, 650, 651, 804, 831, 857, 891, 936, 947, 1042, 1217, 1233, 1342], "might": [139, 140, 153, 175, 244, 245, 264, 298, 307, 340, 579, 740, 831, 875, 876, 905, 913, 947], "millennia": 1366, "millennium": 1366, "milli": [465, 1079], "millisecond": [230, 245, 272, 310, 340, 448, 454, 459, 464, 473, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 773, 774, 775, 789, 818, 819, 831, 871, 876, 896, 947, 953, 1073, 1078, 1087, 1091, 1103, 1342, 1366], "milliseconds_diff": [472, 473, 475], "mimic": 759, "min": [40, 46, 50, 136, 208, 220, 258, 264, 272, 340, 426, 494, 579, 620, 630, 640, 648, 649, 770, 773, 800, 809, 831, 857, 866, 896, 947, 1037, 1042, 1111, 1218, 1232, 1342, 1360, 1363, 1366, 1373], "min_a": [272, 340, 640, 831, 896, 947], "min_col": [167, 169], "min_color": [40, 340], "min_elem": 1360, "min_horizont": [340, 799, 809], "min_sampl": [429, 485, 487, 488, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 807, 808, 831, 1040, 1102, 1104, 1105, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1342], "min_siz": [168, 169, 171, 173, 1373], "min_valu": 1373, "mincol": 167, "minim": [330, 364, 371, 536, 665, 673, 831, 934, 971, 978, 1153, 1199, 1247, 1342], "minimum": [46, 50, 167, 168, 169, 171, 173, 223, 257, 258, 340, 485, 487, 488, 598, 613, 623, 630, 799, 800, 831, 887, 947, 1067, 1102, 1104, 1105, 1205, 1213, 1218, 1342, 1359, 1373], "minu": [459, 616, 831, 1073], "minut": [230, 245, 272, 310, 340, 448, 451, 453, 458, 459, 462, 464, 465, 474, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 772, 773, 774, 775, 817, 818, 819, 831, 871, 876, 896, 947, 953, 1073, 1076, 1078, 1088, 1091, 1103, 1342, 1366], "minutes_diff": 474, "misc": 1357, "miscellan": 843, "mismatch": [60, 116, 149, 157, 162, 164], "miss": [60, 139, 140, 153, 219, 225, 340, 392, 485, 487, 488, 493, 500, 523, 524, 570, 831, 865, 947, 1102, 1104, 1105, 1110, 1342], "missing_utf8_is_empty_str": [139, 140, 153], "mix": [11, 245, 298, 340, 758, 810, 876, 906, 947, 953, 1042, 1342], "mixin": 1, "mlnm": 452, "mm": [40, 340], "mn": 1365, "mno": [16, 20], "mnop": 1365, "mo": 775, "mocha": 953, "mod": [831, 1363], "mode": [38, 39, 40, 41, 47, 48, 49, 50, 58, 59, 162, 164, 264, 287, 340, 686, 803, 806, 822, 831, 852, 863, 890, 903, 947, 1268, 1342, 1351, 1352, 1370], "model": [302, 340], "modifi": [139, 140, 153, 175, 193, 218, 234, 241, 242, 312, 340, 366, 463, 480, 677, 685, 686, 689, 700, 701, 720, 722, 723, 831, 962, 1077, 1094, 1108, 1259, 1267, 1268, 1271, 1282, 1283, 1302, 1304, 1305, 1342], "modul": [95, 103, 144, 830, 951, 953, 1373], "modulu": [599, 831], "moment": [46, 47, 48, 49, 50, 206, 340, 528, 670, 831, 852, 853, 863, 890, 903, 947, 1145, 1253, 1342], "mon": [340, 343, 1366], "mondai": [230, 340, 437, 477, 479, 756, 871, 947, 1047, 1091, 1093], "monkei": [698, 699, 1280, 1281], "month": [230, 245, 272, 310, 340, 445, 456, 457, 459, 462, 464, 466, 469, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 769, 770, 771, 772, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 1055, 1070, 1071, 1073, 1076, 1078, 1080, 1083, 1091, 1103, 1342, 1366], "month_nam": [466, 469], "monthbegin": [457, 1071], "monthend": [456, 1070], "moos": 953, "more": [20, 40, 46, 50, 52, 60, 91, 92, 121, 124, 125, 126, 127, 128, 129, 130, 134, 136, 141, 142, 143, 144, 148, 149, 150, 151, 154, 155, 157, 162, 164, 169, 193, 195, 206, 208, 212, 221, 241, 242, 249, 255, 260, 268, 273, 274, 276, 287, 297, 298, 302, 305, 307, 326, 340, 344, 353, 390, 414, 495, 499, 507, 528, 558, 571, 575, 578, 579, 619, 620, 661, 670, 686, 695, 714, 716, 717, 739, 750, 762, 778, 784, 787, 796, 798, 801, 802, 811, 821, 827, 831, 857, 860, 861, 867, 885, 892, 893, 906, 911, 913, 922, 947, 951, 953, 955, 997, 1020, 1023, 1042, 1121, 1122, 1145, 1175, 1188, 1195, 1240, 1253, 1268, 1277, 1296, 1298, 1299, 1321, 1323, 1328, 1342, 1357, 1358, 1368, 1371, 1372, 1373], "more_bi": [262, 286, 340, 673, 831, 905, 947], "more_column": [217, 306, 340, 489, 777, 831, 864, 912, 947, 953], "more_expr": [620, 754, 757, 758, 759, 760, 831], "more_nam": [725, 827], "most": [40, 124, 139, 140, 142, 153, 162, 163, 164, 165, 298, 340, 403, 404, 591, 600, 621, 635, 707, 831, 1009, 1010, 1200, 1211, 1223, 1289, 1323, 1342, 1354, 1370], "mostli": [292, 340, 495, 831], "move": [264, 275, 340, 437, 485, 486, 487, 488, 642, 644, 648, 655, 831, 1047, 1102, 1103, 1104, 1105, 1229, 1230, 1232, 1236, 1342], "mr": 922, "mssql": [38, 340], "much": [249, 308, 326, 340, 414, 415, 429, 545, 579, 695, 696, 793, 831, 930, 1020, 1021, 1040, 1162, 1195, 1277, 1278, 1342], "mul": 831, "multi": [8, 40, 139, 140, 302, 340, 489, 685, 831, 1267], "multi_fram": [40, 340], "multicolselector": 198, "multiindexselector": [198, 957], "multipl": [40, 58, 59, 60, 108, 139, 140, 144, 145, 149, 150, 151, 153, 156, 157, 158, 167, 169, 173, 210, 216, 218, 221, 229, 230, 234, 243, 246, 262, 264, 268, 275, 278, 286, 309, 314, 319, 340, 410, 545, 578, 584, 591, 600, 601, 620, 634, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 673, 725, 737, 754, 762, 779, 792, 794, 799, 805, 811, 814, 821, 827, 831, 843, 852, 853, 859, 863, 867, 870, 871, 877, 890, 893, 898, 903, 905, 914, 917, 923, 930, 947, 962, 992, 1101, 1108, 1162, 1182, 1200, 1222, 1224, 1255, 1342, 1355, 1360], "multipli": [578, 641, 642, 644, 646, 648, 650, 653, 655, 657, 729, 831, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1342], "multithread": [286, 340, 673, 754, 831, 905, 947, 992, 1182, 1255, 1342], "must": [33, 40, 70, 126, 134, 136, 139, 143, 151, 154, 155, 158, 159, 208, 217, 230, 245, 246, 256, 264, 272, 273, 340, 430, 570, 579, 594, 627, 634, 635, 640, 702, 758, 770, 771, 790, 821, 831, 857, 864, 871, 876, 877, 881, 886, 896, 903, 922, 947, 1041, 1042, 1216, 1222, 1223, 1284, 1342], "mutual": [273, 340], "my": [155, 159, 340, 343, 1342, 1347], "my_bucket": [892, 947], "my_column": 930, "my_column_": [304, 340], "my_column_0": [304, 340], "my_column_1": [304, 340], "my_column_2": [304, 340], "my_custom_aggreg": 793, "my_fil": 145, "my_holidai": [437, 756, 1047], "my_larger_than_ram_fil": [47, 48, 49, 50, 947], "my_long_fil": 153, "my_struct": 813, "mydf": 153, "myrol": 142, "mysql": 142, "n": [1, 12, 13, 17, 25, 26, 37, 45, 47, 53, 54, 55, 56, 67, 69, 133, 134, 139, 140, 144, 149, 153, 169, 202, 218, 224, 230, 232, 242, 243, 248, 249, 274, 275, 276, 283, 288, 291, 294, 296, 311, 323, 325, 334, 340, 356, 384, 389, 398, 400, 405, 408, 409, 410, 414, 415, 429, 433, 437, 439, 441, 447, 468, 480, 486, 492, 495, 503, 509, 532, 540, 546, 548, 558, 559, 563, 566, 568, 570, 572, 621, 624, 633, 653, 654, 657, 658, 661, 664, 670, 675, 691, 695, 696, 700, 701, 706, 707, 709, 710, 715, 717, 732, 736, 737, 738, 742, 743, 745, 763, 772, 773, 774, 775, 781, 783, 803, 806, 807, 808, 809, 812, 816, 820, 822, 831, 850, 869, 871, 872, 880, 902, 907, 909, 915, 927, 929, 938, 947, 953, 991, 996, 1004, 1015, 1020, 1021, 1028, 1040, 1043, 1047, 1049, 1051, 1057, 1082, 1094, 1103, 1108, 1109, 1117, 1124, 1149, 1157, 1163, 1165, 1175, 1176, 1180, 1185, 1187, 1211, 1235, 1237, 1240, 1246, 1253, 1257, 1273, 1277, 1278, 1282, 1283, 1288, 1289, 1297, 1299, 1314, 1320, 1327, 1331, 1332, 1342, 1354, 1355, 1362, 1365, 1366, 1368, 1370, 1373], "n0": [389, 570], "n00": [996, 1187], "n01": [996, 1187], "n02": [996, 1187], "n1": [389, 570], "n2": [1, 389], "n3": 1, "n_1": [495, 831], "n_2": [495, 831], "n_3": [495, 831], "n_bar": 1359, "n_bit": 1365, "n_byte": [398, 414, 415, 695, 696, 1365], "n_char": [414, 415, 695, 696, 1365], "n_chunk": [340, 962, 1108, 1219, 1342], "n_elem": 1360, "n_even": 953, "n_field_strategi": [570, 1187], "n_film": 1351, "n_foo_uniqu": 1359, "n_kilobyt": 398, "n_row": [134, 137, 139, 140, 145, 147, 149, 151, 153, 156, 157, 158, 243, 340, 947], "n_thread": [139, 140], "n_uniqu": [340, 356, 831, 1342], "na": [299, 340, 708, 1324, 1342], "naiv": [441, 442, 717, 1051, 1052, 1299], "name": [1, 18, 22, 24, 32, 35, 37, 38, 40, 41, 47, 53, 54, 55, 56, 71, 83, 100, 124, 126, 127, 128, 129, 130, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 165, 166, 167, 169, 172, 173, 174, 179, 181, 182, 183, 184, 185, 187, 188, 200, 201, 204, 205, 210, 211, 212, 213, 217, 221, 222, 225, 226, 228, 229, 240, 241, 242, 244, 245, 246, 249, 251, 253, 255, 256, 258, 262, 264, 268, 269, 273, 274, 275, 277, 278, 279, 286, 287, 290, 293, 295, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 314, 315, 316, 317, 318, 319, 325, 340, 344, 351, 389, 393, 394, 396, 399, 410, 419, 430, 466, 469, 489, 495, 516, 523, 524, 525, 526, 570, 579, 584, 588, 590, 592, 596, 620, 627, 637, 673, 686, 687, 700, 701, 702, 725, 727, 729, 737, 742, 746, 747, 748, 749, 750, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 777, 778, 783, 784, 787, 794, 795, 796, 797, 798, 799, 800, 801, 804, 807, 808, 809, 810, 812, 813, 814, 815, 816, 820, 821, 827, 831, 847, 849, 854, 855, 859, 860, 861, 864, 867, 870, 875, 876, 877, 885, 886, 893, 894, 897, 898, 899, 905, 906, 910, 911, 912, 913, 914, 917, 918, 919, 920, 921, 923, 929, 947, 952, 953, 959, 996, 1028, 1041, 1080, 1083, 1100, 1187, 1216, 1221, 1267, 1268, 1269, 1282, 1283, 1307, 1310, 1318, 1319, 1324, 1331, 1342, 1347, 1352, 1353, 1354, 1355, 1356, 1357, 1369, 1370, 1373], "name_gener": [304, 340], "named_agg": [319, 923], "named_bi": [229, 340, 870, 947], "named_expr": [278, 279, 314, 315, 340, 729, 809, 813, 898, 899, 917, 918, 947], "named_fram": [1355, 1370], "nameless": 129, "namespac": [1, 141, 179, 181, 182, 183, 187, 339, 340, 343, 725, 810, 830, 843, 945, 946, 951, 1342, 1347, 1373], "namespaceinfo": [181, 191], "nan": [129, 169, 197, 212, 219, 298, 299, 340, 435, 436, 483, 484, 493, 504, 506, 514, 523, 524, 525, 526, 530, 577, 580, 598, 612, 613, 614, 615, 641, 667, 738, 761, 831, 860, 865, 947, 965, 969, 1045, 1046, 1110, 1138, 1139, 1204, 1205, 1228, 1250, 1323, 1324, 1342, 1373], "nan_as_nul": 197, "nan_max": [831, 1342], "nan_min": [831, 1342], "nan_to_nul": [129, 340, 947, 1342], "nana": 1365, "nanmax": [612, 613, 831, 1204, 1205, 1342], "nanosecond": [84, 230, 245, 272, 310, 340, 459, 464, 465, 475, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1079, 1089, 1091, 1103, 1342, 1366], "nansum": [641, 831, 1228, 1342], "nativ": [10, 38, 139, 141, 144, 145, 147, 151, 189, 242, 249, 274, 275, 294, 298, 326, 340, 579, 793, 810, 831, 837, 906, 930, 947, 951, 1195, 1323, 1342, 1346, 1370, 1373], "natur": [575, 831, 1192, 1342, 1358, 1364], "ndarrai": [128, 195, 221, 268, 298, 340, 502, 662, 831, 867, 893, 947, 955, 1116, 1241, 1242, 1323, 1342], "ndjson": [49, 149, 947], "ne": [615, 831, 1207, 1342], "ne_miss": [221, 268, 340, 831, 867, 893, 947, 1099, 1342], "nearest": [54, 208, 245, 266, 332, 340, 418, 498, 514, 628, 650, 651, 804, 831, 857, 876, 891, 936, 947, 1026, 1042, 1115, 1128, 1217, 1233, 1342, 1364], "nearest_pow2": 54, "necessari": [37, 38, 47, 51, 92, 144, 298, 340, 947, 1323, 1342], "need": [60, 94, 103, 131, 139, 140, 142, 151, 153, 156, 158, 193, 230, 272, 275, 284, 340, 343, 570, 640, 665, 700, 701, 702, 718, 775, 803, 806, 822, 831, 871, 896, 947, 1247, 1282, 1283, 1284, 1300, 1342, 1347, 1373], "neg": [13, 66, 67, 68, 69, 139, 140, 145, 147, 151, 160, 232, 248, 272, 283, 285, 291, 317, 340, 384, 563, 564, 624, 625, 640, 664, 671, 691, 704, 715, 831, 896, 902, 904, 920, 921, 947, 953, 991, 1124, 1149, 1180, 1181, 1214, 1246, 1254, 1273, 1286, 1297, 1314, 1342], "negat": [617, 831, 1209, 1342], "neither": [131, 144, 150, 276, 340, 389, 570, 996, 1187], "nest": [51, 131, 135, 170, 171, 216, 340, 843, 1101, 1342, 1370, 1373], "nesting_level": 170, "net": [686, 1268], "netherland": [245, 340, 876, 947], "netsuite_format": 186, "never": [37, 47, 141, 244, 245, 273, 340, 875, 876, 947], "new": [38, 39, 40, 41, 153, 193, 198, 224, 234, 235, 249, 260, 261, 264, 269, 304, 306, 308, 309, 314, 315, 340, 351, 441, 491, 501, 503, 514, 604, 605, 620, 634, 635, 639, 697, 700, 701, 706, 707, 725, 727, 827, 831, 843, 869, 894, 912, 914, 917, 918, 930, 947, 957, 959, 1051, 1107, 1117, 1208, 1221, 1222, 1223, 1227, 1282, 1283, 1288, 1289, 1307, 1310, 1319, 1342, 1370, 1372], "new_column": [139, 140, 144, 153], "new_dai": 462, "new_dat": 459, "new_df": [309, 340, 914, 947], "new_fil": [35, 37, 42, 43, 46, 340], "new_from_index": 1342, "new_id": [304, 340], "new_lf": [914, 947], "new_tabl": 1372, "new_valu": [765, 766, 779, 805], "new_york": 773, "newli": 52, "newlin": [45, 139, 149, 153, 157, 340], "next": [18, 54, 230, 245, 272, 310, 340, 392, 437, 459, 464, 477, 630, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1047, 1073, 1078, 1091, 1218, 1342], "next_batch": 140, "next_pow2": 54, "nfc": [697, 1279, 1365], "nfd": [697, 1279, 1365], "nfkc": [697, 1279, 1365], "nfkd": [697, 1279, 1365], "nfruit": 715, "nl": [437, 756, 1047], "nnel_id": 131, "no1": 953, "no_default": [225, 340, 634, 635, 702, 831, 1222, 1223, 1284, 1342], "no_optim": [47, 48, 49, 50, 58, 59, 852, 853, 881, 890, 947], "nodataerror": [139, 140, 144, 150, 153], "nodd": [685, 1267], "node": [848, 852, 873, 881, 885, 890, 894, 947], "nodefault": [225, 340, 634, 635, 702, 831, 1222, 1223, 1284, 1342], "non": [4, 5, 37, 39, 40, 47, 52, 67, 68, 129, 136, 160, 200, 207, 243, 255, 272, 278, 279, 283, 303, 304, 307, 309, 314, 315, 340, 392, 409, 410, 414, 419, 423, 424, 437, 463, 500, 516, 570, 578, 579, 585, 620, 621, 634, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 679, 686, 695, 700, 701, 702, 722, 724, 729, 736, 737, 747, 749, 757, 758, 759, 760, 762, 764, 768, 775, 795, 797, 800, 807, 808, 809, 813, 815, 831, 847, 856, 885, 896, 898, 899, 902, 910, 913, 914, 917, 918, 947, 953, 1015, 1020, 1029, 1034, 1035, 1042, 1047, 1077, 1130, 1187, 1195, 1211, 1222, 1223, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1246, 1261, 1268, 1277, 1282, 1283, 1304, 1306, 1323, 1327, 1342, 1362, 1370], "non_exist": [463, 1077], "non_numer": [37, 47, 340, 947], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 61, 64, 67, 68, 69, 70, 71, 79, 83, 92, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 183, 184, 185, 187, 188, 189, 193, 195, 196, 202, 207, 208, 212, 213, 219, 220, 221, 223, 225, 228, 230, 231, 236, 240, 244, 245, 247, 249, 252, 255, 260, 261, 264, 268, 272, 273, 276, 280, 283, 285, 286, 292, 293, 295, 297, 298, 299, 302, 304, 305, 306, 307, 308, 309, 310, 321, 325, 340, 352, 354, 355, 367, 368, 369, 376, 377, 389, 392, 412, 414, 415, 416, 419, 423, 424, 425, 428, 430, 435, 436, 444, 459, 462, 463, 469, 484, 485, 486, 487, 488, 489, 492, 493, 494, 500, 507, 508, 510, 512, 514, 515, 516, 523, 524, 525, 526, 531, 533, 534, 541, 547, 549, 551, 558, 559, 560, 561, 562, 564, 570, 578, 579, 590, 593, 594, 595, 597, 602, 615, 616, 617, 618, 620, 621, 627, 630, 631, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 664, 665, 666, 667, 671, 672, 676, 677, 679, 681, 682, 683, 686, 689, 691, 692, 693, 694, 695, 696, 698, 699, 704, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 719, 721, 724, 725, 726, 727, 728, 735, 742, 747, 748, 749, 751, 757, 758, 759, 760, 761, 762, 764, 768, 770, 771, 772, 773, 774, 775, 777, 778, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 800, 806, 807, 808, 813, 815, 817, 818, 819, 821, 831, 850, 851, 853, 856, 857, 860, 861, 863, 865, 866, 867, 871, 874, 875, 876, 879, 881, 885, 888, 892, 893, 896, 900, 902, 903, 904, 905, 911, 912, 913, 914, 919, 922, 925, 929, 930, 939, 940, 947, 952, 953, 955, 956, 960, 961, 963, 970, 971, 975, 976, 983, 984, 996, 1006, 1011, 1014, 1017, 1020, 1021, 1022, 1028, 1029, 1034, 1035, 1041, 1042, 1044, 1045, 1046, 1054, 1061, 1062, 1063, 1067, 1076, 1077, 1083, 1097, 1099, 1102, 1103, 1104, 1105, 1109, 1110, 1111, 1113, 1121, 1123, 1125, 1127, 1128, 1129, 1130, 1135, 1140, 1141, 1144, 1145, 1146, 1148, 1150, 1151, 1154, 1158, 1164, 1166, 1168, 1175, 1176, 1177, 1178, 1179, 1181, 1187, 1195, 1196, 1197, 1198, 1199, 1207, 1210, 1216, 1217, 1218, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1246, 1249, 1250, 1253, 1254, 1257, 1258, 1259, 1261, 1263, 1264, 1265, 1268, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1296, 1297, 1298, 1299, 1301, 1303, 1306, 1309, 1317, 1319, 1320, 1321, 1323, 1324, 1325, 1331, 1332, 1342, 1351, 1353, 1354, 1355, 1357, 1360, 1362, 1366, 1370], "nonexist": [463, 1077], "nor": [144, 150, 276, 340], "normal": [39, 135, 230, 340, 482, 528, 670, 742, 831, 871, 947, 1097, 1145, 1253, 1331, 1342, 1363], "normalised_scor": 141, "norowsreturnederror": [273, 340], "north": 70, "not_": [314, 340, 831, 917, 947, 953, 1342], "not_c": [314, 340, 917, 947], "notabl": 141, "notat": [11, 40, 340], "note": [4, 10, 20, 39, 40, 46, 51, 52, 59, 60, 66, 67, 69, 84, 91, 92, 124, 125, 126, 128, 130, 131, 135, 139, 141, 142, 143, 144, 148, 149, 150, 153, 154, 155, 157, 159, 162, 164, 167, 169, 173, 175, 193, 197, 204, 206, 208, 209, 212, 216, 219, 221, 230, 231, 240, 241, 242, 244, 245, 249, 256, 260, 263, 264, 268, 269, 272, 273, 274, 275, 280, 283, 287, 294, 297, 299, 302, 304, 305, 307, 309, 310, 314, 316, 317, 340, 384, 397, 412, 414, 415, 416, 419, 427, 428, 432, 435, 436, 442, 456, 457, 459, 464, 469, 477, 486, 493, 499, 501, 508, 516, 523, 524, 542, 545, 563, 570, 579, 593, 594, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 634, 635, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 664, 666, 670, 676, 677, 678, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 700, 701, 702, 704, 709, 710, 711, 714, 715, 722, 724, 725, 731, 738, 747, 749, 756, 765, 770, 771, 773, 774, 775, 779, 789, 791, 803, 805, 806, 810, 818, 819, 821, 822, 827, 831, 842, 853, 857, 858, 860, 865, 867, 871, 876, 886, 893, 894, 896, 900, 902, 903, 905, 906, 911, 913, 914, 917, 920, 921, 947, 951, 953, 991, 1003, 1020, 1021, 1029, 1038, 1039, 1042, 1045, 1046, 1052, 1070, 1071, 1073, 1078, 1083, 1091, 1101, 1103, 1110, 1123, 1130, 1159, 1162, 1180, 1195, 1222, 1223, 1227, 1234, 1241, 1243, 1246, 1248, 1253, 1258, 1259, 1260, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1277, 1278, 1282, 1283, 1284, 1286, 1291, 1292, 1293, 1296, 1297, 1304, 1306, 1313, 1324, 1326, 1342, 1351, 1352, 1356, 1357, 1368, 1370], "noth": [20, 685, 694, 1267, 1276], "notic": [141, 221, 340, 867, 947, 1342], "notimplementederror": 197, "now": [52, 144, 272, 298, 340, 587, 896, 947, 1323, 1342], "np": [128, 195, 221, 268, 298, 340, 502, 578, 662, 831, 867, 893, 947, 955, 1116, 1133, 1136, 1138, 1139, 1241, 1242, 1342], "npt": [195, 955], "nr": [323, 334, 927, 938], "nth": [224, 340, 503, 707, 827, 831, 869, 947, 1117, 1289, 1342], "nthe": [685, 1267], "nthose": [685, 1267], "nu": 682, "null": [16, 37, 39, 46, 47, 50, 52, 60, 67, 126, 127, 130, 135, 139, 140, 149, 151, 153, 157, 158, 159, 166, 169, 173, 197, 200, 201, 202, 207, 208, 212, 213, 215, 220, 221, 223, 236, 244, 252, 253, 254, 261, 264, 266, 268, 283, 286, 288, 289, 290, 293, 298, 299, 303, 306, 309, 311, 314, 321, 340, 352, 354, 355, 365, 368, 369, 376, 377, 384, 385, 392, 394, 397, 409, 410, 411, 412, 414, 415, 416, 419, 423, 424, 425, 428, 433, 435, 436, 459, 462, 463, 470, 471, 472, 473, 474, 475, 476, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 500, 507, 512, 514, 515, 520, 523, 524, 525, 526, 531, 533, 534, 540, 541, 544, 545, 547, 549, 550, 551, 559, 560, 561, 562, 563, 565, 570, 578, 579, 602, 615, 616, 617, 618, 620, 621, 631, 635, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 664, 665, 667, 672, 673, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 693, 694, 695, 696, 698, 699, 704, 706, 707, 708, 714, 715, 717, 719, 724, 725, 726, 727, 728, 735, 736, 737, 746, 747, 748, 749, 754, 757, 758, 759, 760, 762, 764, 768, 772, 777, 788, 791, 795, 797, 800, 807, 808, 813, 815, 821, 831, 847, 850, 856, 857, 860, 861, 866, 867, 874, 875, 888, 893, 902, 905, 910, 912, 914, 917, 919, 925, 947, 953, 960, 961, 972, 975, 976, 983, 984, 991, 992, 1000, 1003, 1015, 1016, 1017, 1020, 1021, 1022, 1028, 1029, 1034, 1035, 1043, 1045, 1046, 1076, 1077, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099, 1100, 1102, 1103, 1104, 1105, 1109, 1111, 1112, 1121, 1122, 1127, 1128, 1129, 1135, 1140, 1141, 1142, 1148, 1150, 1151, 1154, 1157, 1158, 1161, 1162, 1164, 1166, 1167, 1168, 1177, 1179, 1180, 1182, 1187, 1195, 1207, 1210, 1211, 1223, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1250, 1255, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1286, 1288, 1289, 1290, 1296, 1297, 1299, 1301, 1306, 1309, 1320, 1323, 1324, 1325, 1327, 1342, 1354, 1358, 1360, 1362, 1366, 1368, 1370, 1371, 1373], "null_behavior": [433, 540, 831, 1043, 1157, 1342], "null_count": [46, 50, 208, 213, 340, 429, 831, 857, 947, 1040, 1042, 1342], "null_equ": [215, 340, 1100, 1342], "null_on_oob": [376, 545, 547, 983, 1162, 1164], "null_prob": [166, 169, 173], "null_valu": [37, 47, 139, 140, 153, 340, 947], "nullabl": [39, 340], "nullbehavior": [433, 540, 831, 1043, 1157, 1342], "nullif": 1363, "nulls_equ": [244, 340, 520, 831, 875, 947, 1135, 1342], "nulls_last": [286, 340, 365, 385, 565, 620, 672, 673, 754, 831, 905, 947, 972, 992, 1142, 1182, 1255, 1342], "num": [13, 40, 301, 340, 516, 831, 1130, 1342], "num_row": 197, "num_sampl": [789, 790], "number": [10, 11, 12, 13, 14, 17, 25, 37, 38, 40, 42, 46, 47, 48, 49, 50, 51, 52, 66, 67, 68, 84, 92, 113, 124, 126, 127, 128, 130, 133, 135, 139, 140, 141, 142, 144, 148, 149, 150, 151, 153, 156, 157, 158, 160, 167, 169, 172, 174, 175, 176, 183, 200, 202, 207, 216, 217, 219, 220, 228, 232, 233, 242, 243, 248, 259, 260, 272, 276, 283, 288, 291, 303, 308, 311, 313, 321, 323, 325, 334, 340, 366, 382, 384, 389, 392, 401, 402, 403, 404, 406, 407, 409, 410, 415, 423, 429, 430, 433, 437, 440, 448, 450, 452, 454, 455, 465, 478, 479, 481, 485, 486, 487, 488, 492, 493, 494, 500, 509, 523, 524, 531, 532, 540, 548, 551, 556, 558, 563, 566, 568, 570, 572, 620, 624, 627, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 675, 691, 693, 695, 696, 700, 704, 706, 707, 715, 718, 732, 736, 737, 743, 756, 761, 762, 763, 775, 783, 788, 789, 790, 807, 808, 812, 816, 820, 831, 847, 850, 856, 864, 865, 866, 872, 880, 890, 902, 907, 909, 910, 915, 916, 925, 927, 929, 938, 947, 952, 989, 991, 996, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1021, 1028, 1034, 1040, 1041, 1043, 1047, 1050, 1058, 1060, 1065, 1068, 1069, 1079, 1092, 1093, 1095, 1101, 1102, 1103, 1104, 1105, 1109, 1110, 1111, 1124, 1148, 1149, 1157, 1165, 1168, 1173, 1175, 1180, 1185, 1187, 1201, 1202, 1216, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1246, 1249, 1257, 1273, 1275, 1277, 1278, 1282, 1286, 1288, 1289, 1297, 1300, 1314, 1327, 1332, 1342, 1358, 1361, 1364, 1373], "number_of_two": [373, 539], "numbers_decim": 718, "numer": [10, 16, 37, 40, 47, 143, 154, 201, 210, 245, 298, 299, 307, 308, 340, 349, 397, 411, 419, 499, 516, 575, 599, 601, 625, 633, 665, 667, 687, 724, 730, 738, 789, 831, 843, 849, 859, 876, 913, 947, 953, 1003, 1016, 1029, 1042, 1130, 1247, 1250, 1269, 1306, 1323, 1342, 1364, 1373], "numeric_dtyp": 1373, "numericliter": [419, 789, 790, 831, 1029, 1342], "numpi": [98, 128, 161, 195, 206, 242, 274, 275, 294, 298, 299, 340, 578, 612, 613, 641, 831, 947, 955, 1133, 1136, 1138, 1139, 1204, 1205, 1228, 1323, 1324, 1342], "nworld": 709, "o": [145, 156, 398, 409, 410, 429, 684, 736, 737, 831, 1004, 1015, 1040, 1266, 1291, 1327, 1342, 1355], "oauth": 155, "obj": 953, "object": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 60, 83, 101, 124, 125, 126, 131, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 167, 169, 170, 196, 197, 204, 209, 216, 229, 230, 245, 247, 262, 272, 275, 280, 287, 297, 298, 299, 340, 432, 593, 770, 771, 773, 774, 791, 810, 818, 819, 831, 843, 852, 858, 863, 871, 876, 879, 890, 896, 903, 906, 944, 947, 953, 956, 1101, 1317, 1342, 1352, 1354, 1357, 1370, 1372], "observ": [244, 340, 430, 485, 486, 487, 488, 627, 831, 875, 947, 1041, 1102, 1103, 1104, 1105, 1216, 1342], "obtain": 570, "obvious": 727, "occur": [40, 58, 59, 99, 108, 114, 246, 340, 373, 539, 600, 630, 831, 852, 853, 863, 877, 890, 903, 947, 980, 1156, 1200, 1218, 1323, 1342], "occurr": [510, 512, 519, 522, 742, 831, 1125, 1127, 1134, 1137, 1331, 1342], "oct": 1365, "octet_length": 1363, "octob": [469, 1083, 1365], "od": [150, 843], "odbc": [38, 141, 340], "odd": 685, "odi": [688, 690, 1272], "off": [47, 48, 49, 50, 58, 59, 139, 140, 153, 244, 245, 340, 437, 756, 852, 853, 863, 875, 876, 881, 890, 903, 947, 1047], "offer": [263, 340, 624, 831, 889, 947, 1366, 1370], "offic": [40, 340], "offset": [69, 139, 140, 145, 147, 149, 151, 153, 156, 157, 158, 224, 230, 272, 285, 316, 317, 340, 437, 438, 446, 456, 457, 459, 464, 477, 503, 546, 564, 640, 671, 689, 690, 704, 717, 831, 869, 871, 896, 904, 920, 921, 947, 1047, 1048, 1056, 1070, 1071, 1073, 1078, 1091, 1117, 1163, 1181, 1254, 1271, 1272, 1286, 1299, 1342, 1369], "offset_bi": 775, "often": [142, 193, 230, 272, 340, 373, 539, 633, 640, 831, 871, 896, 947, 980, 1156, 1357, 1370], "ok": 570, "old": [39, 47, 48, 49, 50, 269, 340, 634, 635, 831, 894, 947, 1222, 1223, 1342], "old_tabl": 1372, "older": [46, 50, 340, 947], "oldw": 710, "omit": [27, 127, 131, 144, 150, 167, 193, 260, 275, 297, 302, 340, 770, 773, 785, 786, 818, 819, 953, 1371, 1372], "onc": [139, 140, 175, 249, 274, 276, 319, 340, 558, 578, 579, 661, 712, 713, 831, 848, 923, 947, 1175, 1195, 1240, 1294, 1295, 1342, 1355], "one": [20, 37, 38, 40, 47, 52, 60, 105, 124, 126, 127, 128, 129, 130, 139, 140, 144, 148, 149, 150, 153, 157, 172, 174, 193, 201, 209, 212, 220, 228, 229, 230, 242, 246, 247, 255, 264, 272, 273, 274, 280, 283, 298, 301, 307, 320, 340, 350, 384, 430, 432, 494, 495, 499, 502, 505, 507, 563, 570, 575, 593, 603, 604, 606, 608, 610, 611, 620, 639, 640, 664, 672, 685, 686, 687, 702, 725, 770, 773, 793, 811, 821, 827, 831, 849, 858, 860, 861, 866, 867, 870, 871, 877, 885, 892, 896, 900, 902, 913, 919, 924, 947, 962, 991, 996, 1041, 1111, 1121, 1122, 1180, 1187, 1192, 1216, 1227, 1246, 1267, 1268, 1269, 1284, 1307, 1323, 1342, 1357, 1358, 1360, 1364, 1365, 1372], "one_to_mani": [244, 340, 875, 947], "one_to_on": [244, 340, 875, 947], "oneormoredatatyp": [40, 167, 340], "ones": [643, 645, 647, 649, 651, 654, 656, 658, 831, 953], "onf": [704, 1286], "onli": [1, 5, 10, 13, 20, 30, 37, 38, 40, 47, 51, 52, 57, 60, 92, 125, 134, 136, 139, 140, 141, 144, 145, 147, 149, 151, 153, 156, 157, 158, 159, 162, 163, 164, 165, 169, 173, 183, 193, 212, 213, 216, 218, 221, 230, 231, 242, 245, 246, 249, 264, 272, 274, 275, 294, 296, 297, 298, 309, 310, 326, 340, 350, 352, 354, 366, 418, 419, 432, 437, 459, 467, 469, 489, 498, 508, 578, 579, 586, 587, 603, 604, 605, 606, 607, 608, 609, 610, 611, 620, 632, 678, 688, 690, 702, 740, 756, 793, 831, 855, 858, 860, 861, 862, 871, 876, 877, 896, 897, 914, 916, 930, 947, 953, 960, 961, 962, 1026, 1029, 1047, 1073, 1083, 1101, 1108, 1115, 1123, 1195, 1220, 1260, 1270, 1272, 1284, 1317, 1320, 1323, 1342, 1351, 1354, 1370, 1371, 1373], "onlin": [218, 340, 1108, 1342], "ont": [688, 690, 1270, 1272], "onto": 169, "oof": [703, 1285, 1360, 1365], "op": [20, 139, 140, 173, 269, 340, 586, 633, 831, 879, 894, 947, 1342], "opac": [340, 343, 1342, 1347], "opaqu": 930, "open": [40, 137, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 209, 340, 432, 831, 858, 947], "openoffic": 150, "openpyxl": [144, 161], "oper": [4, 40, 51, 60, 92, 101, 104, 111, 118, 124, 126, 127, 128, 129, 130, 136, 141, 203, 218, 221, 223, 229, 235, 247, 249, 256, 260, 262, 263, 264, 267, 268, 270, 272, 275, 276, 281, 283, 292, 298, 299, 304, 307, 308, 318, 319, 340, 349, 350, 353, 384, 424, 425, 426, 427, 428, 429, 483, 484, 499, 501, 504, 506, 530, 558, 559, 560, 561, 562, 563, 570, 577, 596, 599, 601, 602, 603, 604, 606, 608, 610, 611, 614, 615, 616, 619, 620, 625, 632, 661, 664, 730, 738, 745, 746, 748, 759, 760, 764, 776, 810, 821, 831, 843, 851, 855, 857, 862, 867, 870, 875, 885, 886, 893, 897, 901, 902, 906, 913, 916, 923, 947, 991, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1098, 1099, 1108, 1118, 1120, 1147, 1175, 1176, 1177, 1178, 1179, 1180, 1194, 1206, 1207, 1220, 1240, 1246, 1282, 1317, 1322, 1323, 1324, 1342, 1361, 1369, 1370], "operand": [738, 831], "opp": 953, "oppos": 756, "opposit": [283, 340, 384, 563, 664, 831, 902, 947, 991, 1180, 1246, 1342], "opt": [302, 340], "optim": [47, 48, 49, 50, 58, 59, 139, 145, 149, 151, 153, 156, 157, 158, 242, 247, 263, 267, 274, 305, 340, 848, 852, 853, 863, 881, 890, 903, 911, 920, 921, 930, 947, 1025, 1241, 1342], "optimis": [141, 249, 275, 326, 340, 947, 951, 1195, 1243, 1342, 1373], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 33, 37, 38, 39, 40, 42, 46, 47, 48, 49, 50, 52, 68, 70, 139, 141, 142, 143, 144, 145, 147, 149, 151, 153, 154, 155, 156, 157, 158, 159, 161, 166, 167, 168, 169, 172, 173, 174, 183, 184, 209, 225, 230, 240, 245, 255, 280, 287, 293, 304, 307, 309, 340, 397, 432, 437, 528, 586, 587, 593, 620, 641, 642, 644, 646, 648, 650, 653, 655, 657, 670, 678, 688, 690, 702, 704, 742, 813, 821, 831, 843, 852, 853, 858, 863, 871, 875, 876, 885, 890, 900, 903, 906, 913, 914, 922, 947, 953, 1003, 1047, 1145, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1253, 1260, 1270, 1272, 1284, 1286, 1319, 1331, 1342, 1360, 1365, 1372], "optional_memb": [520, 831, 1135, 1342], "or_": 831, "oracl": 142, "orang": [205, 321, 322, 324, 325, 327, 328, 330, 332, 333, 340, 410, 737, 831, 925, 926, 928, 929, 931, 932, 934, 936, 937, 1365], "orc": 186, "order": [10, 40, 47, 48, 49, 50, 52, 58, 64, 127, 139, 141, 160, 162, 163, 164, 165, 200, 204, 205, 212, 213, 214, 221, 229, 230, 244, 246, 256, 262, 263, 264, 268, 272, 274, 276, 277, 281, 286, 297, 298, 303, 305, 310, 340, 365, 385, 390, 409, 410, 435, 436, 495, 541, 558, 565, 571, 620, 625, 630, 640, 661, 662, 663, 672, 673, 703, 710, 711, 712, 713, 727, 736, 737, 739, 740, 742, 754, 810, 821, 831, 842, 847, 855, 860, 861, 862, 867, 870, 871, 875, 877, 885, 886, 893, 896, 897, 901, 905, 906, 910, 911, 947, 951, 952, 953, 972, 992, 997, 1015, 1024, 1045, 1046, 1112, 1142, 1158, 1175, 1182, 1188, 1214, 1218, 1225, 1240, 1242, 1244, 1255, 1285, 1310, 1327, 1328, 1329, 1331, 1342, 1351, 1354, 1360, 1369, 1370, 1373], "order_bi": [620, 831], "ordin": [460, 630, 831, 1074, 1218, 1342, 1371], "ordinal_dai": [445, 479], "org": [20, 42, 43, 125, 141, 142, 145, 147, 195, 196, 197, 206, 340, 594, 697, 903, 947, 955, 956, 1279], "orient": [53, 55, 99, 128, 130, 260, 340, 947, 1351], "origin": [52, 139, 140, 153, 212, 213, 221, 268, 305, 340, 435, 436, 463, 464, 477, 495, 541, 579, 603, 620, 632, 633, 634, 635, 636, 638, 679, 685, 694, 752, 753, 831, 860, 861, 867, 893, 911, 947, 1045, 1046, 1077, 1078, 1091, 1112, 1158, 1222, 1223, 1224, 1226, 1261, 1267, 1276, 1342], "orjson": 135, "orld": 1292, "orson": 135, "other": [1, 20, 36, 40, 46, 59, 60, 124, 138, 139, 140, 141, 144, 153, 158, 162, 163, 164, 165, 213, 215, 218, 221, 244, 245, 246, 255, 256, 264, 268, 273, 275, 278, 279, 302, 307, 309, 312, 314, 315, 338, 340, 343, 349, 353, 355, 365, 366, 419, 434, 469, 483, 484, 495, 499, 504, 506, 516, 520, 530, 537, 559, 560, 561, 562, 577, 583, 589, 599, 601, 614, 615, 619, 634, 635, 666, 673, 702, 729, 730, 735, 738, 745, 747, 749, 754, 757, 758, 759, 760, 768, 775, 795, 797, 800, 809, 813, 815, 831, 843, 853, 867, 875, 876, 877, 885, 886, 892, 893, 898, 899, 913, 914, 917, 918, 919, 947, 953, 962, 1029, 1044, 1083, 1098, 1099, 1100, 1108, 1118, 1120, 1135, 1147, 1154, 1176, 1177, 1178, 1179, 1194, 1206, 1207, 1222, 1223, 1325, 1333, 1341, 1342, 1347, 1357, 1370], "other_df": [244, 340], "other_lf": [875, 947], "otherwis": [38, 141, 144, 151, 156, 168, 171, 175, 225, 249, 256, 275, 278, 297, 302, 326, 340, 389, 394, 415, 419, 430, 485, 486, 487, 488, 570, 579, 590, 620, 624, 625, 627, 632, 667, 677, 680, 684, 689, 691, 696, 700, 701, 704, 715, 742, 746, 775, 778, 787, 793, 821, 831, 886, 898, 930, 947, 952, 996, 1000, 1021, 1029, 1041, 1102, 1103, 1104, 1105, 1187, 1195, 1214, 1216, 1220, 1241, 1243, 1250, 1259, 1262, 1266, 1271, 1273, 1278, 1282, 1283, 1286, 1297, 1331, 1342, 1362], "our": 198, "out": [8, 14, 38, 47, 48, 49, 50, 106, 131, 158, 161, 169, 173, 221, 272, 275, 340, 376, 394, 545, 547, 677, 680, 689, 821, 867, 896, 947, 983, 1000, 1162, 1164, 1259, 1262, 1271, 1368], "outcom": [620, 831], "outer": [52, 309, 340, 914, 947], "outermost": 51, "outlin": 7, "output": [0, 8, 30, 37, 40, 42, 43, 44, 45, 46, 47, 200, 208, 242, 249, 253, 256, 262, 264, 274, 278, 280, 290, 303, 310, 314, 340, 352, 354, 377, 409, 410, 415, 430, 469, 549, 570, 578, 579, 590, 593, 604, 627, 634, 676, 692, 696, 736, 737, 742, 746, 747, 748, 749, 759, 760, 761, 789, 790, 792, 793, 797, 815, 831, 843, 847, 857, 863, 881, 885, 886, 898, 900, 910, 917, 930, 947, 960, 961, 984, 1015, 1021, 1041, 1083, 1166, 1195, 1216, 1258, 1274, 1278, 1327, 1331, 1342], "output_path": [594, 903, 947], "outsid": [419, 831, 1029, 1342], "over": [60, 133, 139, 140, 141, 144, 150, 153, 158, 169, 170, 200, 218, 241, 242, 243, 249, 256, 273, 274, 275, 287, 303, 304, 318, 326, 340, 344, 409, 410, 429, 432, 486, 494, 578, 579, 590, 592, 593, 594, 595, 596, 604, 605, 630, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 736, 737, 765, 766, 779, 792, 793, 805, 810, 831, 847, 852, 863, 886, 890, 903, 906, 910, 922, 930, 944, 947, 953, 1015, 1040, 1103, 1108, 1195, 1229, 1230, 1232, 1236, 1327, 1342, 1370], "overflow": [411, 427, 428, 719, 731, 831, 849, 947, 1016, 1038, 1039, 1301, 1313, 1342], "overhead": [51, 92, 153, 156, 157, 158], "overlap": [679, 686, 688, 690, 1261, 1268, 1270, 1272], "overrid": [1, 40, 124, 126, 127, 128, 129, 130, 139, 141, 142, 144, 148, 149, 150, 157, 166, 167, 173, 175, 340, 947], "overridden": [40, 124, 126, 128, 130, 148, 149, 157, 175, 340, 947], "overview": [340, 831, 843, 947, 1342, 1369, 1373], "overwrit": [14, 38, 39, 41, 124, 126, 127, 128, 130, 135, 139, 140, 148, 149, 153, 157, 197, 309, 340, 351, 729, 831, 914, 947], "overwrite_schema": [39, 340], "ow": 709, "own": [821, 1323, 1342, 1373], "p": [54, 263, 340, 624, 813, 831, 889, 947, 953, 1271, 1273, 1355], "p13dt14h0": 469, "p1dt42": 469, "pa": [39, 124, 159, 340, 810], "pa_tabl": 810, "pacif": [438, 1048], "pack": [260, 340], "packag": [32, 33, 34, 136, 141, 340, 344, 437, 756, 1047], "pad": [698, 699, 724, 1280, 1281, 1306], "pad_end": [699, 1281], "pad_start": [698, 724, 1280, 1306], "page": [46, 50, 145, 151, 156, 158, 340, 831, 843, 947, 1342, 1369], "pair": [124, 126, 127, 128, 130, 148, 149, 157, 269, 340, 894, 947, 1373], "pairwis": [206, 340], "panda": [38, 125, 129, 135, 161, 221, 230, 268, 299, 305, 307, 340, 456, 457, 735, 810, 831, 867, 871, 893, 911, 913, 947, 1070, 1071, 1324, 1325, 1342, 1352, 1354, 1370], "pandas_df": 1370, "pane": [40, 340], "panic": 107, "pap": 1273, "papa": 691, "papai": [691, 1273], "papaya": [691, 704, 715, 1273, 1286, 1297], "parallel": [58, 60, 133, 142, 151, 158, 230, 245, 247, 263, 279, 315, 340, 429, 542, 742, 821, 831, 843, 871, 875, 876, 899, 918, 930, 947, 1040, 1159, 1331, 1342], "parallelis": [249, 326, 340, 1195, 1342], "parallelstrategi": [151, 158], "param": [40, 124, 126, 127, 128, 130, 139, 140, 148, 149, 153, 157, 168, 169, 173, 273, 340, 947], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 67, 68, 69, 70, 71, 79, 83, 93, 99, 108, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 197, 198, 200, 201, 202, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 240, 242, 243, 244, 245, 246, 248, 249, 253, 255, 256, 259, 260, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 323, 325, 326, 332, 334, 340, 349, 351, 352, 353, 354, 355, 365, 372, 373, 376, 377, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 409, 410, 411, 412, 416, 419, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 437, 439, 441, 442, 447, 459, 462, 463, 464, 465, 466, 468, 469, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 514, 515, 516, 520, 528, 530, 532, 537, 538, 539, 540, 542, 545, 546, 547, 548, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 577, 578, 579, 586, 587, 593, 594, 595, 599, 601, 604, 605, 606, 607, 608, 609, 614, 615, 619, 620, 621, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 727, 729, 730, 732, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 847, 849, 850, 852, 853, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 875, 876, 877, 880, 881, 885, 886, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 927, 929, 930, 936, 938, 947, 952, 953, 957, 959, 960, 961, 962, 972, 979, 980, 983, 984, 991, 992, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1015, 1016, 1017, 1022, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1051, 1052, 1057, 1073, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1091, 1094, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1112, 1116, 1117, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1135, 1142, 1145, 1149, 1154, 1155, 1156, 1157, 1159, 1162, 1163, 1164, 1165, 1166, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1185, 1186, 1187, 1188, 1195, 1207, 1211, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1249, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1306, 1307, 1310, 1314, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1327, 1328, 1331, 1332, 1333, 1342, 1351, 1352, 1353, 1354, 1355, 1357, 1362, 1365, 1370], "parameteris": 141, "parametr": 843, "paramount": [881, 947], "parent": [40, 71, 223, 340], "parenthes": 18, "parquet": [46, 50, 151, 152, 158, 186, 340, 843, 947], "parquetcompress": [46, 340], "pars": [37, 47, 138, 139, 140, 142, 144, 149, 150, 151, 153, 156, 157, 158, 200, 229, 278, 279, 283, 286, 303, 314, 315, 319, 340, 410, 419, 516, 620, 634, 635, 673, 693, 702, 718, 719, 729, 737, 747, 749, 754, 757, 758, 759, 760, 768, 781, 795, 797, 800, 809, 811, 813, 815, 821, 831, 847, 870, 898, 899, 902, 905, 910, 917, 918, 923, 947, 1029, 1130, 1222, 1223, 1246, 1275, 1300, 1301, 1342, 1351], "parseerror": [719, 1301], "parser": [139, 144], "part": [124, 144, 193, 198, 297, 302, 340, 620, 686, 706, 707, 831, 890, 919, 947, 957, 1268, 1288, 1289, 1366], "parti": [578, 831], "partial": [127, 139, 153, 340, 947], "particip": [40, 340], "particular": [39, 139, 144, 145, 147, 200, 216, 303, 340, 409, 410, 736, 737, 831, 847, 910, 947, 1015, 1101, 1327, 1342], "partit": [46, 142, 151, 154, 156, 158, 159, 243, 262, 340, 620, 831], "partition_bi": [46, 140, 243, 340, 620, 831], "partition_chunk_size_byt": [46, 340], "partition_col": [46, 142, 340], "partition_df": 140, "partition_index": 185, "partition_num": 142, "partition_on": 142, "partition_rang": 142, "partitioned_object": [46, 340], "pass": [32, 33, 34, 36, 38, 39, 40, 46, 52, 99, 126, 135, 136, 138, 141, 142, 144, 151, 153, 156, 159, 162, 164, 167, 169, 171, 173, 200, 206, 210, 229, 230, 232, 245, 248, 262, 263, 264, 269, 272, 278, 283, 286, 291, 299, 302, 303, 310, 314, 319, 340, 384, 410, 437, 447, 459, 463, 469, 492, 513, 563, 578, 579, 594, 620, 624, 634, 635, 640, 664, 673, 702, 709, 710, 711, 737, 746, 754, 756, 781, 813, 821, 827, 831, 847, 859, 870, 871, 873, 876, 881, 889, 894, 896, 898, 902, 903, 905, 910, 917, 922, 923, 930, 947, 952, 991, 1047, 1057, 1077, 1083, 1109, 1124, 1149, 1180, 1195, 1222, 1223, 1246, 1284, 1291, 1292, 1293, 1314, 1324, 1342, 1355, 1370], "pass_nam": [579, 831], "pass_name_to_appli": [136, 831], "password": [139, 142, 145, 147], "past": [36, 340, 881, 947], "pat": [689, 1271], "patch": 70, "path": [3, 6, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 209, 280, 340, 432, 593, 594, 597, 663, 831, 858, 900, 903, 947, 951, 1244, 1276, 1342, 1373], "pathlib": [35, 37, 42, 43, 46, 153, 340], "pattern": [95, 139, 140, 144, 145, 149, 151, 153, 156, 157, 158, 242, 340, 412, 416, 588, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 700, 701, 702, 708, 930, 953, 1017, 1022, 1241, 1243, 1259, 1260, 1261, 1264, 1267, 1268, 1269, 1270, 1271, 1272, 1282, 1283, 1284, 1290, 1342, 1365], "paya": 715, "pc": [892, 947], "pct": 169, "pct_chang": [831, 1342], "pd": [125, 129, 735, 810, 831, 1324, 1325, 1342, 1352, 1370], "pd_df": 129, "pd_frame": 810, "pd_seri": 129, "pdsh": [133, 140], "pea": 691, "peak": [274, 340, 622, 623, 831, 1212, 1213, 1342], "peak_max": [831, 1342], "peak_min": [831, 1342], "pear": [691, 704, 715, 1273, 1286, 1297], "pearson": [206, 340, 528, 670, 761, 831, 1145, 1253, 1342], "penalti": [714, 716, 717, 1296, 1298, 1299], "per": [14, 37, 40, 47, 136, 144, 167, 169, 200, 228, 260, 261, 264, 279, 286, 303, 315, 329, 331, 332, 340, 376, 410, 542, 545, 547, 578, 579, 603, 604, 606, 608, 610, 611, 673, 737, 742, 754, 831, 847, 899, 905, 910, 918, 933, 935, 936, 947, 983, 1159, 1162, 1164, 1331, 1342], "percent": [621, 831, 1211, 1342], "percentag": [166, 169, 173, 621, 831, 1211, 1342], "percentil": [208, 340, 857, 947, 1042, 1342], "perform": [38, 46, 48, 50, 52, 97, 102, 104, 109, 111, 118, 125, 139, 140, 141, 145, 149, 151, 153, 156, 157, 158, 197, 221, 229, 230, 244, 245, 246, 249, 267, 268, 272, 274, 275, 298, 326, 340, 400, 405, 408, 414, 415, 499, 570, 578, 579, 620, 640, 678, 688, 690, 695, 696, 702, 714, 716, 717, 831, 867, 871, 875, 876, 877, 893, 896, 905, 920, 921, 947, 1006, 1011, 1014, 1020, 1021, 1195, 1260, 1270, 1272, 1277, 1278, 1284, 1296, 1298, 1299, 1323, 1342], "perhap": [304, 340], "period": [139, 140, 153, 230, 272, 340, 464, 477, 485, 487, 488, 621, 640, 770, 771, 773, 774, 818, 819, 831, 871, 896, 947, 1078, 1091, 1102, 1104, 1105, 1211, 1342], "persist": 1357, "phase": [38, 308, 340], "philadelphia": [700, 701], "phone": [722, 1304], "physic": [51, 64, 92, 139, 140, 245, 264, 340, 735, 831, 848, 875, 876, 947, 1023, 1325, 1342], "pi": [10, 431, 831, 1031, 1033, 1251, 1315, 1342, 1363, 1367], "pick": [170, 821], "pickl": [432, 831, 858, 947], "pip": [437, 756, 1047], "pipe": [340, 831, 947], "pipelin": [144, 302, 340], "pitfal": 109, "pivot": [308, 340, 953], "pivot_long": [307, 340, 913, 947], "pivot_wid": [264, 340], "pivotagg": [264, 340], "pixel": [40, 340], "pk": [482, 831, 1097, 1342], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 70, 79, 83, 91, 92, 96, 99, 100, 101, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 153, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 175, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342, 1347, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1373], "pl_frame": 810, "place": [10, 11, 37, 47, 193, 211, 218, 234, 235, 264, 270, 275, 286, 312, 340, 344, 365, 377, 385, 549, 565, 672, 673, 754, 831, 905, 947, 962, 972, 984, 992, 1108, 1166, 1182, 1219, 1255, 1342], "placehold": 780, "plai": [12, 760], "plain": [863, 892, 947], "plan": [245, 247, 340, 432, 831, 848, 852, 858, 863, 875, 876, 892, 900, 903, 947, 1372], "plan_typ": [892, 947], "plane": [752, 753], "plantypeprefer": [892, 947], "platform": 161, "ple": 1365, "pleas": [129, 141, 142, 221, 230, 255, 268, 340, 344, 486, 762, 775, 831, 867, 871, 885, 893, 947, 1103, 1342], "plenti": 953, "plot": [340, 890, 903, 947, 1342], "plu": [430, 575, 831, 1041, 1192, 1216, 1342, 1364], "plugin": [0, 831, 843], "plugin_path": 136, "point": [10, 11, 31, 32, 33, 34, 37, 39, 40, 41, 42, 46, 47, 48, 49, 50, 58, 59, 68, 70, 72, 73, 74, 134, 135, 143, 149, 151, 153, 154, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 212, 219, 230, 246, 247, 287, 297, 302, 309, 340, 343, 344, 418, 429, 430, 435, 464, 465, 493, 498, 499, 510, 523, 524, 558, 579, 627, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 659, 661, 758, 789, 790, 831, 852, 853, 860, 865, 871, 877, 881, 894, 906, 914, 947, 1024, 1026, 1040, 1041, 1045, 1078, 1079, 1110, 1115, 1125, 1175, 1216, 1228, 1231, 1233, 1234, 1238, 1240, 1321, 1326, 1342, 1347, 1370], "pointer": [216, 340, 1101, 1342], "poison": [612, 613, 831, 1204, 1205, 1342], "pola": 340, "polar": [1, 191, 340, 343, 344, 830, 831, 837, 843, 947, 951, 952, 953, 1342, 1346, 1347, 1369, 1370, 1372], "polars_df": 1370, "polars_file_cache_ttl": [149, 153, 156, 157], "polars_hypothesis_profil": [172, 174], "polars_max_thread": 175, "polars_seri": 1370, "polars_verbos": [852, 863, 890, 903, 947], "polarsdatafram": 197, "polarsdataset": [302, 340], "polarsdatatyp": [61, 71, 79, 139, 140, 153, 166, 167, 168, 169, 170, 173, 201, 249, 297, 302, 340, 397, 411, 489, 578, 579, 634, 635, 693, 777, 791, 792, 793, 803, 806, 822, 827, 831, 849, 947, 953, 1003, 1016, 1195, 1222, 1223, 1275, 1342], "polarsintegertyp": [751, 785, 786], "polarstemporaltyp": [714, 1296], "polarstyp": 60, "pool": [14, 59, 175, 176, 853, 947], "poor": 141, "pop2": [245, 340, 876, 947], "popul": [245, 340, 876, 947], "port": [38, 139, 141, 142, 145, 147, 340], "portion": 1365, "pos_a": 1365, "posit": [40, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 185, 198, 210, 217, 229, 262, 278, 279, 283, 286, 306, 314, 315, 319, 340, 384, 485, 487, 488, 489, 563, 620, 625, 627, 664, 673, 687, 700, 701, 719, 729, 752, 753, 754, 757, 758, 759, 760, 777, 809, 813, 827, 831, 859, 864, 870, 898, 899, 902, 905, 912, 917, 918, 923, 947, 953, 991, 1102, 1104, 1105, 1180, 1214, 1216, 1246, 1269, 1301, 1342, 1371], "position": 1342, "possibl": [40, 46, 50, 99, 101, 126, 127, 130, 139, 144, 166, 169, 173, 229, 242, 249, 274, 305, 326, 340, 576, 579, 590, 641, 707, 741, 831, 852, 863, 870, 890, 903, 905, 911, 947, 1195, 1228, 1289, 1342], "post": [52, 70, 892, 947], "postgresql": [38, 141, 142, 340, 620, 831, 1368], "potenti": [109, 111, 136, 153, 156, 157, 242, 273, 275, 340, 603, 700, 701, 855, 857, 862, 897, 916, 947, 1282, 1283], "pow": [831, 1342, 1363], "pow_n": 54, "power": [811, 1214, 1342, 1364], "powersofn": 54, "pre": [570, 579, 627, 803, 806, 822, 831, 1216, 1342], "preced": [169, 953], "precis": [10, 11, 37, 40, 47, 68, 141, 242, 274, 275, 294, 297, 302, 340, 439, 718, 789, 947, 953, 1049, 1300], "predefin": [264, 340], "predic": [39, 47, 48, 49, 50, 58, 59, 134, 153, 156, 157, 158, 159, 201, 221, 240, 245, 246, 268, 273, 340, 411, 495, 744, 779, 821, 831, 852, 853, 863, 867, 876, 877, 881, 890, 893, 894, 903, 920, 921, 947, 1112, 1241, 1243, 1342], "predicate_pushdown": [47, 48, 49, 50, 58, 59, 852, 853, 863, 881, 890, 903, 947], "predict": [267, 310, 340], "prefer": [139, 140, 144, 145, 149, 151, 153, 174, 200, 218, 242, 249, 273, 274, 303, 326, 340, 409, 410, 489, 579, 736, 737, 831, 847, 910, 947, 951, 1015, 1108, 1195, 1327, 1342, 1352, 1373], "prefilt": 158, "prefix": [39, 139, 140, 153, 193, 340, 351, 399, 416, 469, 588, 604, 607, 608, 610, 611, 708, 711, 712, 724, 831, 953, 1005, 1022, 1290, 1294, 1306], "prefix_": 607, "prefix_a": 607, "prefix_b": 607, "prefix_field": [605, 609], "presenc": [778, 787, 953], "present": [127, 169, 225, 340, 520, 594, 710, 711, 831, 903, 947], "preserv": [212, 213, 221, 229, 244, 246, 249, 268, 298, 299, 340, 435, 436, 437, 456, 457, 495, 541, 620, 634, 667, 684, 831, 860, 861, 867, 875, 877, 893, 947, 1045, 1046, 1047, 1112, 1158, 1222, 1250, 1266, 1324, 1342], "pressur": [50, 139, 140, 149, 151, 153, 157, 158, 665, 831, 947, 1247, 1342], "presum": [578, 831], "prev_pow2": 54, "prevent": [298, 340, 351, 427, 428, 603, 731, 831, 947, 1038, 1039, 1313, 1342], "preview": [228, 340], "previou": [54, 193, 340, 343, 437, 603, 604, 606, 608, 610, 611, 621, 727, 831, 1047, 1211, 1342, 1347], "previous": [2, 3], "price": [340, 343, 1373], "primari": [144, 951, 1370, 1373], "primarili": 1, "primit": [39, 340, 520, 831], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 140, 161, 162, 164, 214, 228, 229, 243, 247, 296, 318, 340, 513, 595, 770, 773, 831, 852, 873, 947, 953, 1135, 1320, 1342, 1373], "prior": [129, 340, 343, 1342, 1347], "prioriti": 170, "probabl": [482, 627, 831, 1097, 1216, 1342], "process": [14, 37, 47, 48, 49, 50, 58, 59, 139, 140, 141, 153, 175, 274, 340, 852, 853, 863, 890, 903, 947], "process_index": [297, 340], "produc": [2, 3, 134, 169, 173, 201, 244, 340, 373, 411, 539, 590, 789, 792, 831, 875, 881, 947, 980, 1156], "product": [52, 206, 244, 340, 427, 434, 831, 875, 947, 1038, 1044, 1342], "profil": [32, 172, 174, 852, 947], "profile_nam": 32, "programmat": [208, 340, 857, 947], "progress": [68, 70, 74], "project": [47, 48, 49, 50, 58, 59, 134, 153, 155, 156, 157, 158, 672, 673, 831, 852, 853, 863, 881, 890, 894, 903, 947], "projection_pushdown": [47, 48, 49, 50, 58, 59, 852, 853, 863, 881, 890, 903, 947], "prompt": 131, "propag": [377, 484, 520, 549, 612, 613, 615, 676, 692, 759, 760, 831, 984, 1099, 1135, 1166, 1204, 1205, 1207, 1258, 1274, 1342], "propagate_nan": 761, "proper": [246, 340, 877, 947], "properti": [39, 40, 184, 187, 188, 197, 204, 205, 214, 222, 233, 277, 282, 313, 317, 340, 343, 344, 854, 855, 862, 897, 916, 921, 947, 952, 953, 1096, 1114, 1203, 1245, 1342, 1347, 1373], "proport": [742, 831, 1331, 1342], "protocol": [39, 125, 141, 142, 197, 340], "prototyp": 827, "provid": [31, 32, 33, 34, 37, 38, 39, 40, 42, 46, 47, 48, 49, 50, 139, 140, 142, 143, 144, 149, 151, 153, 154, 155, 156, 157, 158, 169, 173, 183, 221, 225, 240, 268, 287, 297, 340, 343, 394, 395, 469, 489, 510, 570, 578, 579, 680, 681, 685, 693, 694, 710, 711, 712, 713, 781, 813, 831, 843, 852, 863, 867, 890, 893, 903, 906, 922, 944, 947, 1000, 1001, 1083, 1125, 1144, 1195, 1262, 1263, 1267, 1275, 1276, 1321, 1342, 1355, 1362, 1365, 1370, 1373], "provis": 844, "prune": [151, 156, 158, 881, 947], "pt0": 469, "public": [142, 340, 831, 843, 947, 1342, 1369], "pulp": 1351, "pure": [40, 340], "purpos": [602, 831, 947], "push": [139, 145, 149, 151, 153, 156, 157, 158, 159, 201, 340, 411, 831], "pushdown": [47, 48, 49, 50, 58, 59, 134, 852, 853, 863, 881, 890, 894, 903, 920, 921, 947, 1241, 1243, 1342], "put": [37, 47, 70, 340, 344, 947], "pwd": 141, "py": 155, "pyarrow": [39, 46, 124, 129, 139, 142, 143, 145, 147, 151, 154, 159, 161, 292, 298, 299, 340, 810, 843, 1317, 1323, 1324, 1342, 1352, 1354, 1370], "pyarrow_opt": [46, 143, 151, 154, 340], "pyarrow_t": 1370, "pycapsul": [124, 125, 196, 956], "pycapsuleinterfac": [125, 196, 956], "pydant": 161, "pyiceberg": [41, 155, 161, 340], "pyodbc": [38, 340], "pyodbc_uri": [38, 340], "pyspark": 175, "pytest": [162, 164], "python": [0, 32, 33, 34, 42, 43, 70, 81, 95, 125, 139, 140, 145, 147, 161, 162, 164, 197, 242, 249, 274, 275, 294, 326, 340, 432, 437, 441, 499, 578, 579, 687, 756, 770, 771, 773, 774, 818, 819, 821, 831, 837, 858, 930, 947, 951, 952, 1047, 1051, 1061, 1062, 1063, 1067, 1195, 1269, 1322, 1342, 1346, 1369], "pythondatatyp": [61, 79, 201, 340, 827, 849, 947, 953], "pythonliter": [963, 1006, 1011, 1014, 1113, 1146, 1196, 1197, 1198, 1199, 1241, 1342], "pytorch": [302, 340, 1326, 1342], "q": [275, 340, 813, 1342, 1347, 1355], "q1": [40, 340], "q2": [40, 340], "q3": [40, 340], "q4": [40, 340], "qcut": [430, 831, 1041, 1342], "qhoo": 1373, "qmark": 141, "qqr": 953, "quad": [486, 831, 1103, 1342], "qualifi": [38, 340], "quantifi": [686, 1268], "quantil": [340, 627, 650, 651, 831, 947, 1216, 1233, 1342, 1359], "quantile_cont": 1363, "quantile_disc": 1363, "quarter": [230, 245, 272, 310, 340, 459, 464, 477, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091, 1366], "queri": [47, 48, 49, 50, 58, 59, 141, 142, 145, 153, 156, 157, 158, 218, 247, 263, 287, 340, 570, 578, 579, 694, 810, 831, 852, 853, 863, 890, 892, 903, 906, 920, 921, 922, 930, 939, 947, 1108, 1195, 1276, 1342, 1351, 1352, 1354, 1358, 1369, 1371, 1372], "quick": [827, 1042, 1342, 1373], "quit": [245, 340, 876, 947], "quot": [37, 38, 47, 139, 140, 142, 153, 340, 722, 947, 1304], "quota_project_id": 34, "quote_char": [37, 47, 139, 140, 153, 340, 947], "quote_plu": 142, "quote_styl": [37, 47, 340, 947], "quotes_titl": 722, "quotient": 1364, "r": [139, 140, 153, 340, 585, 624, 679, 684, 685, 686, 687, 700, 701, 831, 953, 1261, 1266, 1267, 1268, 1269, 1282, 1283, 1297, 1355, 1365], "r1": 60, "r2": 60, "r3": 60, "rab": [677, 703, 1259, 1285, 1360], "rad": 1367, "radian": [431, 752, 831, 1363], "radix": [719, 1301], "rai": [752, 753], "raini": [700, 701, 1282, 1283], "rais": [1, 15, 16, 20, 39, 60, 96, 97, 100, 101, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 139, 140, 144, 150, 151, 153, 158, 162, 164, 197, 201, 225, 245, 264, 273, 298, 340, 376, 394, 411, 437, 462, 463, 545, 547, 590, 625, 627, 635, 677, 680, 689, 714, 716, 717, 719, 721, 772, 791, 831, 876, 922, 947, 983, 1000, 1047, 1076, 1077, 1162, 1164, 1214, 1216, 1223, 1259, 1262, 1271, 1296, 1298, 1299, 1301, 1303, 1323, 1342], "raise_if_empti": [139, 140, 144, 150, 153], "raise_if_undetermin": 590, "raise_on_fail": 922, "raker": 135, "ram": [47, 48, 49, 50, 947], "ran": [136, 831], "random": [40, 42, 145, 160, 167, 231, 276, 340, 508, 558, 630, 661, 666, 742, 831, 843, 1123, 1175, 1218, 1240, 1249, 1331, 1342], "randomli": 168, "rang": [17, 40, 141, 142, 208, 216, 230, 243, 340, 356, 431, 437, 445, 455, 460, 461, 462, 464, 477, 478, 514, 751, 756, 759, 769, 770, 771, 772, 773, 774, 785, 786, 789, 790, 817, 818, 819, 831, 857, 871, 947, 953, 1042, 1047, 1055, 1069, 1074, 1075, 1076, 1078, 1091, 1092, 1101, 1211, 1342, 1365], "rank": [365, 542, 754, 761, 776, 831, 972, 1159, 1342], "rankmethod": [630, 831, 1218, 1342], "rare": [438, 1048], "rather": [245, 340, 501, 578, 595, 627, 639, 724, 831, 876, 947, 1216, 1227, 1306, 1342], "raw": 142, "raw_output": [594, 903, 947], "re": [225, 230, 241, 305, 307, 340, 456, 457, 466, 469, 871, 911, 913, 947, 1070, 1071, 1080, 1083, 1370], "reach": [698, 699, 724, 1280, 1281, 1306], "read": [36, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 183, 209, 218, 340, 343, 432, 501, 821, 831, 858, 892, 947, 1108, 1342, 1347], "read_arrow_batches_from_odbc": 141, "read_clipboard": [36, 340], "read_csv": [138, 144, 153], "read_csv_batch": 133, "read_databas": 142, "read_database_uri": 141, "read_excel": 150, "read_ndjson": 148, "read_od": 144, "read_opt": 144, "read_parquet": 158, "read_tabl": 151, "readabl": 827, "reader": [46, 50, 133, 134, 139, 140, 145, 147, 149, 151, 340, 947], "readi": 940, "readthedoc": [40, 340], "real": [686, 1268], "realli": [429, 678, 702, 831, 1040, 1260, 1284, 1342], "realloc": [149, 153, 156, 157, 218, 340, 1108, 1342], "rearrang": [249, 340], "reason": [175, 208, 340, 570, 578, 831, 857, 947], "receiv": [52, 141, 153, 249, 263, 326, 340, 579, 624, 831, 889, 947, 1373], "recent": [162, 163, 164, 165, 298, 340, 621, 635, 831, 1211, 1223, 1323, 1342, 1354, 1370], "rechunk": [60, 124, 125, 129, 139, 140, 143, 145, 147, 149, 151, 153, 154, 156, 157, 158, 218, 340, 831, 1027, 1108, 1119, 1201, 1342], "recognis": [15, 16, 20, 953], "recommend": [40, 175, 208, 242, 247, 263, 340, 570, 848, 857, 947, 953], "record": [37, 43, 47, 135, 147, 159, 340, 947], "record_batch": [243, 340], "recordbatch": [124, 243, 340, 810, 1352, 1354, 1370], "recurs": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "red": [51, 91, 92, 326, 742, 831, 930, 1331, 1342], "redempt": 1351, "redshift": 142, "redshift_format": 186, "reduc": [50, 139, 140, 149, 151, 153, 156, 157, 158, 274, 327, 328, 330, 333, 340, 665, 766, 779, 831, 931, 932, 934, 937, 947, 1197, 1215, 1247, 1313, 1342], "reduct": [223, 340, 579, 831], "ref": [685, 687, 1267, 1269], "refer": [0, 32, 40, 95, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 206, 209, 340, 344, 432, 466, 469, 630, 685, 700, 701, 714, 716, 717, 721, 831, 858, 947, 1080, 1083, 1218, 1282, 1283, 1296, 1298, 1299, 1303, 1342], "referenc": [40, 340, 578, 700, 701, 727, 831, 1282, 1283, 1352, 1370], "reg": 135, "regard": [139, 761], "regardless": [129, 200, 229, 245, 303, 340, 410, 442, 694, 737, 821, 831, 847, 876, 910, 947, 1052, 1276], "regex": [93, 489, 585, 586, 588, 677, 679, 685, 686, 687, 689, 700, 701, 725, 777, 831, 953, 1259, 1261, 1267, 1268, 1269, 1271, 1282, 1283], "regexp_lik": 1363, "region": [40, 155, 340], "region_nam": 32, "regist": [1, 53, 54, 55, 56, 134, 136, 172, 174, 287, 340, 831, 906, 947, 951, 1351, 1352, 1354, 1355, 1356, 1357, 1370, 1372], "register_dataframe_namespac": [1, 54, 55, 56], "register_expr_namespac": [1, 53, 55, 56], "register_glob": [1353, 1355, 1357, 1370], "register_io_sourc": 951, "register_lazyframe_namespac": [1, 53, 54, 56], "register_mani": [1353, 1354, 1357], "register_plugin": 831, "register_plugin_funct": 831, "register_series_namespac": [1, 53, 54, 55], "registr": [287, 340, 810, 843, 906, 947, 1357, 1370], "regrid": [514, 831], "regular": [132, 242, 273, 274, 310, 317, 340, 489, 677, 678, 679, 683, 685, 686, 687, 688, 689, 690, 700, 701, 702, 756, 777, 827, 831, 921, 947, 953, 1259, 1260, 1261, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1282, 1283, 1284, 1368], "reinterpret": [831, 1342], "rel": [40, 142, 143, 154, 155, 162, 163, 164, 165, 340, 459, 485, 487, 488, 742, 831, 1073, 1102, 1104, 1105, 1331, 1342], "relat": [141, 193, 700, 701, 953, 1282, 1283, 1358], "releas": [59, 244, 340, 579, 831, 853, 875, 947, 1373], "release_year": 1351, "relev": 60, "reli": [244, 340, 875, 947], "reliabl": [91, 92], "remain": [139, 140, 153, 212, 213, 216, 221, 264, 268, 340, 435, 436, 495, 541, 634, 706, 707, 831, 860, 861, 867, 881, 893, 947, 1045, 1046, 1101, 1112, 1158, 1222, 1288, 1289, 1342, 1357], "remaind": [397, 707, 1003, 1289, 1364], "remap": 94, "remot": [139, 140, 145, 147, 947], "remov": [4, 139, 140, 153, 197, 210, 221, 295, 340, 489, 604, 709, 710, 711, 712, 713, 777, 831, 859, 867, 947, 1291, 1292, 1293, 1294, 1295, 1318, 1342, 1372], "removes_pronoun": 702, "removesuffix": 604, "renam": [1, 127, 139, 140, 176, 229, 278, 279, 314, 315, 319, 321, 340, 351, 501, 596, 597, 603, 604, 605, 606, 608, 610, 611, 727, 729, 809, 813, 831, 870, 898, 899, 917, 918, 923, 925, 947, 959, 1271, 1310, 1319, 1342, 1370], "rename_field": [706, 707, 1288, 1289], "render": [594, 903, 947], "render_as_str": 141, "reoconstruct": [275, 340], "repeat": [145, 156, 631, 633, 803, 822, 831], "repeat_bi": 831, "replac": [38, 39, 41, 139, 140, 153, 219, 220, 270, 304, 307, 314, 315, 340, 343, 441, 463, 493, 578, 579, 635, 701, 702, 717, 831, 865, 913, 917, 918, 947, 1051, 1077, 1110, 1223, 1241, 1243, 1283, 1284, 1299, 1342, 1347, 1363], "replace_al": [635, 700, 831, 1222, 1223, 1282, 1342], "replace_column": 340, "replace_strict": [634, 831, 1222, 1342], "replace_time_zon": [438, 444, 446, 1053, 1054, 1081], "replace_with": [702, 1284], "replic": [735, 831, 1325, 1342], "report": [141, 216, 340, 697, 1101, 1279, 1342], "repr": [131, 412, 416, 469, 1017, 1022, 1083], "repres": [37, 40, 41, 47, 66, 67, 69, 80, 84, 89, 124, 126, 128, 129, 130, 141, 264, 287, 288, 297, 298, 311, 318, 340, 415, 499, 523, 524, 566, 572, 578, 675, 691, 696, 700, 701, 704, 715, 743, 746, 763, 775, 777, 791, 792, 793, 802, 807, 808, 812, 820, 827, 831, 906, 907, 915, 947, 953, 1021, 1241, 1257, 1273, 1278, 1282, 1283, 1286, 1297, 1323, 1332, 1342, 1370], "represent": [10, 44, 45, 66, 67, 69, 84, 131, 280, 296, 340, 412, 414, 415, 416, 440, 445, 448, 450, 451, 452, 453, 454, 455, 458, 460, 461, 465, 478, 479, 481, 593, 735, 831, 863, 879, 900, 947, 1017, 1020, 1021, 1022, 1023, 1050, 1055, 1058, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1072, 1074, 1075, 1079, 1092, 1093, 1095, 1320, 1325, 1342, 1361], "request": 34, "requested_schema": [196, 956], "requir": [1, 32, 33, 34, 39, 40, 52, 60, 129, 141, 142, 162, 163, 164, 165, 178, 206, 212, 273, 297, 298, 299, 302, 340, 390, 412, 416, 485, 487, 488, 571, 579, 620, 643, 645, 647, 649, 651, 654, 656, 658, 665, 714, 716, 717, 739, 806, 831, 855, 860, 861, 862, 905, 916, 947, 997, 1100, 1102, 1104, 1105, 1188, 1247, 1282, 1296, 1298, 1299, 1323, 1324, 1328, 1342], "require_al": 953, "require_http": 178, "rerais": [59, 853, 947], "rerun": [218, 340, 1108, 1342], "resampl": [230, 340, 871, 947], "reset": [4, 193], "reset_index": [129, 230, 340, 871, 947], "reshap": [264, 298, 340, 543, 758, 831, 1160, 1342], "resolv": [221, 340, 441, 570, 854, 855, 862, 897, 916, 947], "resourc": [922, 951], "respect": [40, 139, 153, 340, 678, 688, 690, 702, 953, 1260, 1270, 1272, 1284, 1326, 1342], "respons": [142, 256, 340, 886, 947], "rest": [722, 1304], "restor": [193, 340, 343, 1342, 1347], "restore_default": 193, "restrict": [30, 707, 1289], "result": [13, 37, 44, 45, 46, 47, 48, 49, 50, 52, 60, 128, 129, 130, 141, 142, 144, 153, 156, 158, 159, 173, 218, 221, 230, 231, 244, 245, 246, 260, 264, 268, 272, 275, 280, 281, 283, 297, 298, 299, 310, 317, 319, 325, 340, 437, 464, 466, 469, 477, 485, 486, 487, 488, 492, 499, 508, 516, 528, 569, 570, 578, 579, 593, 620, 625, 627, 634, 635, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 663, 664, 684, 701, 705, 706, 717, 738, 742, 765, 766, 770, 772, 773, 774, 775, 790, 791, 792, 803, 806, 807, 808, 810, 822, 831, 848, 852, 857, 867, 871, 875, 876, 877, 881, 890, 893, 896, 900, 901, 902, 921, 923, 929, 940, 941, 947, 953, 962, 1078, 1080, 1083, 1091, 1102, 1104, 1105, 1108, 1109, 1123, 1130, 1145, 1186, 1195, 1214, 1216, 1222, 1223, 1224, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1244, 1246, 1266, 1287, 1288, 1299, 1323, 1324, 1331, 1342, 1352, 1358, 1370, 1371, 1373], "resultset": 141, "retain": [221, 268, 340, 867, 893, 947], "retri": [37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 156, 157, 158, 183, 340, 947], "retriev": [178, 179, 183, 225, 297, 340, 370, 371, 535, 536, 725, 802, 977, 978, 1152, 1153, 1307, 1321, 1342, 1358], "return": [1, 5, 6, 30, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 102, 105, 113, 121, 124, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 175, 176, 183, 195, 198, 200, 202, 205, 206, 207, 211, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 238, 240, 241, 242, 243, 244, 247, 248, 249, 251, 253, 258, 259, 260, 262, 263, 264, 269, 272, 273, 274, 275, 276, 280, 287, 290, 291, 297, 298, 299, 302, 303, 304, 305, 310, 313, 314, 315, 321, 323, 325, 326, 329, 334, 340, 352, 354, 357, 358, 359, 360, 361, 362, 365, 366, 370, 371, 372, 374, 376, 377, 388, 393, 394, 395, 396, 397, 398, 399, 409, 410, 414, 415, 420, 421, 422, 423, 424, 430, 431, 437, 438, 440, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 486, 491, 499, 502, 503, 505, 509, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 535, 536, 538, 543, 545, 547, 548, 549, 551, 558, 568, 569, 576, 578, 579, 591, 593, 594, 595, 600, 624, 627, 629, 633, 634, 635, 636, 638, 639, 661, 662, 667, 668, 669, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 715, 719, 724, 732, 733, 734, 736, 737, 738, 740, 741, 742, 745, 746, 751, 752, 753, 754, 755, 756, 762, 764, 769, 770, 771, 772, 773, 774, 775, 778, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 803, 806, 809, 810, 813, 816, 817, 818, 819, 821, 822, 831, 847, 850, 852, 853, 855, 856, 857, 862, 863, 869, 871, 872, 875, 879, 880, 881, 889, 890, 894, 896, 900, 903, 909, 910, 911, 916, 917, 918, 925, 927, 929, 933, 938, 940, 947, 952, 953, 955, 957, 960, 961, 962, 970, 971, 973, 974, 975, 976, 977, 978, 979, 981, 983, 984, 995, 997, 999, 1000, 1001, 1003, 1004, 1015, 1019, 1020, 1021, 1028, 1034, 1035, 1041, 1042, 1047, 1048, 1050, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1101, 1103, 1107, 1108, 1113, 1117, 1124, 1125, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1160, 1162, 1164, 1165, 1166, 1168, 1175, 1185, 1186, 1193, 1195, 1200, 1209, 1216, 1222, 1223, 1224, 1225, 1226, 1227, 1240, 1242, 1250, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1285, 1286, 1287, 1288, 1289, 1297, 1301, 1306, 1314, 1317, 1324, 1327, 1329, 1330, 1331, 1333, 1342, 1351, 1352, 1356, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1368, 1370, 1371, 1372, 1373], "return_as_str": [228, 340, 595], "return_dtyp": [40, 249, 340, 578, 579, 634, 635, 745, 792, 793, 831, 1195, 1222, 1223, 1342], "return_typ": [297, 302, 340], "returns_scalar": [136, 578, 579, 793, 831], "reus": [58, 59, 193, 852, 853, 863, 890, 903, 947], "reusabl": 193, "rev": [246, 340, 877, 947], "revers": [200, 216, 303, 340, 410, 424, 425, 426, 427, 428, 604, 606, 608, 737, 758, 764, 831, 847, 910, 947, 1035, 1036, 1037, 1038, 1039, 1342, 1360, 1363], "reverse_": 606, "reverse_a": 606, "reverse_b": 606, "revert": [7, 9, 10], "rhap": [688, 690, 1272], "rhapsodi": [688, 690, 1272], "right": [9, 10, 15, 16, 18, 27, 40, 68, 139, 140, 162, 163, 164, 165, 230, 244, 245, 272, 309, 340, 430, 485, 486, 487, 488, 516, 559, 560, 561, 562, 627, 640, 643, 645, 647, 649, 651, 654, 656, 658, 662, 670, 757, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 875, 876, 896, 914, 947, 1041, 1102, 1103, 1104, 1105, 1130, 1176, 1177, 1178, 1179, 1216, 1242, 1253, 1342, 1358, 1363], "right_left": [244, 340, 875, 947], "right_on": [244, 245, 309, 340, 875, 876, 914, 947], "rightmost": [662, 831, 1242, 1342, 1365], "rld": [709, 711, 1293], "rle": [639, 831, 1227, 1342], "rle_id": [638, 831, 1342], "rle_id_a": [639, 831], "rle_id_ab": [639, 831], "rmm": 922, "rn": [139, 140, 153], "role": [32, 142], "roll": [230, 340, 437, 456, 457, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 759, 807, 808, 831, 871, 947, 1047, 1070, 1071, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1342], "rollback": [457, 1071], "rolled_forward": 437, "rollforward": [456, 1070], "rolling_map": [831, 1342], "rolling_max": [831, 1342], "rolling_max_bi": 831, "rolling_mean": [831, 1342], "rolling_mean_bi": 831, "rolling_median": [831, 1342], "rolling_median_bi": 831, "rolling_min": [831, 1342], "rolling_min_bi": 831, "rolling_quantil": [831, 1342], "rolling_quantile_bi": 831, "rolling_row_max": [643, 831], "rolling_row_mean": [645, 831], "rolling_row_median": [647, 831], "rolling_row_min": [649, 831], "rolling_row_quantil": [651, 831], "rolling_row_std": [654, 831], "rolling_row_sum": [656, 831], "rolling_row_var": [658, 831], "rolling_skew": [831, 1342], "rolling_std": [831, 1342], "rolling_std_bi": 831, "rolling_sum": [641, 831, 1228, 1342], "rolling_sum_bi": 831, "rolling_var": [831, 1342], "rolling_var_bi": 831, "rollinggroupbi": [272, 340], "rollinginterpolationmethod": [208, 266, 332, 340, 628, 650, 651, 804, 831, 857, 891, 936, 947, 1042, 1217, 1233, 1342], "ronaldo": [685, 1267], "root": [143, 154, 417, 592, 603, 604, 606, 608, 610, 611, 674, 830, 831, 1025, 1256, 1342, 1364], "rotat": [340, 343, 1342, 1347], "round": [20, 40, 54, 131, 141, 340, 418, 422, 498, 660, 733, 831, 1026, 1115, 1239, 1342, 1363], "round_sig_fig": [831, 1342], "round_str": 1078, "round_td": 1078, "rounded_corn": 20, "row": [14, 20, 25, 37, 38, 40, 46, 47, 50, 52, 53, 55, 60, 99, 105, 113, 121, 127, 128, 129, 130, 131, 134, 135, 139, 140, 141, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 162, 163, 169, 198, 200, 201, 202, 212, 213, 218, 221, 223, 224, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 255, 256, 260, 264, 268, 272, 275, 276, 285, 291, 294, 296, 297, 302, 303, 305, 307, 308, 309, 316, 317, 321, 323, 325, 326, 334, 340, 344, 365, 366, 374, 389, 410, 411, 491, 499, 503, 509, 532, 543, 570, 620, 621, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 671, 673, 684, 693, 732, 737, 751, 754, 760, 762, 779, 783, 785, 786, 788, 790, 805, 807, 808, 816, 821, 831, 847, 850, 860, 861, 867, 868, 869, 871, 872, 875, 876, 877, 878, 880, 881, 885, 886, 893, 904, 909, 910, 911, 913, 914, 920, 921, 925, 927, 929, 930, 938, 947, 957, 972, 981, 1107, 1108, 1117, 1124, 1149, 1160, 1211, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1254, 1266, 1275, 1314, 1342, 1351, 1358, 1360, 1371, 1372, 1373], "row_group": [151, 158], "row_group_s": [46, 50, 340, 947], "row_height": [40, 340], "row_index": [40, 340], "row_index_nam": [139, 140, 145, 147, 149, 151, 153, 156, 157, 158], "row_index_offset": [139, 140, 145, 147, 149, 151, 153, 156, 157, 158], "row_nr": [316, 340, 920, 947], "row_tot": [40, 340], "rowname_col": [340, 344], "rows_by_kei": [242, 274, 293, 340], "rowserror": [273, 340], "rowtotalsdefinit": [40, 340], "rtol": [162, 163, 164, 165], "rtrim": 1363, "ru": 1365, "rule": [139, 151, 153, 158, 223, 340, 678, 702, 717, 1260, 1284, 1299], "run": [47, 48, 49, 50, 58, 59, 67, 141, 169, 172, 173, 174, 229, 244, 247, 249, 279, 305, 315, 326, 340, 415, 429, 542, 578, 579, 638, 639, 696, 809, 831, 852, 853, 863, 870, 875, 881, 885, 890, 892, 899, 903, 911, 918, 922, 947, 951, 953, 1021, 1040, 1159, 1195, 1226, 1227, 1278, 1342, 1370, 1373], "runtim": 951, "runtimeerror": [298, 340, 1323, 1342], "rust": [37, 46, 47, 95, 107, 136, 144, 145, 147, 151, 249, 326, 340, 687, 947, 951, 1195, 1269, 1342], "s1": [51, 91, 92, 164, 165, 223, 340, 996, 1099, 1100, 1119, 1144, 1154, 1187, 1207, 1219, 1333, 1342], "s2": [1, 51, 91, 92, 164, 165, 223, 340, 996, 1027, 1044, 1099, 1100, 1119, 1135, 1144, 1154, 1187, 1201, 1207, 1219, 1333, 1342], "s3": [1, 39, 143, 154, 155, 158, 159, 340, 892, 947, 996, 1187, 1342], "s_": 469, "s_bar": 1360, "s_dt": [469, 1365, 1366], "s_dt1": 1365, "s_dt2": 1365, "s_dtm": 469, "s_foo": 1360, "s_from_str_repr": [1320, 1342], "s_head_5": 691, "s_head_n": 691, "s_tail_5": 715, "s_tail_n": 715, "s_td": 469, "s_tm": [469, 1365, 1366], "safe": [632, 831, 1220, 1342], "sale": [620, 831], "salesforce_format": 186, "sam": 12, "same": [20, 39, 40, 51, 52, 58, 59, 60, 91, 92, 108, 145, 153, 162, 163, 164, 165, 167, 193, 221, 229, 245, 249, 264, 268, 274, 275, 286, 305, 314, 315, 319, 326, 340, 348, 355, 388, 414, 435, 436, 469, 495, 499, 501, 502, 505, 569, 583, 589, 620, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 666, 673, 684, 695, 727, 827, 831, 852, 853, 867, 870, 876, 879, 881, 893, 905, 911, 917, 918, 923, 947, 953, 958, 995, 1020, 1045, 1046, 1051, 1083, 1186, 1195, 1222, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1266, 1277, 1333, 1342, 1356, 1358, 1366], "samoa": [438, 1048], "sampl": [139, 140, 326, 340, 666, 670, 789, 790, 831, 930, 1253, 1342, 1359], "sample_s": [139, 140], "sampled_from": 1373, "sandwich": [226, 340], "sat": [340, 343], "satisfi": [516, 831, 1130, 1342], "saturdai": [230, 340, 871, 947], "save": [2, 3, 6, 230, 245, 272, 310, 340, 438, 446, 459, 464, 477, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 775, 818, 819, 827, 831, 843, 871, 876, 896, 947, 1056, 1073, 1078, 1091], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [136, 198, 240, 249, 273, 283, 340, 415, 578, 662, 664, 691, 696, 704, 715, 791, 793, 831, 902, 947, 957, 1021, 1144, 1242, 1246, 1273, 1278, 1286, 1297, 1342], "scale": [28, 68, 216, 340, 398, 579, 624, 718, 831, 953, 1101, 1300, 1342], "scale_negative_even": [624, 831], "scan": [127, 130, 139, 140, 141, 144, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 183, 340, 693, 947, 1275], "scan_csv": [47, 48, 49, 50, 139, 140, 947], "scan_ipc": 145, "scan_ndjson": 149, "scan_parquet": [151, 159, 892, 947], "scan_pyarrow_dataset": [151, 158], "scan_tabl": 191, "scatter": [340, 343, 1342, 1347], "scenario": 1342, "schedul": [59, 853, 947], "schema": [0, 1, 14, 28, 35, 38, 39, 53, 54, 55, 60, 99, 116, 117, 124, 126, 127, 128, 130, 134, 135, 139, 140, 141, 142, 144, 146, 148, 149, 150, 151, 152, 153, 156, 157, 158, 179, 181, 182, 183, 187, 189, 202, 203, 204, 210, 214, 216, 243, 247, 249, 256, 260, 269, 298, 302, 340, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 444, 569, 570, 579, 590, 605, 607, 609, 693, 745, 813, 831, 843, 850, 851, 854, 855, 859, 862, 881, 886, 894, 916, 930, 947, 953, 1030, 1275, 1342, 1351], "schema_mod": [39, 340], "schema_overrid": [124, 126, 127, 128, 129, 130, 139, 140, 141, 142, 144, 148, 149, 150, 153, 157, 243, 298, 340, 947, 953], "schemadefinit": [124, 126, 127, 128, 130, 148, 149, 157, 340, 947], "schemadict": [83, 124, 126, 127, 128, 129, 130, 134, 139, 141, 142, 144, 150, 151, 153, 156, 158, 340, 813, 881, 930, 947], "schemainitdatatyp": 952, "schindler": 1351, "scientif": [11, 37, 47, 340, 947], "scikit": [302, 340], "scipi": [528, 670, 831, 1145, 1253, 1342], "scope": [33, 34, 193, 842, 953, 1354, 1357, 1370], "score": [40, 264, 340], "script": [340, 343, 1342, 1347], "scroll": [40, 340], "sdiff": 561, "sdk": 178, "search": [245, 340, 570, 678, 688, 690, 702, 876, 905, 947, 1127, 1260, 1270, 1272, 1284, 1342], "search_sort": [831, 1342], "searchsortedsid": [662, 831, 1242, 1342], "searchstrategi": [166, 168, 169, 170, 171, 173], "season": [700, 701], "sec": [1366, 1373], "second": [37, 47, 149, 153, 156, 157, 162, 163, 164, 165, 230, 245, 272, 310, 340, 448, 451, 453, 454, 458, 459, 462, 464, 469, 476, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 700, 701, 714, 717, 772, 773, 774, 775, 817, 818, 819, 821, 831, 871, 876, 896, 947, 953, 1073, 1076, 1078, 1090, 1091, 1103, 1282, 1283, 1296, 1299, 1342, 1365, 1366, 1371, 1373], "second_part": [706, 707, 1288, 1289], "seconds_diff": 476, "secret": [155, 158], "section": [264, 340, 677, 685, 686, 689, 700, 701, 770, 771, 773, 774, 818, 819, 951, 1259, 1267, 1268, 1271, 1282, 1283], "secur": [432, 831, 858, 947], "see": [37, 39, 40, 42, 43, 46, 47, 48, 49, 50, 58, 59, 67, 134, 136, 141, 142, 143, 144, 145, 147, 149, 151, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 169, 173, 183, 195, 206, 221, 230, 244, 263, 264, 268, 340, 344, 403, 404, 406, 407, 419, 469, 494, 528, 578, 670, 677, 685, 686, 689, 691, 700, 701, 715, 770, 771, 773, 774, 805, 818, 819, 827, 831, 852, 867, 871, 893, 922, 947, 951, 953, 955, 1009, 1010, 1012, 1013, 1023, 1029, 1083, 1145, 1253, 1259, 1267, 1268, 1271, 1273, 1282, 1283, 1297, 1342, 1373], "seed": [160, 231, 276, 340, 508, 558, 630, 661, 666, 831, 1123, 1175, 1218, 1240, 1249, 1342], "seed_1": [231, 340, 508, 831, 1123, 1342], "seed_2": [231, 340, 508, 831, 1123, 1342], "seed_3": [231, 340, 508, 831, 1123, 1342], "seen": [469, 1083], "seen_group": 140, "select": [1, 8, 38, 47, 48, 49, 50, 52, 53, 54, 55, 96, 137, 139, 140, 141, 142, 143, 145, 147, 151, 153, 159, 168, 198, 199, 240, 241, 245, 249, 260, 263, 273, 279, 285, 287, 300, 306, 310, 317, 340, 348, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 374, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 396, 399, 400, 405, 408, 409, 410, 413, 417, 418, 420, 421, 422, 423, 429, 431, 433, 434, 435, 436, 439, 441, 442, 450, 456, 457, 459, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 482, 485, 487, 488, 489, 490, 491, 492, 496, 498, 500, 503, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 521, 527, 528, 529, 531, 532, 542, 543, 570, 573, 574, 575, 576, 578, 579, 580, 581, 582, 586, 598, 600, 602, 603, 605, 607, 609, 612, 613, 617, 618, 619, 620, 622, 623, 626, 628, 629, 630, 631, 632, 633, 636, 637, 638, 641, 652, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 690, 692, 697, 714, 725, 727, 728, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 746, 748, 750, 753, 754, 755, 758, 759, 761, 762, 763, 764, 767, 774, 775, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 794, 796, 798, 799, 801, 802, 805, 806, 810, 811, 812, 813, 814, 816, 820, 827, 831, 846, 852, 853, 855, 863, 876, 889, 890, 899, 903, 904, 906, 912, 919, 921, 922, 947, 953, 957, 1077, 1116, 1159, 1241, 1243, 1254, 1272, 1276, 1296, 1342, 1351, 1352, 1353, 1354, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372], "select_from": [168, 171, 173], "select_seq": [340, 947], "selector": [0, 40, 201, 210, 212, 213, 217, 255, 262, 264, 286, 295, 297, 302, 305, 307, 308, 340, 344, 469, 489, 586, 831, 843, 849, 859, 860, 861, 864, 885, 905, 911, 913, 947], "selectortyp": [40, 340, 953], "self": [1, 53, 54, 55, 56, 58, 59, 287, 318, 340, 810, 831, 852, 853, 863, 890, 903, 906, 919, 947, 962, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1030, 1035, 1108, 1112, 1126, 1193, 1195, 1208, 1212, 1213, 1219, 1222, 1223, 1241, 1243, 1244, 1255, 1330, 1333, 1342, 1353, 1354, 1355, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370], "semi": [135, 244, 340, 875, 947, 1358], "semigraph": 20, "sens": [139, 145, 147, 256, 310, 340, 620, 831, 886, 947], "sensit": [677, 686, 689, 700, 701, 1259, 1268, 1271, 1282, 1283], "sep": 135, "separ": [9, 10, 24, 27, 36, 37, 47, 133, 135, 138, 139, 140, 144, 153, 262, 264, 295, 304, 306, 340, 374, 377, 469, 543, 549, 579, 684, 760, 765, 766, 831, 912, 947, 981, 984, 1083, 1160, 1166, 1266, 1312, 1318, 1342, 1365], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [40, 46, 52, 83, 124, 126, 127, 128, 130, 135, 139, 140, 141, 144, 148, 149, 150, 153, 157, 167, 168, 169, 170, 171, 200, 208, 217, 218, 244, 245, 255, 260, 262, 263, 264, 275, 286, 295, 297, 302, 303, 307, 308, 309, 310, 340, 389, 410, 430, 502, 520, 570, 578, 624, 627, 634, 635, 673, 702, 712, 713, 727, 737, 754, 765, 766, 779, 781, 789, 790, 792, 793, 802, 805, 811, 831, 847, 857, 864, 875, 876, 885, 889, 905, 910, 913, 914, 947, 953, 996, 1041, 1042, 1108, 1187, 1216, 1222, 1223, 1284, 1310, 1342], "sequenti": [58, 59, 279, 315, 340, 852, 853, 863, 890, 899, 903, 918, 947], "ser": [1053, 1054, 1081], "seri": [0, 1, 11, 25, 40, 51, 53, 54, 55, 56, 60, 61, 70, 83, 91, 92, 101, 124, 126, 129, 131, 136, 164, 165, 169, 198, 211, 221, 223, 225, 227, 230, 231, 234, 235, 237, 239, 241, 251, 253, 258, 268, 270, 272, 276, 290, 293, 296, 298, 300, 301, 320, 340, 355, 366, 389, 393, 412, 413, 414, 415, 416, 418, 463, 492, 495, 498, 502, 503, 513, 518, 520, 521, 523, 524, 525, 526, 537, 543, 545, 570, 576, 578, 579, 630, 631, 632, 633, 634, 635, 640, 641, 652, 663, 665, 691, 702, 714, 715, 716, 717, 721, 725, 736, 741, 751, 755, 758, 765, 766, 770, 771, 773, 774, 779, 781, 785, 786, 789, 790, 791, 792, 793, 803, 805, 806, 809, 810, 813, 818, 819, 822, 831, 843, 867, 871, 893, 896, 924, 947, 1334, 1336, 1338, 1341, 1343, 1346, 1347, 1348, 1349, 1350, 1352, 1354, 1365, 1370, 1373], "serial": [44, 45, 209, 340, 432, 597, 831, 858, 947], "serializ": [136, 831], "serializationformat": [209, 280, 340, 432, 593, 831, 858, 900, 947], "seriesplot": [1342, 1347], "server": [38, 141, 142, 340], "servic": 32, "service_account": [143, 154], "service_account_json_absolute_path": [143, 154], "session": 141, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 58, 59, 64, 67, 68, 70, 125, 126, 127, 130, 136, 139, 140, 141, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 183, 193, 197, 205, 212, 213, 222, 225, 229, 231, 242, 244, 245, 253, 255, 274, 276, 278, 280, 285, 290, 295, 297, 298, 302, 304, 305, 307, 308, 309, 314, 340, 343, 352, 354, 376, 377, 389, 401, 403, 404, 406, 407, 419, 430, 462, 463, 480, 508, 520, 545, 547, 549, 558, 559, 560, 561, 562, 564, 570, 578, 579, 586, 587, 593, 624, 627, 634, 635, 641, 642, 644, 646, 648, 650, 653, 655, 657, 661, 666, 670, 671, 676, 692, 693, 700, 701, 704, 709, 710, 711, 712, 713, 714, 716, 717, 721, 742, 746, 748, 751, 755, 760, 770, 771, 772, 773, 774, 775, 785, 786, 789, 790, 791, 797, 803, 806, 807, 808, 809, 813, 815, 818, 819, 821, 822, 831, 843, 852, 853, 860, 861, 863, 870, 875, 876, 881, 885, 890, 898, 900, 903, 904, 911, 913, 914, 917, 930, 947, 960, 961, 983, 984, 996, 1000, 1007, 1009, 1010, 1012, 1013, 1029, 1041, 1076, 1077, 1094, 1114, 1123, 1135, 1142, 1162, 1164, 1166, 1175, 1176, 1177, 1178, 1179, 1181, 1187, 1195, 1216, 1222, 1223, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1240, 1241, 1242, 1249, 1253, 1254, 1258, 1274, 1275, 1282, 1283, 1286, 1291, 1292, 1293, 1296, 1298, 1299, 1303, 1323, 1331, 1342, 1361, 1369, 1373], "set_": 193, "set_auto_structifi": [278, 314, 340, 898, 917, 947], "set_decimal_separ": 27, "set_environ": 172, "set_except": [59, 853, 947], "set_fmt_float": 30, "set_fmt_str_length": [678, 688, 690, 702, 1260, 1272, 1284], "set_index": [230, 340, 871, 947], "set_legend": [40, 340], "set_sort": [272, 310, 340, 640, 831, 896, 947, 1342], "set_stat": 30, "set_streaming_chunk_s": [852, 947], "set_styl": [40, 340], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 52], "set_tbl_row": 193, "set_tbl_width_char": 702, "set_thousands_separ": 9, "set_titl": [40, 340], "set_verbos": 193, "setosa": [340, 343], "setup": 1373, "seventeen": [512, 831], "sever": [124, 126, 127, 128, 130, 148, 149, 157, 340, 892, 947, 1373], "sfu": 142, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 51, 52, 53, 54, 55, 56, 60, 61, 79, 83, 91, 92, 99, 118, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 148, 149, 153, 159, 166, 169, 173, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 276, 278, 280, 283, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 598, 599, 600, 601, 602, 603, 604, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 846, 847, 849, 850, 852, 853, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 957, 958, 959, 962, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1119, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1200, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1312, 1314, 1315, 1316, 1318, 1319, 1320, 1325, 1327, 1328, 1329, 1330, 1331, 1333, 1342, 1351, 1352, 1353, 1354, 1356, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1371], "share": [162, 163, 164, 165, 216, 340, 1101, 1342], "shawshank": 1351, "sheet": [40, 144, 150, 340], "sheet1": [40, 340], "sheet_id": [144, 150], "sheet_nam": [144, 150], "sheet_zoom": [40, 340], "sheetnam": [144, 150], "shift": [230, 340, 392, 433, 500, 540, 621, 759, 831, 871, 947, 1043, 1157, 1211, 1342], "short": [162, 164, 397, 1003], "shorten": [162, 164], "shorter": [139, 140, 153, 570, 785, 786], "shorthand": [340, 343, 1342, 1347], "should": [10, 38, 40, 46, 47, 48, 49, 50, 60, 124, 126, 128, 130, 134, 135, 144, 148, 149, 153, 157, 159, 166, 167, 169, 173, 210, 242, 244, 245, 249, 273, 274, 275, 286, 294, 295, 306, 326, 340, 350, 429, 432, 480, 486, 489, 523, 524, 542, 579, 593, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 662, 670, 673, 700, 701, 742, 754, 775, 777, 791, 793, 807, 808, 821, 827, 831, 852, 858, 859, 863, 875, 876, 881, 890, 900, 903, 905, 912, 947, 953, 1040, 1094, 1103, 1159, 1195, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1242, 1253, 1282, 1283, 1331, 1342, 1352], "show": [30, 40, 208, 213, 228, 247, 261, 340, 510, 594, 831, 857, 890, 903, 947, 1125, 1342, 1356, 1369], "show_graph": [247, 340, 947], "show_plot": [890, 947], "shrink": [284, 340, 665, 831, 1247, 1248, 1342], "shrink_dtyp": [831, 1342], "shrink_to_fit": [340, 1342], "shuffl": [160, 276, 302, 326, 340, 558, 661, 831, 930, 1175, 1240, 1342], "side": [40, 136, 230, 272, 340, 516, 559, 560, 561, 562, 640, 643, 645, 647, 649, 651, 654, 656, 658, 662, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 896, 947, 1130, 1176, 1177, 1178, 1179, 1242, 1342], "sign": [66, 67, 69, 74, 75, 76, 77, 78, 84, 459, 632, 700, 701, 724, 831, 953, 1073, 1220, 1282, 1283, 1306, 1342, 1363], "sign_x": 1364, "signed_integ": 953, "signific": [158, 242, 249, 340, 403, 404, 406, 407, 579, 660, 831, 1009, 1010, 1012, 1013, 1195, 1239, 1342], "significantli": [144, 249, 326, 340, 1195, 1342, 1373], "silenc": 99, "silent": [719, 1301], "similar": [36, 46, 138, 175, 223, 245, 283, 305, 307, 340, 384, 466, 469, 563, 620, 664, 729, 788, 821, 831, 867, 876, 902, 911, 913, 947, 991, 1080, 1083, 1180, 1246, 1342], "similarli": [40, 127, 230, 245, 272, 310, 340, 459, 464, 477, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 1073, 1078, 1091], "simpl": [40, 260, 340], "simpler": [953, 1282], "simpli": [153, 765, 779], "simplifi": [47, 48, 49, 50, 58, 59, 852, 853, 863, 890, 903, 947], "simplify_express": [47, 48, 49, 50, 58, 59, 852, 853, 863, 890, 903, 947], "sin": [831, 1342, 1363], "sinc": [39, 61, 66, 67, 84, 139, 140, 141, 143, 149, 153, 154, 156, 157, 166, 167, 168, 169, 173, 176, 199, 255, 298, 316, 321, 340, 444, 447, 480, 501, 578, 597, 634, 676, 684, 744, 753, 761, 781, 831, 846, 863, 885, 905, 919, 920, 925, 947, 1054, 1057, 1062, 1063, 1094, 1122, 1222, 1258, 1266, 1323, 1342], "sind": 1363, "sine": [359, 360, 578, 668, 669, 831, 966, 967, 1251, 1252, 1342, 1367], "singl": [40, 46, 52, 58, 59, 60, 71, 138, 139, 140, 141, 142, 143, 144, 151, 153, 154, 156, 167, 201, 210, 211, 212, 213, 218, 225, 231, 240, 249, 262, 273, 275, 286, 297, 298, 340, 373, 415, 419, 437, 459, 502, 505, 508, 539, 545, 578, 579, 631, 634, 636, 638, 673, 676, 691, 692, 696, 704, 715, 744, 754, 758, 759, 760, 786, 790, 792, 793, 811, 819, 827, 831, 849, 852, 859, 860, 861, 905, 947, 953, 980, 1021, 1029, 1047, 1073, 1108, 1123, 1156, 1162, 1219, 1222, 1224, 1226, 1258, 1273, 1274, 1278, 1286, 1297, 1317, 1323, 1342, 1353], "singlecolselector": 198, "singleindexselector": [198, 957], "sinh": [831, 1342], "sink_csv": 947, "sink_ipc": 947, "sink_ndjson": 947, "sink_parquet": 947, "site_id": [340, 344], "six": [662, 831], "size": [14, 46, 50, 134, 139, 140, 141, 166, 167, 168, 169, 173, 175, 216, 308, 340, 570, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 751, 785, 786, 807, 808, 831, 852, 947, 1101, 1224, 1234, 1342, 1373], "sizeunit": [216, 340, 398, 1004, 1101, 1342], "skew": [652, 831, 1234, 1342], "skewtest": [670, 831, 1253, 1342], "skip": [139, 140, 144, 151, 153, 158, 245, 308, 340, 876, 947, 1195, 1342, 1358], "skip_empty_lin": 144, "skip_lin": [139, 153], "skip_nul": [579, 831, 1195, 1342], "skip_row": [139, 140, 153], "skip_rows_after_head": [139, 140, 153], "sklearn": [302, 340], "slice": [47, 48, 49, 50, 53, 58, 59, 136, 216, 232, 243, 291, 340, 548, 568, 579, 590, 592, 641, 642, 644, 646, 648, 650, 653, 655, 657, 691, 715, 831, 852, 853, 863, 881, 890, 903, 947, 1101, 1124, 1165, 1185, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1273, 1297, 1314, 1342, 1365], "slice_pushdown": [47, 48, 49, 50, 58, 59, 852, 853, 863, 881, 890, 903, 947], "slide": [429, 831, 1040, 1342], "slightli": [47, 48, 49, 50, 95, 499, 831, 947, 1366], "slot": [429, 433, 540, 831, 1040, 1043, 1157, 1342], "slow": [111, 127, 130, 139, 140, 141, 144, 148, 149, 150, 153, 157, 158, 340, 429, 579, 641, 693, 831, 930, 947, 1040, 1228, 1275, 1342], "slower": [128, 130, 144, 229, 249, 262, 310, 326, 340, 579, 793, 831, 870, 930, 947, 1195, 1342], "small": [11, 142, 464, 947, 1373], "smaller": [46, 50, 216, 340, 947, 1101, 1342], "smallest": [200, 303, 340, 409, 410, 737, 831, 847, 910, 947, 1015, 1342, 1359, 1362], "smooth": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "snappi": [35, 46, 50, 340, 947], "snapshot": 155, "snapshot_id": 155, "snowflak": [141, 142], "snowflake_format": 186, "snowi": [700, 701], "so": [1, 40, 142, 144, 153, 175, 193, 228, 230, 246, 264, 272, 340, 366, 376, 432, 499, 516, 547, 570, 579, 640, 700, 701, 702, 709, 710, 711, 725, 831, 858, 871, 877, 896, 947, 953, 983, 1164, 1282, 1283, 1284, 1291, 1292, 1293], "softwar": [36, 138, 340], "solut": [38, 340], "some": [14, 30, 40, 46, 50, 51, 60, 92, 127, 139, 140, 141, 153, 197, 213, 264, 275, 298, 340, 344, 700, 701, 827, 892, 947, 1135, 1282, 1283, 1342, 1373], "some_account": [686, 1268], "some_t": 1372, "someth": [578, 831], "sometim": [775, 830], "somewher": [686, 1268], "sort": [52, 53, 200, 230, 245, 256, 263, 264, 272, 281, 303, 310, 323, 334, 340, 365, 409, 410, 486, 495, 579, 620, 640, 663, 673, 736, 737, 742, 744, 754, 770, 773, 793, 831, 847, 863, 871, 876, 886, 889, 890, 896, 901, 903, 910, 927, 938, 947, 953, 972, 1015, 1103, 1142, 1244, 1327, 1328, 1331, 1342, 1358, 1371, 1373], "sort_bi": 831, "sort_column": [264, 340], "sorted": [245, 340, 876, 947], "sorted_asc": [1114, 1342], "sorted_desc": [1114, 1342], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 831, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 947, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342, 1347, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1370], "source_ac": 131, "source_actor_id": 131, "source_alia": [39, 340], "source_cha": 131, "source_channel_id": 131, "south": 70, "space": [20, 230, 340, 469, 789, 790, 871, 947, 953, 1083], "spam": [252, 340, 686, 1268], "span": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "spanner": [340, 344], "spark": [46, 340], "sparklin": [40, 340], "speak": [670, 831, 1253, 1342], "spearman": 761, "speci": [340, 343], "special": [38, 139, 140, 142, 153, 302, 317, 340, 641, 686, 700, 701, 831, 921, 947, 1195, 1228, 1268, 1282, 1283, 1342], "specif": [1, 30, 39, 40, 42, 43, 48, 95, 124, 126, 128, 130, 135, 139, 142, 143, 144, 148, 149, 150, 154, 155, 157, 201, 242, 244, 292, 297, 340, 466, 469, 714, 716, 717, 721, 742, 831, 849, 875, 947, 952, 953, 1080, 1083, 1296, 1298, 1299, 1303, 1317, 1321, 1331, 1342, 1358, 1370, 1372, 1373], "specifi": [37, 38, 39, 40, 46, 47, 52, 96, 99, 102, 117, 120, 139, 144, 150, 151, 153, 158, 170, 179, 181, 182, 183, 200, 201, 216, 217, 220, 225, 229, 230, 244, 245, 262, 264, 272, 273, 275, 278, 279, 283, 286, 297, 303, 306, 314, 315, 319, 340, 410, 419, 462, 469, 485, 487, 488, 489, 494, 620, 633, 635, 642, 644, 646, 648, 650, 653, 655, 657, 664, 673, 729, 737, 754, 757, 758, 759, 760, 770, 771, 773, 774, 775, 777, 809, 813, 818, 819, 827, 831, 847, 849, 864, 866, 870, 871, 875, 876, 896, 898, 899, 902, 905, 910, 912, 917, 918, 923, 947, 953, 1029, 1076, 1083, 1101, 1102, 1104, 1105, 1111, 1223, 1246, 1321, 1342, 1358, 1365, 1372], "speed": [50, 281, 340, 579, 831, 901, 947, 951, 1373], "speedup": [52, 158, 242, 249, 340, 579, 831, 1195, 1342], "split": [1, 40, 46, 53, 243, 340, 684, 706, 707, 1266, 1288, 1289], "split_by_column_dtyp": 55, "split_inclus": 705, "splitfram": [1, 53], "spreadsheet": [36, 138, 144, 150, 264, 340], "spring": [700, 701], "sql": [0, 38, 114, 115, 123, 141, 142, 244, 283, 340, 384, 563, 664, 788, 811, 831, 843, 902, 947, 991, 1180, 1246, 1342, 1351, 1352, 1354, 1356, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1367, 1368, 1371, 1372], "sql_expr": 1370, "sqlalchemi": [38, 141, 161, 340], "sqlcontext": [287, 340, 810, 906, 947, 1369], "sqldw_format": 186, "sqlite": [38, 141, 340], "sqrt": [579, 670, 729, 831, 1195, 1253, 1342, 1363], "sqrt_x": 1364, "squar": [1, 56, 326, 528, 636, 674, 831, 930, 1145, 1224, 1256, 1342, 1364], "st": [32, 1373], "stabil": [231, 340, 508, 831, 1123, 1342], "stabl": [151, 195, 206, 208, 209, 231, 276, 280, 287, 340, 432, 508, 575, 593, 735, 831, 857, 858, 885, 900, 905, 906, 947, 955, 1123, 1325, 1342], "stack": [60, 234, 312, 340, 343, 1352], "stai": [578, 666, 831], "standalon": [167, 953], "standard": [7, 10, 40, 141, 288, 297, 302, 340, 450, 487, 653, 654, 670, 675, 694, 697, 812, 827, 831, 907, 947, 1060, 1099, 1104, 1207, 1253, 1257, 1276, 1279, 1342, 1359, 1373], "standardis": [40, 340], "start": [40, 137, 139, 140, 142, 144, 145, 147, 149, 150, 151, 153, 156, 157, 158, 175, 224, 229, 230, 247, 285, 310, 316, 317, 340, 393, 396, 399, 412, 416, 437, 445, 455, 460, 464, 477, 478, 489, 503, 546, 564, 639, 643, 645, 647, 649, 651, 654, 656, 658, 671, 677, 682, 686, 690, 699, 704, 708, 709, 711, 712, 715, 724, 751, 756, 765, 769, 770, 771, 772, 773, 774, 777, 779, 785, 786, 789, 790, 818, 819, 821, 827, 831, 869, 870, 871, 890, 904, 920, 921, 947, 953, 1005, 1017, 1022, 1047, 1049, 1052, 1055, 1057, 1058, 1064, 1066, 1068, 1069, 1072, 1074, 1078, 1082, 1091, 1092, 1117, 1163, 1181, 1227, 1254, 1264, 1268, 1272, 1281, 1286, 1290, 1291, 1293, 1297, 1306, 1342, 1358, 1365, 1373], "start_bi": [230, 340, 871, 947], "startbi": [230, 340, 871, 947], "starts_a": 1365, "starts_with": [53, 264, 340, 344, 393, 396, 412, 586, 677, 682, 810, 906, 947, 953, 1017, 1264, 1363], "starts_with_expr": 399, "starts_with_lit": 399, "startup": [297, 340], "stat": [528, 670, 831, 1145, 1253, 1342], "state": [4, 5, 107, 765, 843, 890, 947, 1370], "statement": [620, 821, 831, 1356, 1371], "static": [89, 930], "statist": [46, 50, 139, 140, 151, 156, 158, 208, 340, 487, 488, 528, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 670, 831, 857, 947, 1042, 1104, 1105, 1145, 1234, 1253, 1342], "std": [208, 340, 653, 654, 831, 857, 947, 1042, 1235, 1342], "std_dev": [40, 340], "stddev": 1363, "stddev_samp": 1359, "stdev": [40, 340, 1359], "stdev_samp": 1359, "stdout": [193, 228, 340, 595], "step": [308, 340, 499, 751, 785, 786, 831], "steve": [256, 340, 886, 947], "still": [141, 142], "stock": [340, 343], "stop": [134, 137, 139, 140, 145, 147, 149, 151, 153, 156, 157, 158, 643, 645, 647, 649, 651, 654, 656, 658, 831, 1049, 1052, 1057, 1058, 1064, 1066, 1068, 1072, 1078, 1082], "storag": [37, 39, 42, 46, 47, 48, 49, 50, 139, 143, 145, 147, 149, 151, 153, 154, 155, 156, 157, 158, 183, 340, 947], "storage_loc": [184, 187, 188], "storage_opt": [37, 39, 42, 46, 47, 48, 49, 50, 139, 143, 145, 147, 149, 151, 153, 154, 155, 156, 157, 158, 183, 340, 947], "store": [39, 155, 218, 242, 274, 340, 413, 638, 831, 1018, 1108, 1226, 1342], "store_id": [620, 831], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 67, 70, 71, 93, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 169, 172, 173, 174, 178, 179, 181, 182, 183, 184, 185, 187, 188, 193, 200, 201, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 221, 222, 223, 225, 226, 228, 229, 230, 232, 234, 237, 239, 240, 242, 244, 245, 246, 248, 250, 252, 254, 255, 256, 257, 260, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 276, 280, 281, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 349, 350, 351, 372, 377, 389, 393, 394, 395, 396, 399, 400, 405, 408, 410, 412, 413, 416, 424, 430, 432, 434, 442, 459, 463, 464, 466, 469, 477, 486, 489, 495, 497, 501, 502, 505, 513, 516, 537, 538, 547, 548, 549, 564, 568, 570, 579, 590, 592, 593, 594, 595, 597, 604, 605, 606, 607, 608, 609, 610, 611, 617, 620, 624, 627, 633, 634, 635, 637, 639, 640, 643, 645, 647, 649, 651, 654, 656, 658, 665, 672, 673, 725, 726, 727, 728, 737, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 827, 831, 838, 847, 849, 852, 853, 855, 857, 858, 859, 860, 861, 863, 864, 867, 870, 871, 873, 875, 876, 877, 885, 886, 889, 890, 893, 894, 895, 896, 900, 901, 903, 904, 905, 906, 910, 911, 912, 913, 914, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 959, 979, 984, 996, 1001, 1016, 1017, 1018, 1022, 1041, 1042, 1052, 1073, 1077, 1078, 1080, 1083, 1091, 1103, 1111, 1114, 1154, 1155, 1166, 1187, 1203, 1204, 1205, 1216, 1221, 1222, 1223, 1243, 1307, 1309, 1310, 1318, 1319, 1320, 1321, 1331, 1342, 1348, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1362, 1365, 1366, 1370, 1371, 1373], "str_date": 1365, "str_timestamp": 1365, "strategi": [37, 47, 52, 60, 139, 158, 166, 167, 168, 169, 170, 171, 173, 220, 230, 244, 245, 259, 309, 340, 494, 570, 579, 831, 866, 871, 875, 876, 892, 914, 947, 1111, 1187, 1342], "stream": [14, 42, 43, 47, 48, 49, 50, 58, 59, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 229, 244, 305, 340, 578, 831, 852, 853, 863, 870, 875, 881, 885, 890, 903, 905, 911, 947], "streamabl": [881, 885, 913, 947], "streaming_t": 190, "strftime": [95, 469, 1083, 1363, 1365], "strict": [126, 127, 130, 135, 201, 210, 269, 340, 394, 411, 469, 677, 680, 689, 714, 716, 717, 719, 721, 831, 849, 859, 894, 947, 953, 1000, 1016, 1083, 1259, 1262, 1271, 1296, 1298, 1299, 1301, 1303, 1342], "strictli": [37, 47, 51, 92, 245, 340, 876, 947], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 35, 37, 38, 39, 40, 44, 45, 47, 51, 64, 67, 70, 83, 90, 91, 92, 93, 95, 101, 119, 127, 131, 135, 139, 140, 141, 142, 153, 162, 163, 164, 165, 166, 173, 177, 200, 201, 204, 209, 214, 216, 223, 225, 228, 229, 230, 245, 262, 264, 272, 275, 277, 278, 279, 280, 286, 296, 297, 303, 304, 308, 310, 314, 315, 319, 340, 349, 372, 377, 394, 395, 396, 410, 412, 414, 415, 416, 419, 432, 459, 464, 466, 469, 477, 486, 489, 497, 501, 516, 549, 593, 595, 620, 624, 634, 635, 640, 643, 645, 647, 649, 651, 654, 656, 658, 673, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 737, 745, 747, 749, 754, 757, 758, 759, 760, 768, 770, 771, 773, 774, 780, 795, 797, 800, 809, 813, 815, 818, 819, 821, 827, 831, 843, 847, 849, 854, 858, 862, 863, 870, 871, 876, 896, 897, 898, 899, 900, 905, 910, 917, 918, 923, 947, 952, 953, 984, 1000, 1001, 1002, 1017, 1019, 1020, 1021, 1022, 1073, 1078, 1080, 1083, 1091, 1103, 1130, 1166, 1222, 1223, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1309, 1320, 1321, 1342, 1351, 1352, 1360, 1363, 1366, 1369, 1373], "stringcach": [91, 92, 244, 340, 843, 1019, 1023], "stringio": [148, 149, 501, 831], "strings_hex": 681, "strip": [28, 709, 710, 711, 712, 713, 1291, 1292, 1293, 1365], "strip_chars_end": [711, 713], "strip_chars_start": [710, 712], "strip_prefix": [711, 713], "strip_suffix": [710, 712], "strongli": [40, 175, 249, 273, 326, 340, 579, 831, 1195, 1342], "strpo": 1363, "strpost": 1365, "strptime": [272, 340, 463, 640, 831, 896, 947, 1077, 1363], "struct": [8, 71, 120, 131, 260, 278, 301, 306, 314, 340, 389, 430, 510, 570, 578, 579, 605, 607, 609, 627, 638, 639, 687, 693, 706, 707, 735, 742, 765, 766, 768, 792, 831, 898, 912, 917, 930, 947, 996, 1041, 1187, 1195, 1216, 1226, 1269, 1275, 1288, 1289, 1323, 1325, 1342], "struct_col": [725, 727, 728], "struct_seri": 930, "structarrai": [216, 340, 1101, 1342], "structfieldnotfounderror": 727, "structur": [40, 42, 43, 48, 101, 104, 118, 135, 218, 263, 275, 292, 298, 340, 624, 831, 889, 947, 1108, 1317, 1342, 1370], "student": [264, 340], "style": [7, 20, 40, 141, 264, 340], "sub": [326, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 391, 549, 556, 831, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 993, 994, 998, 1166, 1173], "subarrai": [368, 369, 975, 976], "subclass": [1, 340], "subexpress": [58, 59, 852, 853, 863, 890, 903, 947], "subinterv": 1359, "subject": [46, 264, 340], "sublist": [376, 535, 536, 538, 540, 544, 545, 546, 547, 548, 549, 550, 559, 564, 568, 570, 983, 1135, 1152, 1153, 1155, 1157, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1176, 1181, 1185, 1187, 1342], "subplan": [58, 59, 852, 853, 863, 890, 903, 947], "subsequ": [40, 151, 158, 267, 299, 340, 570, 810, 821, 863, 947, 1324, 1342, 1357], "subset": [212, 213, 260, 305, 340, 860, 861, 911, 947], "substr": [393, 396, 399, 412, 416, 677, 682, 689, 700, 701, 704, 705, 706, 707, 708, 953, 999, 1002, 1005, 1017, 1022, 1259, 1264, 1271, 1282, 1283, 1286, 1287, 1288, 1289, 1290, 1363], "subtl": [40, 340], "subtli": [499, 831], "subtract": [528, 730, 831, 1145, 1342], "succe": [139, 140, 153], "success": [679, 686, 1261, 1268], "successfulli": [852, 863, 890, 903, 947], "suffix": [244, 245, 246, 278, 314, 319, 340, 351, 396, 410, 412, 523, 524, 525, 526, 584, 604, 606, 609, 610, 611, 637, 682, 710, 713, 737, 831, 875, 876, 877, 898, 917, 919, 923, 947, 953, 1002, 1017, 1264, 1295], "suffix_field": [605, 607], "sugar": [309, 340, 634, 635, 702, 746, 748, 750, 762, 764, 767, 777, 782, 783, 784, 794, 796, 798, 799, 801, 803, 804, 809, 812, 814, 816, 820, 822, 831, 914, 947, 1222, 1223, 1256, 1284, 1342], "suggest": [340, 343, 1342, 1347], "suitabl": [52, 60, 141, 167, 249, 340, 579, 662, 831, 1195, 1242, 1342], "sum": [40, 136, 216, 223, 229, 230, 240, 264, 272, 290, 319, 340, 427, 428, 432, 482, 495, 570, 579, 590, 592, 593, 594, 595, 596, 634, 635, 640, 655, 656, 744, 746, 758, 765, 767, 768, 779, 793, 805, 815, 831, 852, 853, 858, 863, 870, 871, 888, 890, 892, 896, 900, 903, 923, 947, 953, 1038, 1039, 1097, 1101, 1236, 1342, 1351, 1358, 1360, 1363, 1370], "sum_": [670, 831, 1253, 1342], "sum_a": [272, 340, 640, 831, 896, 947], "sum_horizont": [52, 340, 814], "summari": [208, 340, 857, 947, 1042, 1342, 1358], "summer": [700, 701], "sun": [340, 343, 714, 1296], "sundai": [230, 340, 437, 466, 469, 479, 756, 871, 947, 1047, 1080, 1083, 1093], "sunni": [700, 701, 1282, 1283], "supercast": [223, 340], "supertyp": [60, 136, 220, 298, 302, 340, 355, 759, 831, 866, 947, 1342], "suppli": [38, 40, 124, 126, 127, 128, 130, 141, 148, 149, 157, 221, 268, 273, 297, 340, 495, 624, 831, 867, 893, 947, 1321, 1342], "support": [1, 37, 38, 39, 40, 42, 46, 47, 48, 49, 50, 60, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 143, 144, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 166, 170, 173, 183, 193, 242, 243, 244, 245, 274, 275, 285, 286, 294, 299, 302, 340, 469, 486, 564, 620, 634, 635, 671, 673, 678, 688, 690, 691, 700, 701, 702, 704, 715, 827, 831, 837, 852, 853, 863, 875, 876, 890, 903, 904, 905, 947, 953, 1083, 1103, 1181, 1222, 1223, 1254, 1260, 1270, 1272, 1273, 1282, 1283, 1284, 1286, 1297, 1324, 1326, 1342, 1346, 1360, 1365, 1366, 1368, 1369, 1370], "supportsinterchang": 125, "suppos": [198, 264, 340, 579, 831, 1195, 1342], "sure": [60, 124, 125, 129, 136, 139, 140, 143, 145, 147, 151, 154, 267, 340, 831], "surreal_query_to_fram": 141, "surrealdb": 141, "surrealql": 141, "suscept": 947, "swap": [894, 947], "swim": 760, "switch": [438, 852, 853, 863, 890, 903, 947, 1048], "sy": 193, "sydnei": 772, "symbol": [36, 37, 47, 340, 831, 947], "symmetr": [561, 953, 1178], "symmetri": [855, 862, 897, 916, 947], "sync": [47, 48, 49, 50, 947], "sync_on_clos": [47, 48, 49, 50, 947], "synchron": [141, 941], "synconclosemethod": [47, 48, 49, 50, 947], "syntact": [309, 340, 634, 635, 702, 746, 748, 750, 762, 764, 767, 777, 782, 783, 784, 794, 796, 798, 799, 801, 803, 804, 809, 812, 814, 816, 820, 822, 831, 914, 947, 1222, 1223, 1256, 1284, 1342], "syntax": [40, 115, 221, 249, 260, 268, 340, 594, 677, 685, 686, 689, 700, 701, 785, 786, 827, 867, 893, 903, 947, 1259, 1267, 1268, 1271, 1282, 1283, 1342, 1366, 1368], "system": [36, 139, 140, 340, 442, 852, 863, 890, 903, 947, 1052], "t": [36, 37, 39, 47, 60, 138, 139, 144, 150, 153, 230, 245, 249, 263, 305, 308, 340, 429, 438, 446, 463, 469, 482, 485, 487, 488, 542, 579, 620, 624, 685, 689, 700, 701, 711, 714, 717, 722, 821, 831, 871, 876, 889, 911, 947, 953, 1040, 1077, 1083, 1097, 1102, 1104, 1105, 1159, 1195, 1267, 1271, 1282, 1283, 1292, 1293, 1296, 1299, 1304, 1342, 1354, 1355, 1365], "t_": [306, 340, 486, 831, 912, 947, 1103, 1342], "t_0": [272, 340, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 831, 896, 947, 1103, 1342], "t_1": [272, 340, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 831, 896, 947, 1103, 1342], "t_a": [306, 340, 912, 947], "t_b": [306, 340, 912, 947], "t_c": [306, 340, 912, 947], "t_d": [306, 340, 912, 947], "t_i": [486, 831, 1103, 1342], "t_id": [246, 340, 877, 947], "t_n": [272, 340, 640, 643, 645, 647, 649, 651, 654, 656, 658, 831, 896, 947], "t_struct": [306, 340, 912, 947], "tab_spann": [340, 344], "tab_stub": [340, 344], "tab_styl": [340, 344], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 38, 39, 40, 41, 124, 131, 135, 143, 144, 150, 154, 155, 179, 182, 183, 185, 188, 189, 244, 246, 264, 287, 292, 299, 308, 309, 340, 344, 810, 843, 875, 877, 906, 914, 947, 1352, 1353, 1354, 1355, 1357, 1358, 1369, 1370], "table_id": 188, "table_nam": [38, 40, 144, 179, 183, 287, 340, 906, 947], "table_path": [39, 143, 154, 155, 340], "table_styl": [40, 340], "table_typ": 188, "tableinfo": [179, 182, 191], "tablemerg": [39, 340], "tablenotfounderror": [39, 340], "tables_scale_100": [133, 140], "tabletyp": [188, 191], "tail": [228, 232, 340, 355, 670, 831, 947, 1124, 1253, 1342], "take": [40, 135, 144, 150, 169, 170, 193, 223, 224, 230, 253, 256, 263, 264, 269, 340, 365, 437, 459, 495, 502, 503, 545, 546, 578, 605, 607, 609, 673, 754, 756, 776, 778, 787, 831, 869, 871, 886, 892, 894, 947, 972, 1047, 1073, 1116, 1117, 1162, 1163, 1333, 1342, 1360], "taken": [564, 704, 1181, 1286], "talkin": [722, 1304], "tan": [831, 1342, 1363], "tand": 1363, "tangent": [361, 362, 733, 734, 831, 968, 969, 1315, 1316, 1342, 1367], "tanh": [264, 340, 831, 1342], "target": [1, 38, 39, 40, 41, 57, 144, 302, 340, 685, 700, 701, 714, 716, 717, 953, 1267, 1282, 1283, 1296, 1298, 1299, 1365], "target_alia": [39, 340], "target_t": [38, 340], "task": [59, 853, 947], "tau": [485, 486, 831, 1102, 1103, 1342], "tb": [162, 164, 216, 340, 398, 1101, 1342], "tbl": [133, 140, 1372], "tbl0": 1357, "tbl1": [1355, 1357], "tbl2": [1355, 1357], "tbl3": 1355, "tbl4": 1355, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 193], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 208, 340, 857, 947], "tbl_width_char": 775, "td": 469, "td1": 953, "td2": 953, "td3": 953, "tdf": [263, 340], "technic": 827, "tell": [678, 702, 1260, 1284], "tempor": [95, 201, 230, 242, 272, 274, 275, 294, 340, 419, 469, 516, 640, 643, 645, 647, 649, 651, 654, 656, 658, 789, 831, 843, 849, 871, 896, 947, 953, 1029, 1083, 1130, 1342, 1363, 1369], "temporalliter": [419, 789, 790, 831, 1029, 1062, 1063, 1342], "temporari": [38, 340], "temporarili": [175, 193, 230, 272, 340, 640, 831, 871, 896, 947], "tenant": 33, "tenant_id": 33, "tend": [162, 164], "tensor": [302, 340, 1326, 1342], "tensordataset": [302, 340], "term": [485, 487, 488, 691, 704, 715, 831, 1102, 1104, 1105, 1273, 1286, 1297, 1342], "termin": [37, 47, 340, 947], "terminologi": 187, "test": [0, 38, 141, 142, 144, 150, 215, 264, 340, 843, 1100, 1342, 1365], "test1": 1357, "test2": 1357, "test3": 1357, "test_1": [264, 340], "test_1_math": [264, 340], "test_1_phys": [264, 340], "test_2": [264, 340], "test_2_math": [264, 340], "test_2_phys": [264, 340], "test_data": 141, "test_df_height": 169, "test_func": 792, "test_lf": [919, 947], "test_miscellan": 1373, "test_numer": 1373, "test_price_calcul": 1373, "test_series_len": 173, "test_tabl": 142, "test_unique_xyz": 167, "testdb": 142, "testing1234": 1357, "text": [138, 141, 186, 414, 415, 683, 691, 695, 696, 697, 700, 701, 703, 704, 715, 811, 892, 947, 1020, 1021, 1273, 1277, 1278, 1285, 1286, 1297, 1357, 1373], "text1": 701, "text2": 701, "textclaus": 141, "texttt": [670, 831, 1253, 1342], "th": [224, 340, 503, 546, 559, 670, 691, 715, 831, 869, 947, 1117, 1163, 1176, 1253, 1273, 1297, 1342], "than": [40, 47, 48, 49, 50, 58, 59, 98, 121, 128, 130, 139, 140, 141, 144, 150, 153, 159, 202, 229, 242, 244, 245, 249, 262, 273, 274, 276, 308, 326, 340, 414, 499, 501, 504, 506, 516, 530, 558, 577, 578, 579, 595, 627, 639, 661, 670, 691, 695, 698, 699, 707, 715, 724, 761, 793, 831, 852, 870, 875, 876, 930, 947, 1020, 1130, 1175, 1195, 1216, 1227, 1240, 1253, 1273, 1277, 1280, 1281, 1289, 1297, 1306, 1323, 1342, 1373], "the_aws_access_key_id": [39, 143, 154, 155, 340], "the_aws_region": [39, 340], "the_aws_secret_access_kei": [39, 143, 154, 155, 340], "thei": [37, 40, 47, 51, 59, 60, 91, 92, 127, 136, 153, 193, 245, 247, 275, 340, 620, 702, 710, 711, 831, 852, 863, 876, 890, 903, 947, 951, 953, 1284], "them": [59, 124, 126, 127, 128, 130, 141, 142, 144, 148, 149, 150, 151, 153, 156, 157, 158, 193, 217, 218, 230, 245, 256, 264, 272, 302, 310, 340, 377, 486, 516, 549, 612, 613, 620, 640, 759, 770, 771, 773, 774, 818, 819, 831, 853, 864, 871, 876, 886, 896, 947, 953, 984, 1103, 1108, 1166, 1204, 1205, 1342, 1360, 1370], "therebi": [153, 156, 157], "therefor": [139, 145, 149, 151, 216, 340, 579, 821, 831, 1101, 1342], "theta": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 58, 59, 60, 66, 67, 68, 69, 70, 74, 84, 92, 99, 124, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 187, 189, 193, 195, 197, 198, 199, 200, 203, 204, 206, 208, 209, 212, 213, 216, 218, 222, 223, 228, 229, 230, 231, 235, 237, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 257, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 285, 287, 288, 289, 292, 294, 297, 298, 299, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 321, 326, 339, 340, 343, 344, 352, 355, 356, 365, 377, 383, 384, 385, 390, 409, 410, 413, 419, 429, 430, 432, 438, 439, 450, 456, 457, 459, 463, 466, 469, 480, 484, 491, 501, 508, 510, 513, 514, 516, 520, 542, 543, 549, 558, 559, 560, 561, 562, 563, 565, 570, 571, 575, 576, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 597, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 620, 627, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 663, 664, 665, 666, 671, 672, 673, 676, 678, 685, 688, 690, 692, 693, 697, 698, 699, 702, 709, 710, 711, 712, 713, 718, 722, 724, 726, 729, 736, 737, 739, 740, 741, 742, 746, 750, 758, 759, 762, 764, 765, 778, 779, 781, 783, 784, 787, 788, 789, 790, 793, 796, 798, 801, 803, 809, 812, 816, 820, 821, 822, 827, 831, 843, 846, 847, 848, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 867, 870, 871, 873, 875, 876, 877, 879, 881, 885, 886, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 913, 914, 916, 917, 918, 919, 920, 921, 922, 925, 930, 944, 945, 946, 947, 951, 952, 953, 955, 962, 963, 972, 984, 990, 991, 992, 997, 1015, 1018, 1023, 1024, 1029, 1030, 1040, 1041, 1048, 1049, 1051, 1060, 1070, 1071, 1073, 1077, 1080, 1083, 1094, 1096, 1099, 1101, 1107, 1108, 1117, 1119, 1123, 1125, 1135, 1144, 1159, 1160, 1166, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1188, 1193, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1207, 1210, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1254, 1255, 1257, 1258, 1260, 1267, 1270, 1272, 1274, 1275, 1279, 1280, 1281, 1284, 1291, 1292, 1293, 1300, 1304, 1306, 1307, 1309, 1312, 1313, 1317, 1319, 1321, 1322, 1323, 1324, 1326, 1327, 1328, 1330, 1331, 1332, 1342, 1347, 1351, 1352, 1353, 1357, 1365, 1368, 1369, 1370, 1371, 1373], "thing": [153, 160], "think": [456, 457, 1070, 1071], "third": [578, 831], "thoma": [256, 340, 886, 947], "those": [5, 30, 40, 139, 144, 221, 268, 275, 299, 309, 340, 499, 630, 685, 793, 831, 893, 914, 947, 953, 1218, 1267, 1324, 1342], "though": [38, 141, 230, 340, 827, 871, 947], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 37, 47, 59, 133, 139, 140, 142, 175, 176, 286, 340, 542, 579, 673, 754, 831, 853, 905, 947, 992, 1159, 1182, 1255, 1342], "thread_loc": [579, 831], "thread_pool_s": 176, "threadpool": 58, "three": [40, 198, 272, 301, 340, 430, 627, 640, 662, 691, 700, 715, 831, 896, 947, 996, 1041, 1187, 1216, 1273, 1283, 1297, 1342], "threshold": [278, 340, 898, 947], "through": [141, 827, 953, 1342, 1357], "throughout": 193, "throw": [39, 126, 127, 130, 210, 269, 340, 693, 694, 849, 859, 894, 947, 1275, 1276, 1342], "thu": [40, 218, 340, 343, 761, 951, 1108, 1342], "thursdai": [230, 340, 437, 756, 871, 947, 1047], "ti": [630, 831, 1218, 1342], "time": [12, 37, 39, 42, 46, 47, 48, 49, 50, 57, 58, 59, 67, 69, 108, 143, 149, 151, 153, 154, 156, 157, 158, 169, 170, 173, 183, 208, 218, 230, 245, 246, 272, 310, 340, 372, 409, 410, 438, 439, 441, 442, 443, 446, 447, 456, 457, 459, 462, 463, 464, 466, 468, 469, 477, 480, 486, 537, 538, 570, 639, 640, 643, 645, 647, 649, 651, 654, 656, 658, 666, 714, 717, 721, 735, 736, 737, 759, 760, 770, 771, 772, 773, 774, 775, 781, 789, 818, 819, 831, 852, 853, 857, 871, 876, 877, 890, 896, 947, 953, 979, 1015, 1048, 1049, 1051, 1052, 1056, 1057, 1073, 1076, 1077, 1078, 1080, 1082, 1083, 1091, 1094, 1103, 1108, 1154, 1155, 1227, 1249, 1296, 1299, 1303, 1325, 1327, 1342, 1351, 1357, 1366, 1373], "time_column": [310, 340], "time_format": [37, 47, 340, 947], "time_unit": [67, 69, 439, 441, 447, 468, 480, 717, 772, 773, 774, 775, 781, 952, 953, 1049, 1051, 1057, 1082, 1094, 1299], "time_unit_m": [439, 1049], "time_unit_n": [439, 1049], "time_unit_u": 480, "time_zon": [67, 442, 444, 463, 717, 772, 773, 774, 952, 953, 1048, 1052, 1056, 1077, 1299], "timedelta": [230, 245, 272, 310, 340, 459, 464, 469, 477, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 770, 771, 773, 774, 818, 819, 831, 871, 876, 896, 947, 952, 953, 1061, 1067, 1073, 1078, 1091, 1103, 1204, 1205, 1257, 1332, 1342], "timeout": [59, 853, 947], "timestamp": [131, 143, 154, 230, 340, 463, 464, 477, 781, 871, 947, 1077, 1078, 1091, 1363], "timestamp_m": 468, "timestamp_n": 1082, "timestamp_u": [468, 1082], "timestep": 781, "timeunit": [37, 47, 67, 69, 340, 439, 441, 468, 480, 717, 772, 773, 774, 775, 947, 953, 1049, 1051, 1082, 1094, 1299], "timezon": [67, 143, 154, 444, 953, 1366], "tip": [579, 831], "titl": [40, 340, 343, 1342, 1347, 1351], "titlecas": [722, 1304], "tm": [441, 469, 953, 1366], "to_arrow": [243, 340, 1323, 1342, 1370], "to_batch": [243, 340], "to_dict": [201, 275, 340, 849, 947, 953], "to_dummi": [297, 302, 340, 1342], "to_fram": [413, 447, 464, 468, 477, 714, 952, 1041, 1216, 1241, 1243, 1288, 1289, 1296, 1342, 1347], "to_init_repr": [131, 340, 1342], "to_jax": [302, 340, 1342], "to_list": [131, 272, 340, 1259, 1271, 1342], "to_lowercas": 611, "to_numpi": [297, 302, 340, 578, 831, 1342], "to_panda": [340, 1342], "to_phys": [831, 1023, 1342], "to_python": 952, "to_seri": [53, 225, 340, 714, 755, 806, 1296, 1365], "to_sql": [38, 340], "to_str": [466, 1080], "to_struct": [340, 686], "to_torch": [297, 340, 1342], "to_uppercas": [351, 610, 687, 831], "togeth": 1365, "token": [37, 42, 46, 47, 48, 49, 50, 149, 151, 153, 155, 156, 157, 158, 178, 183, 340, 947], "tokyo": [131, 953], "tokyo_tz": 953, "toler": [162, 163, 164, 165, 245, 340, 876, 947], "tone": [40, 340], "tonight": [678, 702, 1260, 1284], "too": [14, 264, 340, 397, 620, 831, 947, 1003], "tooltip": [340, 343, 1342, 1347], "toomanyrowsreturnederror": [273, 340], "top": [40, 287, 303, 340, 343, 737, 831, 906, 910, 947, 1342, 1347, 1370], "top_col": [40, 340], "top_k": [200, 340, 409, 410, 737, 831, 847, 947, 1015, 1342], "top_k_bi": [409, 410, 736, 831], "top_row": [40, 340], "tor_id": 131, "torch": [161, 302, 340, 1326, 1342], "torchexporttyp": [302, 340], "total": [40, 216, 321, 340, 470, 471, 472, 473, 474, 475, 476, 531, 551, 831, 925, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1101, 1148, 1168, 1342], "total_gross": 1351, "toward": [321, 531, 551, 831, 925, 1148, 1168, 1342], "tp": [1, 55], "tpu": [297, 340, 1321, 1342], "tr15": [697, 1279], "trace": 70, "traceback": [162, 163, 164, 165, 298, 340, 635, 831, 1223, 1323, 1342], "tracebacktyp": 1370, "track": [143, 154, 155, 249, 340, 570, 1370], "trail": [28, 228, 340, 709, 710, 1291, 1292], "train": [302, 340], "train_lf": [919, 947], "transfer": 142, "transferencod": [394, 395, 680, 681, 1000, 1001, 1262, 1263], "transform": [249, 287, 340, 578, 722, 810, 831, 906, 947, 1304], "transform_dens": [1342, 1347], "transit": [221, 268, 340, 867, 893, 947], "translat": 141, "transpar": [852, 863, 890, 903, 947], "transpos": [264, 340], "travel": [143, 154], "travers": [642, 644, 646, 648, 650, 653, 655, 657, 831, 1229, 1230, 1232, 1235, 1236, 1237, 1342], "treat": [139, 140, 153, 195, 486, 520, 677, 679, 689, 700, 701, 821, 831, 955, 1103, 1135, 1259, 1261, 1271, 1282, 1283, 1342], "tree": [595, 863, 947], "tree_format": [863, 947], "trend": [40, 340], "tri": [249, 340], "triangl": [326, 930], "trigger": [39, 136, 247, 299, 340, 831, 1324, 1342], "trigonometri": [1363, 1369], "trim": [131, 1365], "trim_decimal_zero": 28, "trip": 141, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 38, 39, 40, 46, 47, 48, 49, 50, 58, 59, 60, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 139, 140, 141, 143, 144, 145, 147, 150, 151, 153, 154, 156, 158, 159, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 178, 193, 197, 201, 202, 203, 208, 210, 215, 220, 221, 223, 225, 227, 228, 229, 230, 235, 237, 238, 239, 242, 244, 245, 246, 247, 252, 253, 259, 260, 262, 264, 265, 268, 269, 273, 274, 275, 276, 278, 286, 287, 290, 293, 295, 297, 298, 299, 302, 304, 305, 306, 308, 309, 310, 314, 320, 322, 324, 327, 328, 329, 330, 331, 332, 333, 340, 343, 350, 351, 352, 353, 354, 355, 366, 368, 369, 372, 376, 377, 385, 389, 393, 394, 396, 399, 400, 405, 408, 410, 411, 412, 416, 424, 425, 426, 427, 428, 430, 437, 439, 442, 445, 447, 449, 456, 457, 459, 460, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 488, 495, 502, 504, 505, 506, 507, 510, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 538, 545, 547, 549, 565, 570, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 614, 615, 617, 619, 622, 623, 627, 632, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 665, 666, 670, 672, 673, 676, 677, 678, 679, 680, 682, 688, 689, 690, 692, 693, 694, 700, 701, 705, 706, 708, 714, 716, 717, 719, 721, 725, 727, 728, 737, 739, 742, 745, 746, 747, 748, 749, 751, 754, 755, 756, 761, 770, 773, 779, 785, 789, 790, 793, 797, 803, 806, 809, 810, 813, 815, 818, 821, 822, 831, 849, 850, 851, 852, 853, 857, 859, 863, 866, 867, 870, 871, 875, 876, 877, 879, 881, 885, 890, 893, 894, 898, 903, 905, 906, 911, 912, 913, 914, 917, 922, 924, 926, 928, 931, 932, 933, 934, 935, 936, 937, 946, 947, 952, 953, 960, 961, 973, 975, 976, 979, 983, 984, 992, 999, 1000, 1002, 1005, 1016, 1017, 1019, 1022, 1024, 1027, 1028, 1041, 1047, 1048, 1049, 1052, 1055, 1056, 1057, 1058, 1059, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1097, 1099, 1100, 1102, 1104, 1105, 1112, 1121, 1125, 1127, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1150, 1151, 1155, 1162, 1164, 1166, 1182, 1195, 1201, 1207, 1209, 1212, 1213, 1216, 1219, 1220, 1234, 1253, 1255, 1258, 1259, 1260, 1261, 1262, 1264, 1270, 1271, 1272, 1274, 1275, 1276, 1282, 1283, 1287, 1288, 1290, 1296, 1298, 1299, 1301, 1303, 1318, 1323, 1324, 1331, 1333, 1342, 1347, 1351, 1352, 1354, 1356, 1360, 1362, 1365, 1370, 1373], "truediv": [499, 831], "truncat": [20, 131, 139, 140, 153, 228, 230, 242, 274, 275, 294, 340, 871, 890, 947, 1369], "truncate_nod": [890, 947], "truncate_ragged_lin": [139, 140, 153], "truncate_str": 477, "truncate_td": 477, "trust": [432, 831, 858, 947], "try": [37, 42, 46, 47, 48, 49, 50, 58, 59, 118, 139, 140, 145, 149, 151, 153, 156, 157, 158, 183, 340, 852, 853, 863, 890, 903, 947], "try_cast": 1363, "try_parse_d": [133, 139, 140, 153], "try_parse_hive_d": [151, 156, 158], "ts_local": [463, 1077], "tseri": [456, 457, 1070, 1071], "tstamp": 953, "tstamp_tokyo": 953, "tstamp_utc": 953, "tue": [340, 343], "tuesdai": [230, 340, 871, 947], "tupl": [40, 61, 142, 144, 150, 198, 242, 249, 262, 273, 274, 275, 282, 302, 318, 340, 594, 636, 831, 890, 903, 947, 952, 953, 1224, 1245, 1342], "turn": [8, 47, 48, 49, 50, 58, 59, 139, 140, 153, 244, 245, 340, 852, 853, 863, 875, 876, 881, 890, 947], "twice": [40, 340], "two": [40, 51, 91, 92, 126, 128, 130, 142, 198, 221, 223, 245, 246, 255, 256, 268, 274, 301, 307, 320, 326, 340, 344, 350, 434, 441, 499, 502, 505, 570, 627, 672, 752, 753, 759, 761, 763, 770, 773, 807, 808, 810, 831, 867, 876, 877, 885, 886, 893, 913, 924, 930, 947, 953, 996, 1044, 1051, 1187, 1216, 1342, 1357, 1358, 1359, 1362, 1371], "two_a": 1370, "tworld": [711, 1291, 1293], "txt": [1, 12, 153, 677, 689, 1271, 1365], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 47, 48, 49, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 124, 126, 127, 128, 129, 130, 132, 139, 140, 141, 143, 144, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 195, 198, 204, 214, 217, 223, 228, 230, 231, 243, 244, 249, 272, 277, 280, 292, 297, 298, 301, 302, 305, 317, 340, 352, 354, 357, 358, 359, 360, 361, 362, 365, 370, 371, 372, 374, 377, 388, 389, 393, 394, 395, 396, 397, 398, 399, 411, 413, 414, 415, 419, 420, 421, 422, 423, 430, 431, 437, 438, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 489, 491, 502, 505, 508, 516, 517, 518, 519, 520, 521, 522, 531, 535, 536, 538, 543, 549, 551, 569, 570, 578, 579, 593, 627, 629, 633, 634, 635, 636, 638, 639, 640, 643, 645, 647, 649, 651, 654, 656, 658, 667, 668, 669, 676, 679, 680, 681, 684, 685, 686, 687, 690, 691, 692, 694, 695, 696, 704, 705, 706, 707, 714, 715, 719, 733, 734, 735, 742, 751, 759, 762, 769, 770, 771, 772, 773, 774, 775, 777, 785, 786, 788, 789, 790, 791, 792, 793, 803, 806, 817, 818, 819, 822, 827, 831, 843, 852, 853, 862, 863, 864, 871, 875, 890, 896, 897, 903, 911, 921, 947, 952, 955, 960, 961, 973, 975, 976, 977, 978, 979, 981, 983, 984, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1016, 1018, 1020, 1021, 1029, 1041, 1042, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1100, 1103, 1107, 1123, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1150, 1151, 1152, 1153, 1155, 1160, 1166, 1168, 1186, 1187, 1209, 1216, 1222, 1223, 1224, 1226, 1227, 1248, 1250, 1258, 1259, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1272, 1273, 1274, 1276, 1277, 1278, 1286, 1287, 1288, 1289, 1296, 1297, 1301, 1322, 1323, 1325, 1333, 1342, 1351, 1358, 1363, 1365, 1369, 1370], "type_coercion": [47, 48, 49, 50, 58, 59, 852, 853, 863, 890, 903, 947], "type_json": 185, "type_nam": 185, "type_text": 185, "typeerror": [39, 340], "typenam": [40, 340], "typic": [127, 141, 158, 249, 340, 446, 667, 831, 953, 1056, 1195, 1250, 1342], "tz": [717, 1299], "tzinfo": [67, 143, 154, 953], "u": [40, 67, 69, 158, 171, 245, 340, 439, 441, 447, 468, 480, 714, 717, 747, 749, 772, 773, 774, 775, 781, 876, 947, 952, 953, 1049, 1051, 1057, 1082, 1094, 1296, 1299, 1355, 1366], "u1": [298, 340], "u16": [153, 1368, 1373], "u32": [12, 141, 199, 201, 207, 261, 316, 317, 321, 325, 331, 333, 340, 350, 356, 363, 364, 365, 366, 367, 370, 371, 373, 382, 398, 414, 415, 423, 424, 510, 512, 531, 535, 536, 539, 551, 556, 602, 618, 630, 638, 639, 643, 645, 647, 649, 651, 654, 656, 658, 662, 679, 689, 690, 695, 696, 697, 735, 740, 742, 746, 750, 754, 755, 762, 764, 785, 788, 801, 831, 846, 849, 856, 888, 920, 921, 925, 929, 935, 937, 947, 953, 972, 973, 974, 977, 978, 980, 989, 1016, 1020, 1021, 1023, 1035, 1125, 1152, 1153, 1156, 1168, 1173, 1218, 1226, 1227, 1242, 1261, 1271, 1272, 1277, 1278, 1325, 1329, 1331, 1342, 1351, 1359, 1360, 1361, 1365, 1370], "u64": [231, 317, 340, 508, 632, 831, 890, 921, 947, 953, 1123, 1220, 1342], "u8": [201, 295, 296, 308, 340, 635, 745, 831, 849, 947, 953, 1223, 1318, 1342, 1373], "udf": [175, 249, 263, 326, 340, 432, 579, 624, 793, 831, 858, 889, 930, 947, 1195, 1342], "ufunc": 98, "uid": 141, "uint": 1373, "uint16": [153, 427, 428, 731, 831, 953, 1038, 1039, 1313, 1323, 1326, 1342], "uint2": 1368, "uint32": [132, 161, 201, 216, 272, 317, 340, 365, 370, 371, 398, 414, 415, 423, 486, 502, 505, 531, 535, 536, 551, 633, 638, 639, 640, 643, 645, 647, 649, 651, 654, 656, 658, 679, 690, 695, 696, 735, 762, 785, 788, 831, 849, 896, 921, 947, 953, 973, 977, 978, 1004, 1016, 1020, 1021, 1101, 1103, 1152, 1153, 1168, 1226, 1227, 1261, 1272, 1277, 1278, 1325, 1326, 1342], "uint4": 1370, "uint64": [132, 231, 272, 317, 340, 370, 371, 486, 508, 535, 536, 632, 640, 643, 645, 647, 649, 651, 654, 656, 658, 831, 896, 921, 947, 953, 977, 978, 1103, 1123, 1152, 1153, 1220, 1326, 1342], "uint8": [141, 201, 296, 297, 298, 308, 340, 427, 428, 635, 731, 745, 831, 849, 947, 952, 953, 1038, 1039, 1223, 1313, 1326, 1342, 1373], "uint8_pair": 1373, "uit": [704, 1286], "uk": [686, 1268], "unabl": [100, 144], "unalias": 585, "unari": [616, 831], "unbias": [487, 488, 831, 1104, 1105, 1342], "unchang": [216, 340, 634, 735, 831, 881, 930, 947, 1101, 1222, 1325, 1342], "uncompress": [35, 42, 43, 46, 48, 50, 145, 156, 340, 947], "undefin": [738, 831], "under": [37, 42, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 91, 92, 149, 151, 153, 156, 157, 158, 181, 182, 183, 264, 287, 340, 823, 824, 826, 827, 832, 833, 836, 838, 839, 840, 906, 947, 1334, 1336, 1338, 1343, 1348, 1349, 1350], "underestim": [216, 340, 1101, 1342], "underli": [1, 51, 66, 67, 69, 84, 92, 97, 107, 124, 126, 127, 128, 130, 141, 142, 144, 148, 149, 150, 151, 157, 166, 169, 173, 217, 218, 242, 243, 274, 292, 298, 340, 394, 439, 440, 441, 445, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 463, 465, 469, 478, 479, 480, 481, 632, 659, 677, 680, 689, 831, 864, 947, 953, 1000, 1023, 1049, 1050, 1051, 1055, 1058, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1072, 1074, 1075, 1077, 1079, 1083, 1092, 1093, 1094, 1095, 1108, 1220, 1238, 1248, 1259, 1262, 1271, 1317, 1323, 1342, 1370], "understood": 793, "undo": [596, 603, 604, 606, 608, 610, 611], "unexpect": [107, 116, 141, 221, 268, 340, 578, 579, 831, 867, 893, 947, 1195, 1342], "unhelpfulli": [162, 164], "unicod": [20, 415, 691, 696, 697, 704, 715, 953, 1021, 1273, 1278, 1279, 1286, 1297, 1365], "unicodeform": [697, 1279], "unifi": [40, 297, 302, 340, 953], "uniform": [40, 340, 627, 831, 1216, 1342], "unimod": [670, 831, 1253, 1342], "union": [58, 59, 60, 562, 852, 853, 863, 890, 903, 947, 953, 1179, 1369, 1370], "uniqu": [46, 50, 52, 70, 136, 144, 166, 167, 168, 171, 173, 199, 239, 244, 260, 264, 275, 331, 340, 356, 367, 382, 430, 527, 556, 602, 627, 714, 716, 717, 721, 740, 742, 750, 801, 831, 846, 875, 935, 947, 963, 974, 989, 1041, 1143, 1173, 1202, 1216, 1296, 1298, 1299, 1303, 1329, 1331, 1342, 1358, 1360], "unique_column_valu": [264, 340], "unique_count": [831, 1342], "uniquekeepstrategi": [305, 340, 911, 947], "unit": [40, 67, 69, 136, 162, 163, 164, 165, 169, 173, 216, 340, 398, 439, 441, 447, 462, 468, 480, 486, 492, 576, 591, 714, 717, 741, 758, 772, 773, 774, 775, 781, 831, 890, 947, 953, 1004, 1049, 1051, 1057, 1076, 1082, 1094, 1101, 1103, 1109, 1193, 1296, 1299, 1330, 1342, 1373], "uniti": [178, 179, 181, 182, 183, 191, 843], "unity_catalog": 186, "univers": [195, 955], "unix": [66, 67, 447, 781, 1057], "unknown": [570, 685, 791, 1267], "unless": [40, 52, 126, 297, 302, 340, 709, 710, 806, 947, 1291, 1365], "unlik": [135, 230, 340, 871, 947], "unnam": [687, 1269], "unnest": [135, 340, 430, 627, 638, 686, 687, 706, 707, 727, 729, 742, 831, 947, 996, 1041, 1187, 1216, 1226, 1288, 1289, 1342, 1363, 1369], "unpivot": [255, 340, 885, 947], "unregist": [1353, 1354, 1355, 1370, 1372], "unsaf": [136, 831], "unset": [38, 151, 156, 168, 325, 340, 402, 403, 404, 406, 407, 463, 570, 831, 929, 1008, 1009, 1010, 1012, 1013, 1077, 1342, 1351], "unsign": [85, 86, 87, 88, 632, 831, 953, 1220, 1342], "unsigned_integ": 953, "unstabl": [31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 68, 70, 74, 122, 134, 135, 141, 143, 149, 151, 153, 154, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 287, 297, 302, 309, 340, 343, 344, 429, 430, 510, 579, 627, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 758, 831, 852, 853, 863, 890, 903, 906, 914, 947, 1024, 1040, 1041, 1125, 1216, 1228, 1231, 1233, 1234, 1321, 1326, 1342, 1347], "unstack": 340, "unstackdirect": [308, 340], "unsuit": 123, "unsupport": [39, 340], "until": [91, 230, 247, 340, 698, 699, 724, 871, 947, 1280, 1281, 1306], "up": [10, 40, 83, 142, 242, 245, 264, 274, 275, 281, 294, 340, 418, 419, 579, 691, 700, 701, 715, 831, 875, 876, 881, 901, 947, 953, 1026, 1273, 1282, 1283, 1297, 1342], "upcast": [355, 831], "upcast_integer_typ": [1, 55], "updat": [39, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 193, 208, 340, 857, 947], "updated_at": [184, 187, 188], "updated_bi": [184, 187, 188], "upgrad": 103, "upheld": [881, 947], "upon": 140, "upper": [139, 140, 141, 216, 230, 340, 419, 510, 516, 570, 605, 741, 751, 770, 771, 773, 774, 789, 790, 818, 819, 831, 871, 947, 1029, 1101, 1125, 1130, 1193, 1330, 1342, 1360, 1363], "upper_bound": [230, 340, 419, 516, 570, 831, 871, 947, 1029, 1130, 1193, 1342], "uppercas": [611, 723, 1305, 1365], "upsampl": [230, 340, 871, 947], "urandom": [398, 1004], "uri": [38, 39, 141, 142, 143, 154, 155, 340], "url": [141, 142, 151, 156, 158, 178, 685, 687, 1267, 1269], "urllib": 142, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 58, 59, 60, 61, 67, 83, 91, 92, 95, 99, 122, 125, 127, 128, 130, 132, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 178, 199, 200, 201, 204, 208, 210, 212, 213, 219, 220, 221, 223, 229, 230, 237, 239, 241, 242, 243, 245, 249, 255, 259, 260, 262, 263, 264, 268, 272, 273, 274, 275, 276, 278, 279, 281, 286, 287, 288, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 326, 340, 343, 350, 352, 354, 356, 365, 366, 389, 394, 395, 397, 410, 412, 414, 415, 416, 419, 429, 432, 435, 436, 444, 462, 463, 464, 466, 469, 477, 480, 482, 485, 486, 487, 488, 489, 493, 494, 495, 499, 510, 514, 515, 516, 528, 542, 558, 566, 570, 572, 578, 579, 582, 603, 606, 608, 610, 611, 620, 627, 630, 632, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 663, 665, 666, 670, 672, 673, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 693, 694, 695, 696, 697, 700, 701, 702, 704, 706, 708, 710, 711, 712, 713, 714, 716, 717, 721, 724, 725, 729, 737, 743, 744, 746, 747, 748, 749, 750, 753, 754, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 781, 785, 786, 788, 789, 791, 793, 794, 795, 797, 799, 800, 803, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 827, 830, 831, 842, 843, 846, 847, 848, 849, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 876, 879, 885, 890, 893, 896, 897, 898, 899, 901, 903, 905, 906, 907, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 930, 947, 951, 952, 953, 960, 961, 963, 992, 996, 1000, 1001, 1003, 1020, 1021, 1024, 1040, 1042, 1045, 1046, 1054, 1062, 1063, 1076, 1077, 1078, 1080, 1083, 1091, 1094, 1097, 1102, 1103, 1104, 1105, 1110, 1111, 1116, 1122, 1125, 1128, 1129, 1130, 1145, 1159, 1175, 1182, 1187, 1195, 1216, 1218, 1220, 1222, 1224, 1226, 1227, 1228, 1240, 1241, 1243, 1244, 1247, 1253, 1255, 1257, 1258, 1259, 1260, 1262, 1263, 1266, 1267, 1268, 1270, 1271, 1272, 1277, 1278, 1279, 1282, 1283, 1284, 1286, 1288, 1296, 1298, 1299, 1303, 1306, 1317, 1318, 1320, 1323, 1324, 1332, 1342, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1365, 1366, 1370, 1372, 1373], "usag": [169, 173, 284, 340, 953, 1248, 1342], "usd": [228, 340, 1373], "use_pyarrow": [46, 50, 139, 143, 145, 147, 151, 154, 298, 340, 947, 1323, 1342], "use_pyarrow_extension_arrai": [299, 340, 1324, 1342], "use_pyarrow_write_to_dataset": [46, 340], "use_statist": [151, 158], "user": [38, 134, 136, 141, 142, 195, 249, 263, 326, 340, 578, 579, 624, 663, 793, 831, 889, 930, 947, 951, 955, 1195, 1244, 1342], "user_conn": 141, "usernam": [139, 142, 145, 147], "userwarn": 1, "usr": 141, "usual": [99, 142, 193, 302, 340, 438, 1048], "utc": [143, 154, 438, 442, 444, 446, 463, 714, 717, 952, 953, 1048, 1052, 1056, 1077, 1296, 1299], "utc_tz": 953, "utf": [37, 47, 82, 340, 947], "utf8": [20, 139, 140, 153, 691, 704, 715, 1273, 1286, 1297], "utf8_borders_onli": 20, "utf8_ful": [20, 52, 131], "utf8_full_condens": [7, 20, 131], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [302, 340, 781, 947], "uvloop": 141, "uvw": [686, 1268], "v": [8, 9, 46, 216, 340, 662, 747, 749, 831, 1242, 1342, 1354, 1355], "v1": 32, "v2": [8, 145, 156], "val": [40, 271, 340, 579, 624, 735, 821, 831, 895, 947], "valid": [37, 40, 47, 67, 139, 141, 145, 147, 151, 153, 173, 193, 210, 216, 244, 245, 269, 340, 429, 677, 679, 685, 686, 687, 689, 694, 700, 701, 821, 831, 859, 875, 876, 894, 922, 947, 953, 1040, 1101, 1259, 1261, 1267, 1268, 1269, 1271, 1276, 1282, 1283, 1342, 1351, 1352], "validate_output_schema": [881, 947], "vals_phys": [735, 831], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 36, 37, 40, 46, 47, 50, 51, 52, 60, 61, 64, 70, 71, 79, 80, 89, 92, 101, 126, 127, 129, 130, 139, 140, 141, 142, 151, 153, 156, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 193, 197, 199, 200, 201, 208, 212, 213, 215, 218, 219, 220, 221, 225, 228, 230, 231, 232, 236, 240, 242, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 262, 264, 265, 266, 268, 269, 272, 273, 274, 275, 276, 283, 286, 288, 289, 290, 291, 293, 294, 298, 299, 303, 304, 307, 308, 309, 310, 311, 318, 321, 322, 324, 327, 328, 330, 331, 340, 343, 344, 348, 349, 350, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 398, 399, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 428, 429, 430, 433, 435, 436, 441, 445, 455, 460, 469, 478, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 563, 565, 566, 567, 568, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 587, 598, 599, 600, 601, 602, 612, 613, 614, 615, 618, 620, 621, 624, 625, 627, 628, 630, 633, 634, 635, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 667, 668, 669, 670, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 685, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 715, 724, 726, 730, 731, 733, 734, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 754, 757, 759, 760, 762, 764, 765, 766, 767, 768, 778, 779, 784, 785, 786, 787, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 814, 815, 821, 831, 846, 847, 857, 860, 861, 865, 866, 867, 871, 873, 874, 875, 876, 882, 883, 884, 885, 887, 888, 891, 892, 893, 894, 896, 902, 905, 907, 908, 910, 913, 914, 915, 925, 926, 928, 931, 932, 934, 935, 947, 953, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1016, 1017, 1020, 1021, 1022, 1026, 1029, 1031, 1032, 1033, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1051, 1055, 1069, 1074, 1083, 1092, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1115, 1116, 1117, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1180, 1182, 1183, 1184, 1185, 1188, 1189, 1195, 1196, 1197, 1199, 1200, 1202, 1204, 1205, 1207, 1208, 1210, 1211, 1215, 1216, 1217, 1218, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1246, 1250, 1251, 1252, 1253, 1255, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1297, 1306, 1309, 1313, 1314, 1315, 1316, 1323, 1324, 1325, 1329, 1331, 1333, 1342, 1351, 1356, 1358, 1359, 1360, 1361, 1362, 1364, 1365, 1366, 1368, 1370, 1372, 1373], "value1": [673, 831], "value2": [673, 831], "value_a": 1370, "value_b": 1370, "value_count": [740, 831, 1342], "value_cum_sum": [428, 831], "value_cum_sum_all_fil": [428, 831], "value_nam": [255, 307, 340, 885, 913, 947], "value_var": [255, 307, 340, 885, 913, 947], "valueerror": [15, 20], "valueexcept": 791, "var": [40, 174, 340, 657, 658, 831, 947, 1342, 1359], "var_samp": 1359, "vari": [144, 150, 438, 1048, 1373], "variabl": [30, 37, 42, 46, 47, 48, 49, 50, 79, 149, 151, 153, 156, 157, 158, 172, 175, 183, 255, 295, 307, 340, 885, 913, 947, 1318, 1342, 1352, 1354, 1370], "variable_nam": [255, 307, 340, 885, 913, 947], "variad": 141, "varianc": [311, 340, 488, 528, 657, 658, 743, 820, 831, 915, 947, 1105, 1145, 1237, 1332, 1342, 1363], "variou": [141, 198, 204, 340, 831, 854, 947, 952, 953, 1342], "vector": [642, 644, 646, 648, 650, 653, 655, 657, 831, 1229, 1230, 1232, 1235, 1236, 1237, 1342], "vector_index_format": 186, "vectoris": [456, 457, 1070, 1071], "vein": 193, "verbos": [29, 162, 164, 193, 686, 1268], "veri": [141, 242, 304, 340, 579, 831, 930, 1364], "verifi": [245, 340, 876, 947], "versicolor": [340, 343], "version": [38, 39, 57, 61, 125, 139, 140, 143, 144, 154, 161, 166, 167, 168, 169, 173, 176, 183, 197, 199, 209, 231, 244, 255, 280, 287, 297, 298, 302, 316, 321, 340, 343, 432, 444, 456, 457, 469, 480, 501, 508, 586, 587, 593, 597, 634, 676, 684, 729, 744, 753, 761, 805, 810, 831, 846, 858, 863, 875, 885, 892, 900, 906, 919, 920, 925, 947, 953, 1054, 1062, 1063, 1070, 1071, 1083, 1094, 1122, 1123, 1222, 1258, 1266, 1321, 1323, 1326, 1342, 1347], "versu": [208, 340, 857, 947], "vertic": [60, 218, 308, 312, 340, 676, 692, 1258, 1274], "vertical_relax": 60, "via": [30, 139, 140, 141, 145, 149, 151, 153, 156, 157, 158, 196, 198, 209, 242, 274, 340, 432, 579, 687, 831, 858, 892, 947, 956, 1269], "view": [190, 579, 831], "visibl": [17, 216, 340, 1101, 1342], "visit": [429, 831, 1040, 1342], "visual": [237, 239, 340, 594, 903, 947], "volk": 135, "vote": [685, 687, 1267, 1269], "vowel": [700, 701, 1282, 1283], "vstack": [60, 218, 340], "w": [40, 141, 230, 275, 340, 679, 683, 685, 687, 747, 749, 871, 947, 953, 1261, 1265, 1267, 1269, 1292, 1354, 1355, 1358], "w_i": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "wa": [38, 57, 99, 144, 209, 297, 298, 340, 343, 432, 635, 702, 775, 831, 858, 947, 953, 1223, 1284, 1323, 1342, 1347], "wai": [91, 92, 124, 126, 127, 128, 130, 148, 149, 157, 229, 243, 263, 286, 319, 340, 464, 624, 673, 685, 762, 827, 831, 855, 862, 870, 889, 897, 905, 916, 923, 930, 947, 951, 1078, 1267], "walk": 760, "want": [59, 127, 129, 139, 144, 145, 149, 151, 153, 193, 218, 249, 260, 272, 287, 340, 414, 437, 495, 578, 579, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 666, 678, 695, 700, 701, 702, 756, 765, 770, 773, 779, 803, 806, 822, 831, 853, 906, 922, 947, 953, 1020, 1047, 1108, 1195, 1260, 1277, 1282, 1283, 1284, 1342, 1357], "warehous": 142, "warn": [94, 95, 98, 99, 102, 109, 111, 112, 122, 245, 340, 620, 789, 790, 831, 876, 947, 1342], "watermark": [46, 340], "wb": [40, 340], "we": [46, 137, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 198, 208, 209, 230, 245, 264, 272, 310, 340, 343, 432, 459, 464, 477, 510, 542, 570, 578, 579, 640, 643, 645, 647, 649, 651, 654, 656, 658, 687, 700, 701, 719, 769, 770, 771, 772, 773, 774, 791, 818, 819, 821, 831, 857, 858, 867, 871, 876, 881, 893, 896, 947, 1073, 1078, 1091, 1125, 1159, 1195, 1269, 1283, 1301, 1342, 1347, 1354], "weather": [700, 701, 1282, 1283], "wed": [340, 343], "wednesdai": [230, 340, 466, 469, 871, 947, 1080, 1083], "week": [230, 245, 272, 310, 340, 437, 459, 464, 477, 479, 486, 640, 643, 645, 647, 649, 651, 654, 656, 658, 756, 770, 771, 773, 774, 775, 818, 819, 831, 871, 876, 896, 947, 953, 1047, 1073, 1078, 1091, 1093, 1103, 1342, 1366], "week_mask": [437, 756, 1047], "weekdai": [445, 460], "weekend": [437, 756, 1047], "weekli": [230, 340, 477, 871, 947, 1091], "weghorst": [687, 1269], "weight": [135, 485, 486, 487, 488, 641, 642, 644, 646, 648, 650, 653, 655, 657, 670, 831, 1102, 1103, 1104, 1105, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1253, 1342], "wei\u00df": 1365, "well": [40, 139, 140, 141, 153, 340, 516, 810, 831, 1130, 1342, 1370], "were": [193, 634, 635, 827, 831, 1222, 1223, 1342], "west": [70, 246, 340, 877, 947], "what": [198, 260, 340, 437, 578, 678, 702, 831, 1047, 1260, 1284], "whatev": 193, "when": [10, 14, 17, 19, 23, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 67, 83, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 135, 139, 140, 141, 142, 144, 145, 147, 149, 150, 151, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 169, 173, 193, 200, 208, 214, 216, 218, 220, 221, 223, 230, 244, 246, 249, 256, 263, 269, 273, 275, 278, 279, 283, 286, 292, 295, 297, 298, 302, 303, 305, 309, 315, 340, 384, 397, 414, 415, 419, 437, 485, 487, 488, 494, 563, 570, 591, 624, 634, 635, 664, 672, 673, 678, 684, 688, 690, 691, 695, 696, 702, 704, 709, 710, 711, 714, 715, 754, 756, 765, 779, 789, 831, 847, 857, 866, 871, 875, 877, 881, 886, 894, 898, 899, 902, 905, 910, 911, 914, 918, 944, 947, 991, 1003, 1020, 1021, 1029, 1042, 1047, 1101, 1102, 1104, 1105, 1108, 1111, 1135, 1180, 1222, 1223, 1241, 1243, 1246, 1260, 1266, 1270, 1272, 1273, 1277, 1278, 1284, 1286, 1291, 1292, 1293, 1296, 1297, 1317, 1318, 1323, 1342, 1357, 1370], "when_matched_update_al": [39, 340], "when_not_matched_insert_al": [39, 340], "where": [40, 52, 99, 141, 142, 144, 212, 213, 218, 221, 230, 242, 246, 255, 264, 268, 274, 287, 288, 297, 302, 307, 309, 311, 340, 366, 469, 479, 482, 484, 486, 495, 566, 572, 578, 615, 633, 662, 670, 673, 675, 702, 722, 743, 755, 761, 763, 807, 808, 810, 812, 820, 821, 831, 860, 861, 867, 871, 877, 885, 893, 906, 907, 913, 914, 915, 947, 973, 1083, 1093, 1097, 1099, 1103, 1108, 1112, 1207, 1242, 1253, 1257, 1284, 1304, 1332, 1333, 1342, 1351, 1359, 1369, 1370, 1372], "wherea": [139, 153, 272, 340, 412, 416, 464, 477, 612, 613, 640, 831, 896, 947, 1078, 1091, 1204, 1205, 1342], "wherev": [40, 249, 326, 340, 579, 831, 1195, 1342], "whether": [37, 47, 128, 130, 135, 144, 150, 151, 156, 158, 173, 177, 215, 241, 245, 281, 286, 340, 352, 354, 368, 369, 449, 465, 507, 533, 534, 620, 663, 673, 688, 690, 754, 831, 876, 881, 892, 901, 905, 947, 953, 960, 961, 975, 976, 1019, 1024, 1059, 1079, 1100, 1121, 1122, 1150, 1151, 1270, 1272, 1342, 1354, 1370], "which": [1, 6, 10, 20, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 127, 129, 139, 140, 141, 142, 143, 144, 149, 150, 151, 153, 154, 155, 156, 157, 158, 169, 172, 174, 193, 200, 201, 208, 209, 212, 213, 216, 218, 219, 229, 230, 235, 244, 245, 264, 272, 280, 297, 298, 303, 305, 310, 340, 352, 389, 397, 432, 437, 459, 464, 466, 477, 486, 492, 516, 518, 521, 523, 524, 525, 526, 570, 578, 579, 591, 593, 640, 643, 645, 647, 649, 651, 654, 656, 658, 701, 719, 756, 770, 771, 773, 774, 775, 789, 790, 818, 819, 821, 831, 847, 849, 852, 855, 857, 858, 860, 861, 862, 863, 871, 875, 876, 890, 892, 896, 900, 903, 910, 911, 916, 947, 953, 996, 1003, 1047, 1073, 1078, 1080, 1091, 1101, 1103, 1108, 1109, 1130, 1133, 1136, 1138, 1139, 1140, 1141, 1187, 1243, 1301, 1321, 1323, 1342, 1352, 1358, 1370, 1373], "while": [39, 59, 140, 143, 144, 154, 158, 169, 173, 183, 193, 242, 255, 304, 307, 309, 340, 415, 634, 696, 831, 853, 885, 913, 914, 947, 1021, 1222, 1278, 1342], "white": [40, 340], "whitespac": [131, 709, 710, 711, 1291, 1292, 1293, 1365], "whole": [578, 672, 673, 685, 831, 930, 947, 1267], "whose": [52, 93, 245, 264, 340, 489, 777, 831, 876, 947, 953], "why": [852, 863, 890, 903, 947], "wide": [141, 228, 255, 264, 307, 308, 340, 885, 913, 947], "width": [26, 40, 61, 139, 140, 153, 340, 343, 569, 758, 947, 1186, 1342, 1347], "wiki": 20, "wikipedia": 20, "wildcard": [136, 489, 725, 765, 766, 779, 805, 827, 831], "win_loss": [40, 340], "window": [139, 140, 153, 230, 272, 340, 429, 485, 487, 488, 579, 620, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 759, 807, 808, 831, 871, 896, 947, 1040, 1102, 1104, 1105, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1342], "window_s": [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 807, 808, 831, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1342], "windowmappingstrategi": [620, 831], "winter": [688, 690, 700, 701, 1270, 1272], "wise": [40, 52, 141, 223, 340, 357, 358, 359, 360, 361, 362, 420, 421, 422, 490, 574, 667, 668, 669, 733, 734, 779, 805, 831, 964, 965, 966, 967, 968, 969, 1031, 1032, 1033, 1106, 1191, 1192, 1250, 1251, 1252, 1315, 1316, 1342], "wish": [200, 303, 340, 409, 410, 736, 737, 831, 847, 910, 947, 1015, 1327, 1342], "with_column": [1, 12, 55, 58, 59, 134, 230, 263, 272, 302, 308, 315, 340, 349, 351, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 382, 383, 384, 385, 389, 394, 395, 397, 398, 411, 412, 414, 415, 416, 419, 424, 425, 426, 427, 428, 430, 433, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 478, 479, 481, 483, 484, 486, 493, 494, 499, 504, 506, 508, 514, 515, 516, 519, 520, 522, 523, 524, 525, 526, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 599, 601, 603, 604, 606, 608, 610, 611, 614, 615, 616, 620, 621, 624, 625, 627, 630, 634, 635, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 664, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 719, 720, 722, 723, 724, 726, 729, 730, 735, 738, 745, 747, 749, 752, 756, 757, 758, 759, 760, 765, 766, 768, 769, 771, 772, 776, 786, 789, 790, 792, 795, 797, 800, 811, 815, 817, 819, 821, 827, 831, 852, 853, 863, 871, 873, 889, 890, 896, 903, 918, 947, 953, 1041, 1077, 1216, 1272, 1342, 1370], "with_column_nam": 153, "with_columns_seq": [340, 947], "with_context": 947, "with_field": [579, 831], "with_replac": [276, 340, 558, 661, 831, 1175, 1240, 1342], "with_row_count": [340, 947], "with_row_index": [1, 272, 316, 340, 643, 645, 647, 649, 651, 654, 656, 658, 831, 920, 947, 1241, 1342, 1347], "within": [46, 61, 71, 79, 162, 163, 164, 165, 184, 185, 187, 229, 230, 231, 245, 272, 310, 340, 508, 630, 673, 831, 871, 876, 896, 947, 1123, 1342, 1370], "without": [1, 31, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 49, 50, 57, 58, 59, 68, 70, 74, 99, 102, 131, 134, 135, 143, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 244, 246, 287, 297, 298, 302, 308, 309, 340, 343, 344, 429, 430, 510, 579, 627, 641, 643, 645, 647, 649, 651, 652, 654, 656, 658, 678, 688, 690, 702, 758, 762, 789, 790, 809, 831, 852, 853, 875, 877, 906, 914, 947, 951, 1019, 1024, 1040, 1041, 1125, 1216, 1228, 1231, 1233, 1234, 1260, 1270, 1272, 1284, 1321, 1323, 1326, 1342, 1347, 1372], "without_fil": [143, 154, 155], "wod": [711, 1293], "womp": [306, 340, 912, 947], "word": [142, 700, 701, 710, 711, 722, 1304], "work": [40, 68, 70, 74, 139, 140, 145, 149, 151, 159, 279, 315, 340, 352, 354, 390, 414, 415, 418, 419, 489, 498, 542, 571, 578, 579, 603, 604, 606, 608, 610, 611, 620, 691, 695, 696, 704, 715, 739, 789, 831, 892, 899, 918, 947, 951, 953, 960, 961, 997, 1020, 1021, 1026, 1029, 1115, 1159, 1188, 1273, 1277, 1278, 1286, 1297, 1328, 1342], "workaround": 340, "workbook": [40, 144, 150, 340], "workday_raas_format": 186, "worker": [892, 947], "working_with_conditional_format": [40, 340], "working_with_sparklin": [40, 340], "worksheet": [40, 144, 150, 340], "workspac": 178, "workspace_url": 178, "world": [1, 20, 678, 702, 709, 710, 711, 953, 1166, 1260, 1284, 1291, 1292, 1293, 1353, 1356], "wors": [905, 947], "worth": [542, 1159], "worthwhil": [162, 164], "would": [98, 139, 140, 153, 198, 298, 302, 340, 343, 365, 376, 437, 547, 578, 579, 590, 620, 630, 754, 756, 831, 972, 983, 1047, 1164, 1218, 1323, 1342, 1347, 1368], "wrap": [81, 131, 411, 516, 578, 831, 1016, 1342], "wrap_numer": [411, 831, 1016, 1342], "wrapper": [59, 853, 947], "writabl": [35, 37, 42, 43, 44, 45, 46, 280, 298, 340, 1323, 1342], "write": [35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 138, 140, 145, 193, 204, 340, 419, 594, 597, 831, 879, 903, 947, 953, 1029, 1342], "write_avro": 340, "write_clipboard": [138, 340], "write_csv": [36, 140, 153, 340], "write_databas": 340, "write_delta": 340, "write_excel": 340, "write_iceberg": 340, "write_ipc": [145, 340], "write_ipc_stream": 340, "write_json": 340, "write_markdown_frame_to_stdout": 193, "write_ndjson": [44, 340], "write_parquet": 340, "write_t": [46, 340], "write_to_dataset": [46, 340], "writeabl": [298, 340, 1323, 1342], "writer": [39, 340], "writer_properti": [39, 340], "writerproperti": [39, 340], "written": [6, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 280, 340, 593, 900, 947], "ww": [1365, 1372], "www": [697, 727, 1279], "x": [27, 52, 60, 83, 101, 125, 131, 139, 140, 142, 144, 150, 153, 166, 167, 169, 197, 216, 234, 237, 239, 244, 264, 274, 275, 304, 307, 308, 340, 343, 349, 351, 353, 372, 377, 398, 424, 431, 483, 484, 499, 504, 506, 508, 530, 537, 549, 575, 577, 578, 579, 599, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 619, 625, 633, 634, 635, 639, 667, 670, 706, 729, 730, 735, 738, 745, 747, 749, 752, 753, 759, 765, 766, 768, 779, 791, 792, 795, 797, 800, 805, 810, 815, 821, 831, 875, 881, 904, 906, 913, 947, 952, 953, 984, 1023, 1035, 1111, 1195, 1222, 1223, 1250, 1253, 1288, 1321, 1325, 1326, 1342, 1347, 1354, 1355, 1358, 1364, 1370, 1372], "x00": [393, 394, 395, 396, 397, 399, 680, 999, 1000, 1001, 1002, 1003, 1005, 1262], "x01": [397, 1003], "x05": [397, 1003], "x07": 398, "x1": 398, "x10": [397, 1003], "x80": 398, "x83": 398, "x88": 398, "x8e": 398, "x99": 398, "x_": [486, 831, 1103, 1342], "x_0": [308, 340, 485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342], "x_1": [308, 340, 486, 831, 1103, 1342], "x_2": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "x_i": [486, 831, 1103, 1342], "x_invers": [625, 831], "x_pow_8": 1364, "x_round": 1364, "x_round_1": 1364, "x_squar": [625, 831], "x_t": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "x_uniqu": [602, 831], "x_y": [377, 549], "xb": 398, "xb9neq": 398, "xbd": 398, "xc14": 398, "xd3": 398, "xdist": 1373, "xee": 398, "xf4v": 398, "xf9": 398, "xfb": 398, "xff": [393, 394, 395, 396, 399, 680, 999, 1000, 1001, 1002, 1005, 1262], "xi": [686, 1268], "xl": 144, "xlog2": [601, 625, 831], "xlsb": 144, "xlsx": [40, 144, 340], "xlsx2csv": [144, 161], "xlsxwriter": [40, 161, 340], "xor": [408, 831, 1014, 1342, 1361], "xor_xi": [745, 831], "xx": [10, 53, 55, 173, 208, 287, 340, 857, 947, 953, 1358, 1365, 1372], "xxx": [212, 340, 727, 860, 947], "xy": [53, 55], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 349, 679, 686, 831, 1261, 1268, 1319, 1342], "y": [27, 52, 60, 83, 101, 125, 131, 166, 167, 169, 197, 216, 237, 239, 244, 264, 274, 275, 304, 307, 308, 340, 343, 349, 351, 353, 372, 377, 398, 466, 469, 483, 484, 504, 506, 530, 537, 549, 577, 579, 602, 604, 606, 608, 610, 611, 614, 615, 619, 633, 634, 635, 639, 714, 716, 717, 729, 738, 745, 747, 749, 752, 753, 768, 775, 791, 795, 797, 800, 810, 815, 831, 875, 904, 906, 913, 947, 952, 953, 984, 1023, 1080, 1083, 1222, 1223, 1296, 1298, 1299, 1342, 1347, 1358, 1365, 1366, 1372], "y_": [485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342], "y_0": [308, 340, 485, 486, 487, 488, 831, 1102, 1103, 1104, 1105, 1342], "y_1": [308, 340], "y_i": [486, 831, 1103, 1342], "y_mul": 729, "y_t": [485, 487, 488, 831, 1102, 1104, 1105, 1342], "y_uniqu": [602, 831], "ya": [704, 1286], "ya29": 155, "year": [230, 245, 272, 287, 310, 340, 437, 449, 450, 459, 460, 462, 464, 477, 478, 640, 643, 645, 647, 649, 651, 654, 656, 658, 756, 769, 770, 771, 772, 773, 774, 818, 819, 831, 871, 876, 896, 947, 953, 1047, 1059, 1060, 1073, 1074, 1076, 1078, 1091, 1092, 1366], "yellow": [340, 344, 393, 394, 395, 396, 399], "yield": [128, 130, 139, 140, 141, 153, 216, 218, 241, 304, 340, 499, 578, 620, 831, 947, 1101, 1108, 1342], "you": [1, 10, 14, 40, 46, 50, 52, 59, 60, 124, 126, 127, 128, 129, 130, 136, 139, 140, 141, 142, 144, 145, 148, 149, 151, 153, 157, 159, 193, 200, 218, 221, 230, 241, 242, 245, 249, 260, 264, 268, 272, 273, 274, 275, 287, 294, 297, 303, 304, 305, 307, 326, 340, 343, 409, 410, 414, 437, 456, 457, 459, 463, 466, 469, 489, 495, 516, 542, 570, 578, 579, 594, 620, 625, 632, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 666, 678, 695, 700, 701, 702, 722, 725, 736, 737, 756, 765, 770, 773, 775, 779, 789, 793, 803, 806, 810, 822, 831, 847, 853, 867, 871, 876, 892, 893, 896, 903, 906, 910, 911, 913, 922, 930, 947, 951, 953, 1015, 1020, 1047, 1070, 1071, 1077, 1080, 1083, 1108, 1130, 1159, 1195, 1214, 1220, 1260, 1277, 1282, 1283, 1284, 1304, 1321, 1327, 1342, 1347, 1352, 1357, 1373], "your": [38, 40, 51, 52, 92, 134, 139, 140, 141, 142, 144, 159, 193, 242, 244, 249, 274, 275, 278, 294, 314, 319, 326, 340, 343, 442, 486, 501, 579, 687, 714, 716, 717, 724, 793, 831, 875, 881, 898, 917, 923, 930, 947, 951, 1052, 1103, 1195, 1269, 1296, 1298, 1299, 1306, 1342, 1347, 1373], "yy": [10, 53, 55, 173, 208, 287, 340, 857, 947, 953, 1358, 1365, 1372], "yyi": [212, 340, 727, 860, 947], "yyyi": [40, 340], "yz": [53, 55], "z": [40, 60, 83, 131, 167, 216, 237, 239, 244, 274, 275, 304, 307, 308, 340, 349, 351, 353, 508, 537, 579, 604, 606, 608, 610, 611, 619, 633, 634, 635, 678, 686, 688, 690, 702, 714, 717, 747, 749, 768, 795, 797, 800, 806, 810, 815, 831, 875, 904, 906, 913, 947, 952, 953, 1111, 1222, 1223, 1260, 1268, 1270, 1272, 1284, 1296, 1299, 1342, 1354, 1358, 1370, 1372], "z_0": [308, 340], "z_1": [308, 340], "zap": 953, "zero": [28, 40, 124, 125, 137, 139, 140, 145, 147, 151, 168, 171, 197, 220, 230, 242, 273, 287, 292, 298, 299, 340, 494, 570, 575, 662, 670, 724, 738, 831, 850, 866, 871, 947, 1028, 1111, 1187, 1253, 1306, 1317, 1323, 1324, 1342, 1364, 1370], "zero_copy_onli": [1323, 1342], "zfill": [699, 745, 831, 1281], "zip": 1373, "zip_with": [223, 340, 1342], "zone": [67, 169, 170, 173, 438, 442, 463, 486, 717, 772, 773, 774, 831, 953, 1048, 1052, 1077, 1103, 1299, 1342], "zoneinfo": [67, 953], "zoom": [40, 340], "zstd": [39, 42, 43, 46, 48, 50, 340, 947], "zz": [173, 208, 287, 340, 857, 947, 1358, 1365, 1372], "zzz": 727, "\u03bc": [131, 201, 230, 242, 272, 274, 275, 294, 310, 340, 438, 439, 441, 442, 443, 444, 446, 448, 451, 453, 454, 456, 457, 458, 459, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 640, 643, 645, 647, 649, 651, 654, 656, 658, 714, 717, 772, 773, 774, 775, 781, 831, 849, 871, 896, 947, 953, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1063, 1064, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1296, 1299, 1365], "\u0441\u0438\u043d\u0438\u0439": 1365, "\u0967\u096f\u096f\u096f": 953, "\u0968\u0966\u096d\u096d": 953, "\u4eac\u90fd": 953, "\u5927\u962a": 953, "\u6771\u4eac": [414, 415, 695, 696, 953, 1020, 1021, 1277, 1278], "\u90fd\u5e02": 953, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [697, 1279], "\uff54\uff45\uff53\uff54": 1365, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1365, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1365, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1365, "\ud835\udf0b": 1364}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1358, 1371], "IF": 1362, "__array__": [195, 955], "__arrow_c_stream__": [196, 956], "__dataframe__": 197, "__getitem__": [198, 957], "__iter__": 318, "ab": [348, 958, 1364], "aco": 1367, "acosd": 1367, "add": 349, "add_business_dai": [437, 1047], "agg": [319, 923], "agg_group": 350, "aggreg": [194, 347, 845, 954, 1359], "alia": [351, 959], "alias": [1359, 1364, 1365], "align_fram": 52, "all": [320, 352, 368, 533, 746, 924, 960, 975, 1150, 1371], "all_horizont": 747, "and_": 353, "ani": [354, 369, 534, 748, 961, 976, 1151], "any_horizont": 749, "api": [1, 53, 54, 55, 56, 843, 1370], "append": [355, 962], "approx_n_uniqu": [199, 356, 750, 846, 963], "arang": 751, "arcco": [357, 964], "arccosh": [358, 965], "arcsin": [359, 966], "arcsinh": [360, 967], "arctan": [361, 968], "arctan2": 752, "arctan2d": 753, "arctanh": [362, 969], "arg_max": [363, 370, 535, 970, 977, 1152], "arg_min": [364, 371, 536, 971, 978, 1153], "arg_sort": [365, 972], "arg_sort_bi": 754, "arg_tru": [366, 973], "arg_uniqu": [367, 974], "arg_wher": 755, "arr": [368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "arrai": [61, 823, 1334, 1360], "array_agg": 1360, "array_contain": 1360, "array_get": 1360, "array_length": 1360, "array_low": 1360, "array_mean": 1360, "array_revers": 1360, "array_sum": 1360, "array_to_str": 1360, "array_uniqu": 1360, "array_upp": 1360, "asin": 1367, "asind": 1367, "assert": 1373, "assert_frame_equ": 162, "assert_frame_not_equ": 163, "assert_series_equ": 164, "assert_series_not_equ": 165, "atan": 1367, "atan2": 1367, "atan2d": 1367, "atand": 1367, "attribut": [335, 942, 1335], "avail": 1, "avg": 1359, "avro": 844, "backward_fil": 392, "base_utc_offset": [438, 1048], "batched_read": 133, "batchedcsvread": 133, "bin": [393, 394, 395, 396, 397, 398, 399, 999, 1000, 1001, 1002, 1003, 1004, 1005], "binari": [62, 824, 837, 1336], "bit_and": 1361, "bit_count": 1361, "bit_length": 1365, "bit_or": 1361, "bit_xor": 1361, "bitwis": 1361, "bitwise_and": [400, 1006], "bitwise_count_on": [401, 1007], "bitwise_count_zero": [402, 1008], "bitwise_leading_on": [403, 1009], "bitwise_leading_zero": [404, 1010], "bitwise_or": [405, 1011], "bitwise_trailing_on": [406, 1012], "bitwise_trailing_zero": [407, 1013], "bitwise_xor": [408, 1014], "boolean": [63, 825, 1337], "bottom_k": [200, 409, 847, 1015], "bottom_k_bi": 410, "build_info": 57, "business_day_count": 756, "cach": 848, "cancel": 939, "cast": [201, 411, 849, 1016, 1368], "cast_time_unit": [439, 1049], "cat": [412, 413, 414, 415, 416, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024], "catalog": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "cataloginfo": 184, "categor": 64, "categori": [826, 1338], "categoricalremappingwarn": 94, "cbrt": [417, 1025, 1364], "ceil": [418, 1026, 1364], "centuri": [440, 1050], "chronoformatwarn": 95, "chunk_length": 1027, "claus": 1358, "clear": [202, 850, 1028], "clip": [419, 1029], "clipboard": 844, "clone": [203, 851, 1030], "cloud": 844, "co": [420, 1031, 1367], "coalesc": [757, 1362], "col": 827, "collect": 852, "collect_al": 58, "collect_all_async": 59, "collect_async": 853, "collect_schema": [204, 854], "column": [166, 167, 205, 828, 855], "columninfo": 185, "columnnotfounderror": 96, "combin": [441, 1051], "comparison": [837, 1346], "comput": [336, 829, 1339], "computeerror": 97, "concat": [60, 537, 676, 1154, 1258, 1365], "concat_arr": 758, "concat_list": 759, "concat_str": 760, "concat_w": 1365, "condit": 1362, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 193], "conjunct": 837, "contain": [372, 393, 538, 677, 979, 999, 1155, 1259], "contains_ani": [678, 1260], "context": 193, "convers": 842, "convert_time_zon": [442, 1052], "corr": [206, 761], "cosd": 1367, "cosh": [421, 1032], "cot": [422, 1033, 1367], "cotd": 1367, "count": [207, 321, 423, 762, 856, 925, 1034, 1359], "count_match": [373, 539, 679, 980, 1156, 1261], "cov": 763, "creat": 1372, "create_list_strategi": 168, "credenti": 844, "credentialprovid": 31, "credentialprovideraw": 32, "credentialproviderazur": 33, "credentialprovidergcp": 34, "csv": [133, 844], "cum_count": [424, 764, 1035], "cum_fold": 765, "cum_max": [425, 1036], "cum_min": [426, 1037], "cum_prod": [427, 1038], "cum_reduc": 766, "cum_sum": [428, 767, 1039], "cum_sum_horizont": 768, "cumulative_ev": [429, 1040], "customufuncwarn": 98, "cut": [430, 1041], "dai": [445, 1055], "data": 345, "databas": 844, "datafram": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 169, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340], "dataorientationwarn": 99, "dataset": 844, "datasourceformat": 186, "datatyp": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 345], "date": [66, 443, 769, 1053, 1365], "date_part": 1366, "date_rang": [770, 771], "datetim": [67, 444, 772, 1054], "datetime_rang": [773, 774], "decim": 68, "decod": [394, 680, 1000, 1262], "decor": 193, "degre": [431, 1367], "delet": 1372, "delta": 844, "describ": [208, 857, 1042], "descript": [337, 943, 1340], "deseri": [209, 432, 858], "diff": [433, 540, 1043, 1157], "disable_string_cach": 91, "distinct": 1358, "div": 1364, "document": 1370, "dot": [434, 1044], "drop": [210, 859, 1372], "drop_in_plac": 211, "drop_nan": [212, 435, 860, 1045], "drop_nul": [213, 436, 541, 861, 1046, 1158], "dst_offset": [446, 1056], "dt": [437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095], "dtype": [170, 214, 862, 1096], "duplicateerror": 100, "durat": [69, 775], "element": 776, "enable_string_cach": 92, "encod": [395, 681, 1001, 1263], "ends_with": [396, 412, 682, 1002, 1017, 1264, 1365], "engine_config": 922, "entropi": [482, 1097], "enum": 70, "epoch": [447, 1057], "eq": [483, 583, 1098], "eq_miss": [484, 1099], "equal": [215, 1100], "error": 346, "escape_regex": [93, 683, 1265], "estimated_s": [216, 1101], "eval": [542, 1159], "ewm_mean": [485, 1102], "ewm_mean_bi": [486, 1103], "ewm_std": [487, 1104], "ewm_var": [488, 1105], "exampl": [1, 953, 1373], "excel": 844, "except": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 346, 1371], "exclud": [489, 777], "execut": 1351, "execute_glob": 1352, "exp": [490, 1106, 1364], "explain": [863, 1372], "explod": [217, 374, 491, 543, 684, 864, 981, 1107, 1160, 1266], "export": [338, 1341], "expr": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745], "express": [831, 951, 1370], "extend": [1, 218, 1108], "extend_const": [492, 1109], "extract": [685, 1267, 1366], "extract_al": [686, 1268], "extract_group": [687, 1269], "extract_mani": [688, 1270], "feather": 844, "fetch": 940, "fetch_block": 941, "field": [71, 725, 1307, 1308], "fill_nan": [219, 493, 865, 1110], "fill_nul": [220, 494, 866, 1111], "filter": [221, 495, 867, 1112], "find": [689, 1271], "find_mani": [690, 1272], "first": [322, 375, 496, 544, 778, 868, 926, 982, 1113, 1161, 1359], "flag": [222, 1114], "flatten": 497, "float32": 72, "float64": 73, "floor": [498, 1115, 1364], "floordiv": 499, "fold": [223, 779], "format": 780, "forward_fil": 500, "frame": 1370, "from": 1358, "from_arrow": 124, "from_datafram": 125, "from_dict": [126, 127], "from_epoch": 781, "from_json": 501, "from_numpi": 128, "from_panda": 129, "from_record": 130, "from_repr": 131, "function": [1, 830, 842, 953, 1363], "gather": [502, 545, 1116, 1162], "gather_everi": [224, 503, 546, 869, 1117, 1163], "ge": [504, 1118], "get": [376, 505, 547, 983, 1164], "get_categori": [413, 1018], "get_chunk": 1119, "get_column": [225, 227], "get_column_index": 226, "get_index_typ": 132, "get_polars_schema": 189, "get_table_info": 179, "glimps": 228, "global": 1370, "gpuengin": [922, 944], "greatest": 1362, "group": [782, 1358], "group_bi": [229, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 870, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938], "group_by_dynam": [230, 871], "groupbi": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 945], "gt": [506, 1120], "has_multiple_output": 584, "has_nul": [507, 1121], "has_valid": 1122, "hash": [508, 1123], "hash_row": 231, "have": 1358, "head": [232, 323, 509, 548, 691, 783, 872, 927, 1124, 1165, 1273], "height": 233, "helper": 1373, "hist": [510, 1125], "hour": [448, 1058], "hstack": 234, "iceberg": 844, "ifnul": 1362, "implod": [511, 784, 1126], "import": 953, "in_process": [939, 940, 941], "index": 0, "index_of": [512, 1127], "initcap": 1365, "inprocessqueri": [939, 940, 941, 946], "input": 844, "insert_column": 235, "inspect": [513, 873], "instanc": 193, "int128": 74, "int16": 75, "int32": 76, "int64": 77, "int8": 78, "int_rang": [785, 786], "interfac": 1369, "interpol": [236, 514, 874, 1128], "interpolate_bi": [515, 1129], "intersect": 1371, "introduct": 1370, "invalidoperationerror": 101, "io": [133, 134, 951], "ipc": 844, "is_between": [516, 1130], "is_column": 585, "is_column_select": 586, "is_dupl": [237, 517, 1131], "is_empti": [238, 1132], "is_finit": [518, 1133], "is_first_distinct": [519, 1134], "is_in": [520, 1135], "is_infinit": [521, 1136], "is_last_distinct": [522, 1137], "is_leap_year": [449, 1059], "is_liter": 587, "is_loc": 1019, "is_nan": [523, 1138], "is_not_nan": [524, 1139], "is_not_nul": [525, 1140], "is_nul": [526, 1141], "is_regex_project": 588, "is_sort": 1142, "is_uniqu": [239, 527, 1143], "iso_year": [450, 1060], "item": [240, 1144], "iter_column": 241, "iter_row": 242, "iter_slic": 243, "join": [244, 377, 549, 692, 875, 984, 1166, 1274, 1358], "join_asof": [245, 876], "join_wher": [246, 877], "json": 844, "json_decod": [693, 1275], "json_encod": [726, 1309], "json_norm": 135, "json_path_match": [694, 1276], "keep": 603, "kurtosi": [528, 1145], "lake": 844, "last": [324, 378, 529, 550, 787, 878, 928, 985, 1146, 1167, 1359], "lazi": [247, 879], "lazyfram": [47, 48, 49, 50, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 947], "lazygroupbi": [923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938], "le": [530, 1147], "least": 1362, "left": 1365, "len": [325, 531, 551, 788, 929, 1148, 1168], "len_byt": [414, 695, 1020, 1277], "len_char": [415, 696, 1021, 1278], "length": 1365, "limit": [248, 532, 880, 1149, 1358], "linear_spac": [789, 790], "list": [79, 171, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 832, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1343], "list_catalog": 180, "list_namespac": 181, "list_tabl": 182, "lit": 791, "ln": 1364, "load": [2, 193], "load_from_fil": 3, "load_profil": 172, "log": [573, 1190, 1364], "log10": [574, 1191, 1364], "log1p": [575, 1192, 1364], "log2": 1364, "lower": 1365, "lower_bound": [576, 1193], "lt": [577, 1194], "ltrim": 1365, "manag": 193, "manipul": [342, 835, 949, 1345], "map": 604, "map_batch": [578, 792, 881], "map_el": [579, 1195], "map_field": 605, "map_group": [326, 793, 930], "map_row": 249, "mapwithoutreturndtypewarn": 102, "math": 1364, "max": [250, 327, 379, 552, 580, 794, 882, 931, 986, 1061, 1169, 1196, 1359], "max_horizont": [251, 795], "mean": [252, 328, 553, 581, 796, 883, 932, 1062, 1170, 1197], "mean_horizont": [253, 797], "median": [254, 329, 380, 554, 582, 798, 884, 933, 987, 1063, 1171, 1198, 1359], "melt": [255, 885], "merge_sort": [256, 886], "meta": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 833], "metadata": 950, "method": 1370, "microsecond": [451, 1064], "millennium": [452, 1065], "millisecond": [453, 1066], "min": [257, 330, 381, 555, 598, 799, 887, 934, 988, 1067, 1172, 1199, 1359], "min_horizont": [258, 800], "minut": [454, 1068], "miscellan": [341, 834, 842, 948, 1344], "mod": [599, 1364], "mode": [600, 1200], "moduleupgraderequirederror": 103, "month": [455, 1069], "month_end": [456, 1070], "month_start": [457, 1071], "mul": 601, "multipl": 193, "n_chunk": [259, 1201], "n_uniqu": [260, 331, 382, 556, 602, 801, 935, 989, 1173, 1202], "name": [603, 604, 605, 606, 607, 608, 609, 610, 611, 828, 836, 1203, 1371], "namespaceinfo": 187, "nan_max": [612, 1204], "nan_min": [613, 1205], "nanosecond": [458, 1072], "ne": [589, 614, 1206], "ne_miss": [615, 1207], "neg": 616, "nest": 345, "new": 1, "new_from_index": 1208, "next_batch": 133, "nodataerror": 104, "normal": [697, 1279, 1365], "norowsreturnederror": 105, "not_": [617, 1209], "nth": 802, "null": 80, "null_count": [261, 618, 888, 1210], "nullif": 1362, "numer": [345, 837, 1346], "object": 81, "octet_length": 1365, "od": 844, "offset": 1358, "offset_bi": [459, 1073], "ones": 803, "oper": [837, 953, 1346, 1371, 1372], "option": 193, "or_": 619, "order": 1358, "ordinal_dai": [460, 1074], "other": 345, "outofboundserror": 106, "output": 844, "output_nam": 590, "over": 620, "pad_end": [698, 1280], "pad_start": [699, 1281], "panic": 346, "panicexcept": 107, "parallel": 842, "parametercollisionerror": 108, "parametr": [166, 167, 168, 169, 170, 171, 172, 173, 174, 1373], "parquet": 844, "partition_bi": 262, "pct_chang": [621, 1211], "peak_max": [622, 1212], "peak_min": [623, 1213], "performancewarn": 109, "pi": 1364, "pipe": [263, 624, 889], "pivot": 264, "plot": [343, 1347], "plugin": [134, 136, 951], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1373], "polarserror": 110, "polarsinefficientmapwarn": 111, "polarswarn": 112, "pop": 591, "pow": [625, 1214, 1364], "prefix": 606, "prefix_field": 607, "product": [265, 626, 1215], "profil": [890, 1373], "provid": 1, "pyarrow": 844, "python": [843, 1370], "qcut": [627, 1216], "quantil": [266, 332, 628, 804, 891, 936, 1217], "quantile_cont": 1359, "quantile_disc": 1359, "quarter": [461, 1075], "queri": 1370, "radian": [629, 1367], "random": 842, "rank": [630, 1218], "read_avro": 137, "read_clipboard": 138, "read_csv": 139, "read_csv_batch": 140, "read_databas": 141, "read_database_uri": 142, "read_delta": 143, "read_excel": 144, "read_ipc": 145, "read_ipc_schema": 146, "read_ipc_stream": 147, "read_json": 148, "read_ndjson": 149, "read_od": 150, "read_parquet": 151, "read_parquet_schema": 152, "rechunk": [267, 631, 1219], "reduc": 805, "refer": 843, "regexp_lik": 1365, "regist": 1353, "register_dataframe_namespac": 53, "register_expr_namespac": 54, "register_glob": 1354, "register_io_sourc": 134, "register_lazyframe_namespac": 55, "register_mani": 1355, "register_plugin_funct": 136, "register_series_namespac": 56, "registr": 1, "reinterpret": [397, 632, 1003, 1220], "remot": 892, "remov": [268, 893], "renam": [269, 894, 1221], "rename_field": [727, 1310], "repeat": 806, "repeat_bi": 633, "replac": [462, 634, 700, 1076, 1222, 1282, 1365], "replace_al": [701, 1283], "replace_column": 270, "replace_mani": [702, 1284], "replace_strict": [635, 1223], "replace_time_zon": [463, 1077], "reshap": [636, 1224], "restore_default": 4, "revers": [271, 383, 557, 637, 703, 895, 990, 1174, 1225, 1285, 1365], "right": 1365, "rle": [638, 1226], "rle_id": [639, 1227], "roll": [272, 640, 896], "rolling_corr": 807, "rolling_cov": 808, "rolling_map": [641, 1228], "rolling_max": [642, 1229], "rolling_max_bi": 643, "rolling_mean": [644, 1230], "rolling_mean_bi": 645, "rolling_median": [646, 1231], "rolling_median_bi": 647, "rolling_min": [648, 1232], "rolling_min_bi": 649, "rolling_quantil": [650, 1233], "rolling_quantile_bi": 651, "rolling_skew": [652, 1234], "rolling_std": [653, 1235], "rolling_std_bi": 654, "rolling_sum": [655, 1236], "rolling_sum_bi": 656, "rolling_var": [657, 1237], "rolling_var_bi": 658, "root_nam": 592, "round": [464, 659, 1078, 1238, 1364], "round_sig_fig": [660, 1239], "row": [273, 274], "rows_by_kei": 275, "rowserror": 113, "rtrim": 1365, "sampl": [276, 558, 661, 1175, 1240], "save": [5, 193], "save_to_fil": 6, "scan_csv": 153, "scan_delta": 154, "scan_iceberg": 155, "scan_ipc": 156, "scan_ndjson": 157, "scan_parquet": 158, "scan_pyarrow_dataset": 159, "scan_tabl": 183, "scatter": 1241, "schema": [277, 897, 952, 1311], "schemaerror": 116, "schemafieldnotfounderror": 117, "search_sort": [662, 1242], "second": [465, 1079], "select": [278, 342, 809, 835, 898, 949, 1345, 1358], "select_seq": [279, 899], "selector": 953, "seri": [173, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1342], "serial": [280, 341, 593, 900, 948], "set": [953, 1243, 1371], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [559, 1176], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [560, 1177], "set_profil": 174, "set_random_se": 160, "set_sort": [281, 663, 901, 1244], "set_streaming_chunk_s": 14, "set_symmetric_differ": [561, 1178], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [562, 1179], "set_verbos": 29, "shape": [282, 1245], "shapeerror": 118, "shift": [283, 384, 563, 664, 902, 991, 1180, 1246], "show": 1372, "show_graph": [594, 903], "show_vers": 161, "shrink_dtyp": [665, 1247], "shrink_to_fit": [284, 1248], "shuffl": [666, 1249], "sign": [667, 1250, 1364], "sin": [668, 1251, 1367], "sind": 1367, "sinh": [669, 1252], "sink_csv": 47, "sink_ipc": 48, "sink_ndjson": 49, "sink_parquet": 50, "size": [398, 1004], "skew": [670, 1253], "slice": [285, 564, 671, 704, 904, 1181, 1254, 1286], "sort": [286, 385, 565, 672, 905, 992, 1182, 1255], "sort_bi": 673, "split": [705, 1287], "split_exact": [706, 1288], "splitn": [707, 1289], "sql": [287, 810, 906, 1358, 1363, 1369, 1370], "sql_expr": 811, "sqlcontext": [1351, 1352, 1353, 1354, 1355, 1356, 1357, 1370], "sqlinterfaceerror": 114, "sqlsyntaxerror": 115, "sqrt": [674, 1256, 1364], "starts_with": [399, 416, 708, 1005, 1022, 1290, 1365], "state": [30, 193], "std": [288, 386, 566, 675, 812, 907, 993, 1183, 1257], "stddev": 1359, "str": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306], "strategi": 1373, "strftime": [466, 1080, 1366], "string": [82, 345, 838, 1348, 1365], "stringcach": [51, 842], "stringcachemismatcherror": 119, "strip_char": [709, 1291], "strip_chars_end": [710, 1292], "strip_chars_start": [711, 1293], "strip_prefix": [712, 1294], "strip_suffix": [713, 1295], "strpo": 1365, "strptime": [714, 1296, 1365], "struct": [83, 725, 726, 727, 728, 729, 813, 839, 1307, 1308, 1309, 1310, 1311, 1312, 1349], "structfieldnotfounderror": 120, "style": 344, "sub": 730, "substr": 1365, "suffix": 608, "suffix_field": 609, "sum": [289, 333, 387, 567, 731, 814, 908, 937, 994, 1184, 1313, 1359], "sum_horizont": [290, 815], "tabl": [1356, 1372], "tableinfo": [188, 189], "tabletyp": 190, "tail": [291, 334, 568, 715, 732, 816, 909, 938, 1185, 1297, 1314], "tan": [733, 1315, 1367], "tand": 1367, "tanh": [734, 1316], "tempor": [345, 840, 1350, 1366], "test": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 1373], "thread_pool_s": 175, "threadpool_s": 176, "time": [84, 467, 817, 1081], "time_rang": [818, 819], "timestamp": [468, 1082, 1365], "to_arrai": [569, 1186], "to_arrow": [292, 1317], "to_dat": [716, 1298], "to_datetim": [717, 1299], "to_decim": [718, 1300], "to_dict": [293, 294], "to_dummi": [295, 1318], "to_fram": 1319, "to_init_repr": [296, 1320], "to_integ": [719, 1301], "to_jax": [297, 1321], "to_list": [388, 995, 1322], "to_loc": 1023, "to_lowercas": [610, 720, 1302], "to_numpi": [298, 1323], "to_panda": [299, 1324], "to_phys": [735, 1325], "to_seri": 300, "to_str": [469, 1083], "to_struct": [301, 389, 570, 996, 1187], "to_tim": [721, 1303], "to_titlecas": [722, 1304], "to_torch": [302, 1326], "to_uppercas": [611, 723, 1305], "toomanyrowsreturnederror": 121, "top_k": [303, 736, 910, 1327], "top_k_bi": 737, "total_dai": [470, 1084], "total_hour": [471, 1085], "total_microsecond": [472, 1086], "total_millisecond": [473, 1087], "total_minut": [474, 1088], "total_nanosecond": [475, 1089], "total_second": [476, 1090], "transpos": 304, "tree_format": 595, "trigonometri": 1367, "truediv": 738, "truncat": [477, 1091, 1372], "try_cast": 1368, "type": [345, 1368], "uint16": 85, "uint32": 86, "uint64": 87, "uint8": 88, "undo_alias": 596, "union": 1371, "uniqu": [305, 390, 571, 739, 911, 997, 1188, 1328], "unique_count": [740, 1329], "uniti": [184, 185, 186, 187, 188, 189, 190, 192], "unknown": 89, "unnest": [306, 728, 912, 1312, 1360, 1372], "unpivot": [307, 913], "unregist": 1357, "unstablewarn": 122, "unstack": 308, "unsuitablesqlerror": 123, "updat": [309, 914], "upper": 1365, "upper_bound": [741, 1330], "upsampl": 310, "us": 193, "uses_lexical_ord": 1024, "using_string_cach": 177, "utf8": 90, "value_count": [742, 1331], "var": [311, 391, 572, 743, 820, 915, 998, 1189, 1332], "varianc": 1359, "vstack": 312, "warn": 346, "week": [478, 1092], "weekdai": [479, 1093], "when": 821, "where": [744, 1358], "width": [313, 916], "window": 841, "with_column": [314, 917], "with_columns_seq": [315, 918], "with_context": 919, "with_field": 729, "with_row_count": [316, 920], "with_row_index": [317, 921], "with_time_unit": [480, 1094], "write_avro": 35, "write_clipboard": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_iceberg": 41, "write_ipc": 42, "write_ipc_stream": 43, "write_json": [44, 597], "write_ndjson": 45, "write_parquet": 46, "xor": 745, "year": [481, 1095], "zero": 822, "zfill": [724, 1306], "zip_with": 1333}})